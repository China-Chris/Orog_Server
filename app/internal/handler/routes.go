// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.5

package handler

import (
	"net/http"
	"time"

	account_v1 "github.com/simance-ai/smdx/app/internal/handler/account_v1"
	defi_quotation_v1 "github.com/simance-ai/smdx/app/internal/handler/defi_quotation_v1"
	order_v1 "github.com/simance-ai/smdx/app/internal/handler/order_v1"
	"github.com/simance-ai/smdx/app/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				// 根据address获取account信息
				Method:  http.MethodGet,
				Path:    "/get_account",
				Handler: account_v1.GetAccountHandler(serverCtx),
			},
			{
				// 根据address获取account历史买卖记录
				Method:  http.MethodGet,
				Path:    "/get_account_summary",
				Handler: account_v1.GetAccountSummaryHandler(serverCtx),
			},
			{
				// 根据钱包签名获取token
				Method:  http.MethodPost,
				Path:    "/get_token",
				Handler: account_v1.GetTokenHandler(serverCtx),
			},
		},
		rest.WithPrefix("/account/v1"),
		rest.WithTimeout(3000*time.Millisecond),
		rest.WithMaxBytes(1048576),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 通过token获取个人信息
				Method:  http.MethodGet,
				Path:    "/account_info",
				Handler: account_v1.AccountInfoHandler(serverCtx),
			},
			{
				// 增加followToken
				Method:  http.MethodPost,
				Path:    "/add_follow_token",
				Handler: account_v1.AddFollowTokenHandler(serverCtx),
			},
			{
				// 取消followToken
				Method:  http.MethodPost,
				Path:    "/cancel_follow_token",
				Handler: account_v1.CancelFollowTokenHandler(serverCtx),
			},
			{
				// 修改acount用户信息
				Method:  http.MethodPost,
				Path:    "/update_account",
				Handler: account_v1.UpdateAccountHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/account/v1"),
		rest.WithTimeout(3000*time.Millisecond),
		rest.WithMaxBytes(1048576),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/market/:chain/:quote_mint",
				Handler: defi_quotation_v1.GetMarketInfoByQuoteMintHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/market/activity/:chain/:market_address",
				Handler: defi_quotation_v1.MarketActivityHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/market/kline/:chain/:market_address",
				Handler: defi_quotation_v1.MarketKlineHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/market/rank/:chain/swaps/:period",
				Handler: defi_quotation_v1.GetTrendingMarketHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/meme/rank/:chain/:pump_or_raydium",
				Handler: defi_quotation_v1.GetMemeMarketHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/start/:chain/:height",
				Handler: defi_quotation_v1.StartHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/x/rank/:chain/:period",
				Handler: defi_quotation_v1.GetXTopHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/xtop/rank/:chain/swaps/:period",
				Handler: defi_quotation_v1.GetXTopMarketHandler(serverCtx),
			},
		},
		rest.WithPrefix("/defi/quotation/v1"),
		rest.WithTimeout(3000*time.Millisecond),
		rest.WithMaxBytes(1048576),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthInterceptor},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/market/:chain/detail/:market_address",
					Handler: defi_quotation_v1.MarketDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/tokens/:chain/search",
					Handler: defi_quotation_v1.SearchCurrencyHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/defi/quotation/v1"),
		rest.WithTimeout(3000*time.Millisecond),
		rest.WithMaxBytes(1048576),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/follow/rank/:chain/swaps/:period",
				Handler: defi_quotation_v1.GetFollowMarketHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/defi/quotation/v1"),
		rest.WithTimeout(3000*time.Millisecond),
		rest.WithMaxBytes(1048576),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/trade/order",
				Handler: order_v1.CreateOrderHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/order/v1"),
		rest.WithTimeout(3000*time.Millisecond),
		rest.WithMaxBytes(1048576),
	)
}
