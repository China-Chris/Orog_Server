// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.5
// Source: account.proto

package accountclient

import (
	"context"

	"github.com/simance-ai/smdx/rpcx/account/account"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AccountRequest             = account.AccountRequest
	AccountResponse            = account.AccountResponse
	AddTokenFollowRequest      = account.AddTokenFollowRequest
	AddTokenFollowResponse     = account.AddTokenFollowResponse
	CheckAccountRequest        = account.CheckAccountRequest
	CheckAccountResponse       = account.CheckAccountResponse
	GetAccountInfoRequest      = account.GetAccountInfoRequest
	GetAccountInfoResponse     = account.GetAccountInfoResponse
	GetFollowTokenListRequest  = account.GetFollowTokenListRequest
	GetFollowTokenListResponse = account.GetFollowTokenListResponse
	IsTokenFollowedRequest     = account.IsTokenFollowedRequest
	IsTokenFollowedResponse    = account.IsTokenFollowedResponse
	RebateRequest              = account.RebateRequest
	Request                    = account.Request
	Response                   = account.Response
	UpdateUserBaseInfoRequest  = account.UpdateUserBaseInfoRequest
	UpdateUserBaseInfoResponse = account.UpdateUserBaseInfoResponse

	Account interface {
		Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
		Rebate(ctx context.Context, in *RebateRequest, opts ...grpc.CallOption) (*Response, error)
		// 获取Account信息(峰在用)
		GetAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error)
		GetAccountInfo(ctx context.Context, in *GetAccountInfoRequest, opts ...grpc.CallOption) (*GetAccountInfoResponse, error)
		// 检查有没有Account没有创建
		CheckAccount(ctx context.Context, in *CheckAccountRequest, opts ...grpc.CallOption) (*CheckAccountResponse, error)
		// 关注token
		AddTokenFollow(ctx context.Context, in *AddTokenFollowRequest, opts ...grpc.CallOption) (*AddTokenFollowResponse, error)
		// 取消关注token
		RemoveTokenFollow(ctx context.Context, in *AddTokenFollowRequest, opts ...grpc.CallOption) (*AddTokenFollowResponse, error)
		// 更新用户基础信息
		UpdateUserBaseInfo(ctx context.Context, in *UpdateUserBaseInfoRequest, opts ...grpc.CallOption) (*UpdateUserBaseInfoResponse, error)
		// 用户是否收藏代币
		IsTokenFollowed(ctx context.Context, in *IsTokenFollowedRequest, opts ...grpc.CallOption) (*IsTokenFollowedResponse, error)
		// 获取用户关注的代币
		GetFollowTokenList(ctx context.Context, in *GetFollowTokenListRequest, opts ...grpc.CallOption) (*GetFollowTokenListResponse, error)
	}

	defaultAccount struct {
		cli zrpc.Client
	}
)

func NewAccount(cli zrpc.Client) Account {
	return &defaultAccount{
		cli: cli,
	}
}

func (m *defaultAccount) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	client := account.NewAccountClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

func (m *defaultAccount) Rebate(ctx context.Context, in *RebateRequest, opts ...grpc.CallOption) (*Response, error) {
	client := account.NewAccountClient(m.cli.Conn())
	return client.Rebate(ctx, in, opts...)
}

// 获取Account信息(峰在用)
func (m *defaultAccount) GetAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error) {
	client := account.NewAccountClient(m.cli.Conn())
	return client.GetAccount(ctx, in, opts...)
}

func (m *defaultAccount) GetAccountInfo(ctx context.Context, in *GetAccountInfoRequest, opts ...grpc.CallOption) (*GetAccountInfoResponse, error) {
	client := account.NewAccountClient(m.cli.Conn())
	return client.GetAccountInfo(ctx, in, opts...)
}

// 检查有没有Account没有创建
func (m *defaultAccount) CheckAccount(ctx context.Context, in *CheckAccountRequest, opts ...grpc.CallOption) (*CheckAccountResponse, error) {
	client := account.NewAccountClient(m.cli.Conn())
	return client.CheckAccount(ctx, in, opts...)
}

// 关注token
func (m *defaultAccount) AddTokenFollow(ctx context.Context, in *AddTokenFollowRequest, opts ...grpc.CallOption) (*AddTokenFollowResponse, error) {
	client := account.NewAccountClient(m.cli.Conn())
	return client.AddTokenFollow(ctx, in, opts...)
}

// 取消关注token
func (m *defaultAccount) RemoveTokenFollow(ctx context.Context, in *AddTokenFollowRequest, opts ...grpc.CallOption) (*AddTokenFollowResponse, error) {
	client := account.NewAccountClient(m.cli.Conn())
	return client.RemoveTokenFollow(ctx, in, opts...)
}

// 更新用户基础信息
func (m *defaultAccount) UpdateUserBaseInfo(ctx context.Context, in *UpdateUserBaseInfoRequest, opts ...grpc.CallOption) (*UpdateUserBaseInfoResponse, error) {
	client := account.NewAccountClient(m.cli.Conn())
	return client.UpdateUserBaseInfo(ctx, in, opts...)
}

// 用户是否收藏代币
func (m *defaultAccount) IsTokenFollowed(ctx context.Context, in *IsTokenFollowedRequest, opts ...grpc.CallOption) (*IsTokenFollowedResponse, error) {
	client := account.NewAccountClient(m.cli.Conn())
	return client.IsTokenFollowed(ctx, in, opts...)
}

// 获取用户关注的代币
func (m *defaultAccount) GetFollowTokenList(ctx context.Context, in *GetFollowTokenListRequest, opts ...grpc.CallOption) (*GetFollowTokenListResponse, error) {
	client := account.NewAccountClient(m.cli.Conn())
	return client.GetFollowTokenList(ctx, in, opts...)
}
