// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userTokenFollowFieldNames          = builder.RawFieldNames(&UserTokenFollow{}, true)
	userTokenFollowRows                = strings.Join(userTokenFollowFieldNames, ",")
	userTokenFollowRowsExpectAutoSet   = strings.Join(stringx.Remove(userTokenFollowFieldNames), ",")
	userTokenFollowRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(userTokenFollowFieldNames, "id"))

	cachePublicUserTokenFollowIdPrefix      = "cache:public:userTokenFollow:id:"
	cachePublicUserTokenFollowAddressPrefix = "cache:public:userTokenFollow:address:"
)

type (
	userTokenFollowModel interface {
		Insert(ctx context.Context, data *UserTokenFollow) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserTokenFollow, error)
		FindOneByAddress(ctx context.Context, address string) (*UserTokenFollow, error)
		FindOneByAddressAndTokenAddress(ctx context.Context, address string, tokenAddress string) (*UserTokenFollow, error)
		Update(ctx context.Context, data *UserTokenFollow) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserTokenFollowModel struct {
		sqlc.CachedConn
		table string
	}

	UserTokenFollow struct {
		Address      string         `db:"address"`
		Chain        sql.NullString `db:"chain"`
		TokenAddress sql.NullString `db:"token_address"`
		Status       sql.NullString `db:"status"`
		FollowedAt   sql.NullTime   `db:"followed_at"`
		UnfollowedAt sql.NullTime   `db:"unfollowed_at"`
		CreatedAt    sql.NullTime   `db:"created_at"`
		UpdatedAt    sql.NullTime   `db:"updated_at"`
		Id           int64          `db:"id"`
	}
)

func (m *defaultUserTokenFollowModel) QueryCtx(ctx context.Context, query string, address string, status string) (any, any) {
	panic("unimplemented")
}

func newUserTokenFollowModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserTokenFollowModel {
	return &defaultUserTokenFollowModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."user_token_follow"`,
	}
}

func (m *defaultUserTokenFollowModel) withSession(session sqlx.Session) *defaultUserTokenFollowModel {
	return &defaultUserTokenFollowModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      `"public"."user_token_follow"`,
	}
}

func (m *defaultUserTokenFollowModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	publicUserTokenFollowAddressKey := fmt.Sprintf("%s%v", cachePublicUserTokenFollowAddressPrefix, data.Address)
	publicUserTokenFollowIdKey := fmt.Sprintf("%s%v", cachePublicUserTokenFollowIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicUserTokenFollowAddressKey, publicUserTokenFollowIdKey)
	return err
}

func (m *defaultUserTokenFollowModel) FindOne(ctx context.Context, id int64) (*UserTokenFollow, error) {
	publicUserTokenFollowIdKey := fmt.Sprintf("%s%v", cachePublicUserTokenFollowIdPrefix, id)
	var resp UserTokenFollow
	err := m.QueryRowCtx(ctx, &resp, publicUserTokenFollowIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", userTokenFollowRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// FindOneByAddressAndTokenAddress
func (m *defaultUserTokenFollowModel) FindOneByAddressAndTokenAddress(ctx context.Context, address string, tokenAddress string) (*UserTokenFollow, error) {
	publicUserTokenFollowAddressKey := fmt.Sprintf("%s%v", cachePublicUserTokenFollowAddressPrefix, address)
	var resp UserTokenFollow
	err := m.QueryRowCtx(ctx, &resp, publicUserTokenFollowAddressKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where address = $1 and token_address = $2 limit 1", userTokenFollowRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, address, tokenAddress)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserTokenFollowModel) FindOneByAddress(ctx context.Context, address string) (*UserTokenFollow, error) {
	publicUserTokenFollowAddressKey := fmt.Sprintf("%s%v", cachePublicUserTokenFollowAddressPrefix, address)
	var resp UserTokenFollow
	err := m.QueryRowIndexCtx(ctx, &resp, publicUserTokenFollowAddressKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where address = $1 limit 1", userTokenFollowRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, address); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserTokenFollowModel) Insert(ctx context.Context, data *UserTokenFollow) (sql.Result, error) {
	publicUserTokenFollowAddressKey := fmt.Sprintf("%s%v", cachePublicUserTokenFollowAddressPrefix, data.Address)
	publicUserTokenFollowIdKey := fmt.Sprintf("%s%v", cachePublicUserTokenFollowIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9)", m.table, userTokenFollowRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Address, data.Chain, data.TokenAddress, data.Status, data.FollowedAt, data.UnfollowedAt, data.CreatedAt, data.UpdatedAt, data.Id)
	}, publicUserTokenFollowAddressKey, publicUserTokenFollowIdKey)
	return ret, err
}

func (m *defaultUserTokenFollowModel) Update(ctx context.Context, newData *UserTokenFollow) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	publicUserTokenFollowAddressKey := fmt.Sprintf("%s%v", cachePublicUserTokenFollowAddressPrefix, data.Address)
	publicUserTokenFollowIdKey := fmt.Sprintf("%s%v", cachePublicUserTokenFollowIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, userTokenFollowRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Id, newData.Address, newData.Chain, newData.TokenAddress, newData.Status, newData.FollowedAt, newData.UnfollowedAt, newData.CreatedAt, newData.UpdatedAt)
	}, publicUserTokenFollowAddressKey, publicUserTokenFollowIdKey)
	return err
}

func (m *defaultUserTokenFollowModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicUserTokenFollowIdPrefix, primary)
}

func (m *defaultUserTokenFollowModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", userTokenFollowRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserTokenFollowModel) tableName() string {
	return m.table
}
