// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	accountFieldNames          = builder.RawFieldNames(&Account{}, true)
	accountRows                = strings.Join(accountFieldNames, ",")
	accountRowsExpectAutoSet   = strings.Join(stringx.Remove(accountFieldNames, "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	accountRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(accountFieldNames, "address", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))

	cachePublicAccountAddressPrefix = "cache:public:account:address:"
)

type (
	accountModel interface {
		Insert(ctx context.Context, data *Account) (sql.Result, error)
		FindOne(ctx context.Context, address string) (*Account, error)
		Update(ctx context.Context, data *Account) error
		Delete(ctx context.Context, address string) error
	}

	defaultAccountModel struct {
		sqlc.CachedConn
		table string
	}

	Account struct {
		Address        string          `db:"address"`    // 用户地址
		Chain          sql.NullString  `db:"chain"`      // 链
		Username       sql.NullString  `db:"username"`   // 用户名
		CreatedAt      sql.NullTime    `db:"created_at"` // 创建时间
		UpdatedAt      sql.NullTime    `db:"updated_at"`
		InitialFunding sql.NullFloat64 `db:"initial_funding"` // 初始资金
		Bakance        sql.NullFloat64 `db:"bakance"`         // 用户余额
		InvitedAddress sql.NullString  `db:"invited_address"` // 邀请人用户地址
		Source         sql.NullString  `db:"source"`          // 来源
		SourceId       sql.NullString  `db:"source_id"`        // 来源id
		RoleId         sql.NullInt64   `db:"role_id"`         // 角色id
		InvitedCode    string          `db:"invited_code"`    // 邀请码
	}
)

func newAccountModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAccountModel {
	return &defaultAccountModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."account"`,
	}
}

func (m *defaultAccountModel) Delete(ctx context.Context, address string) error {
	publicAccountAddressKey := fmt.Sprintf("%s%v", cachePublicAccountAddressPrefix, address)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where address = $1", m.table)
		return conn.ExecCtx(ctx, query, address)
	}, publicAccountAddressKey)
	return err
}

func (m *defaultAccountModel) FindOne(ctx context.Context, address string) (*Account, error) {
	publicAccountAddressKey := fmt.Sprintf("%s%v", cachePublicAccountAddressPrefix, address)
	var resp Account
	err := m.QueryRowCtx(ctx, &resp, publicAccountAddressKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where address = $1 limit 1", accountRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, address)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountModel) Insert(ctx context.Context, data *Account) (sql.Result, error) {
	publicAccountAddressKey := fmt.Sprintf("%s%v", cachePublicAccountAddressPrefix, data.Address)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)", m.table, accountRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Address, data.Chain, data.Username, data.InitialFunding, data.Bakance, data.InvitedAddress, data.Source, data.SourceId, data.RoleId, data.InvitedCode)
	}, publicAccountAddressKey)
	return ret, err
}

func (m *defaultAccountModel) Update(ctx context.Context, data *Account) error {
	publicAccountAddressKey := fmt.Sprintf("%s%v", cachePublicAccountAddressPrefix, data.Address)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where address = $1", m.table, accountRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Address, data.Chain, data.Username, data.InitialFunding, data.Bakance, data.InvitedAddress, data.Source, data.SourceId, data.RoleId, data.InvitedCode)
	}, publicAccountAddressKey)
	return err
}

func (m *defaultAccountModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicAccountAddressPrefix, primary)
}

func (m *defaultAccountModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where address = $1 limit 1", accountRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAccountModel) tableName() string {
	return m.table
}
