// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.11
// source: account.proto

package account

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Account_Ping_FullMethodName               = "/account.Account/Ping"
	Account_Rebate_FullMethodName             = "/account.Account/Rebate"
	Account_GetAccount_FullMethodName         = "/account.Account/GetAccount"
	Account_GetAccountInfo_FullMethodName     = "/account.Account/GetAccountInfo"
	Account_CheckAccount_FullMethodName       = "/account.Account/CheckAccount"
	Account_AddTokenFollow_FullMethodName     = "/account.Account/AddTokenFollow"
	Account_RemoveTokenFollow_FullMethodName  = "/account.Account/RemoveTokenFollow"
	Account_UpdateUserBaseInfo_FullMethodName = "/account.Account/UpdateUserBaseInfo"
	Account_IsTokenFollowed_FullMethodName    = "/account.Account/IsTokenFollowed"
	Account_GetFollowTokenList_FullMethodName = "/account.Account/GetFollowTokenList"
)

// AccountClient is the client API for Account service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Rebate(ctx context.Context, in *RebateRequest, opts ...grpc.CallOption) (*Response, error)
	// 获取Account信息(峰在用)
	GetAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error)
	GetAccountInfo(ctx context.Context, in *GetAccountInfoRequest, opts ...grpc.CallOption) (*GetAccountInfoResponse, error)
	// 检查有没有Account没有创建
	CheckAccount(ctx context.Context, in *CheckAccountRequest, opts ...grpc.CallOption) (*CheckAccountResponse, error)
	// 关注token
	AddTokenFollow(ctx context.Context, in *AddTokenFollowRequest, opts ...grpc.CallOption) (*AddTokenFollowResponse, error)
	// 取消关注token
	RemoveTokenFollow(ctx context.Context, in *AddTokenFollowRequest, opts ...grpc.CallOption) (*AddTokenFollowResponse, error)
	// 更新用户基础信息
	UpdateUserBaseInfo(ctx context.Context, in *UpdateUserBaseInfoRequest, opts ...grpc.CallOption) (*UpdateUserBaseInfoResponse, error)
	// 用户是否收藏代币
	IsTokenFollowed(ctx context.Context, in *IsTokenFollowedRequest, opts ...grpc.CallOption) (*IsTokenFollowedResponse, error)
	// 获取用户关注的代币
	GetFollowTokenList(ctx context.Context, in *GetFollowTokenListRequest, opts ...grpc.CallOption) (*GetFollowTokenListResponse, error)
}

type accountClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountClient(cc grpc.ClientConnInterface) AccountClient {
	return &accountClient{cc}
}

func (c *accountClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Account_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) Rebate(ctx context.Context, in *RebateRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Account_Rebate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountResponse)
	err := c.cc.Invoke(ctx, Account_GetAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetAccountInfo(ctx context.Context, in *GetAccountInfoRequest, opts ...grpc.CallOption) (*GetAccountInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountInfoResponse)
	err := c.cc.Invoke(ctx, Account_GetAccountInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) CheckAccount(ctx context.Context, in *CheckAccountRequest, opts ...grpc.CallOption) (*CheckAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckAccountResponse)
	err := c.cc.Invoke(ctx, Account_CheckAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) AddTokenFollow(ctx context.Context, in *AddTokenFollowRequest, opts ...grpc.CallOption) (*AddTokenFollowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTokenFollowResponse)
	err := c.cc.Invoke(ctx, Account_AddTokenFollow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) RemoveTokenFollow(ctx context.Context, in *AddTokenFollowRequest, opts ...grpc.CallOption) (*AddTokenFollowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTokenFollowResponse)
	err := c.cc.Invoke(ctx, Account_RemoveTokenFollow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) UpdateUserBaseInfo(ctx context.Context, in *UpdateUserBaseInfoRequest, opts ...grpc.CallOption) (*UpdateUserBaseInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserBaseInfoResponse)
	err := c.cc.Invoke(ctx, Account_UpdateUserBaseInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) IsTokenFollowed(ctx context.Context, in *IsTokenFollowedRequest, opts ...grpc.CallOption) (*IsTokenFollowedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsTokenFollowedResponse)
	err := c.cc.Invoke(ctx, Account_IsTokenFollowed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetFollowTokenList(ctx context.Context, in *GetFollowTokenListRequest, opts ...grpc.CallOption) (*GetFollowTokenListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFollowTokenListResponse)
	err := c.cc.Invoke(ctx, Account_GetFollowTokenList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServer is the server API for Account service.
// All implementations must embed UnimplementedAccountServer
// for forward compatibility.
type AccountServer interface {
	Ping(context.Context, *Request) (*Response, error)
	Rebate(context.Context, *RebateRequest) (*Response, error)
	// 获取Account信息(峰在用)
	GetAccount(context.Context, *AccountRequest) (*AccountResponse, error)
	GetAccountInfo(context.Context, *GetAccountInfoRequest) (*GetAccountInfoResponse, error)
	// 检查有没有Account没有创建
	CheckAccount(context.Context, *CheckAccountRequest) (*CheckAccountResponse, error)
	// 关注token
	AddTokenFollow(context.Context, *AddTokenFollowRequest) (*AddTokenFollowResponse, error)
	// 取消关注token
	RemoveTokenFollow(context.Context, *AddTokenFollowRequest) (*AddTokenFollowResponse, error)
	// 更新用户基础信息
	UpdateUserBaseInfo(context.Context, *UpdateUserBaseInfoRequest) (*UpdateUserBaseInfoResponse, error)
	// 用户是否收藏代币
	IsTokenFollowed(context.Context, *IsTokenFollowedRequest) (*IsTokenFollowedResponse, error)
	// 获取用户关注的代币
	GetFollowTokenList(context.Context, *GetFollowTokenListRequest) (*GetFollowTokenListResponse, error)
	mustEmbedUnimplementedAccountServer()
}

// UnimplementedAccountServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccountServer struct{}

func (UnimplementedAccountServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAccountServer) Rebate(context.Context, *RebateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rebate not implemented")
}
func (UnimplementedAccountServer) GetAccount(context.Context, *AccountRequest) (*AccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedAccountServer) GetAccountInfo(context.Context, *GetAccountInfoRequest) (*GetAccountInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountInfo not implemented")
}
func (UnimplementedAccountServer) CheckAccount(context.Context, *CheckAccountRequest) (*CheckAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAccount not implemented")
}
func (UnimplementedAccountServer) AddTokenFollow(context.Context, *AddTokenFollowRequest) (*AddTokenFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTokenFollow not implemented")
}
func (UnimplementedAccountServer) RemoveTokenFollow(context.Context, *AddTokenFollowRequest) (*AddTokenFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTokenFollow not implemented")
}
func (UnimplementedAccountServer) UpdateUserBaseInfo(context.Context, *UpdateUserBaseInfoRequest) (*UpdateUserBaseInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserBaseInfo not implemented")
}
func (UnimplementedAccountServer) IsTokenFollowed(context.Context, *IsTokenFollowedRequest) (*IsTokenFollowedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsTokenFollowed not implemented")
}
func (UnimplementedAccountServer) GetFollowTokenList(context.Context, *GetFollowTokenListRequest) (*GetFollowTokenListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowTokenList not implemented")
}
func (UnimplementedAccountServer) mustEmbedUnimplementedAccountServer() {}
func (UnimplementedAccountServer) testEmbeddedByValue()                 {}

// UnsafeAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServer will
// result in compilation errors.
type UnsafeAccountServer interface {
	mustEmbedUnimplementedAccountServer()
}

func RegisterAccountServer(s grpc.ServiceRegistrar, srv AccountServer) {
	// If the following call pancis, it indicates UnimplementedAccountServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Account_ServiceDesc, srv)
}

func _Account_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_Rebate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).Rebate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_Rebate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).Rebate(ctx, req.(*RebateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetAccount(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_GetAccountInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetAccountInfo(ctx, req.(*GetAccountInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_CheckAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).CheckAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_CheckAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).CheckAccount(ctx, req.(*CheckAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_AddTokenFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTokenFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).AddTokenFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_AddTokenFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).AddTokenFollow(ctx, req.(*AddTokenFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_RemoveTokenFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTokenFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).RemoveTokenFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_RemoveTokenFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).RemoveTokenFollow(ctx, req.(*AddTokenFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_UpdateUserBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserBaseInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).UpdateUserBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_UpdateUserBaseInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).UpdateUserBaseInfo(ctx, req.(*UpdateUserBaseInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_IsTokenFollowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsTokenFollowedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).IsTokenFollowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_IsTokenFollowed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).IsTokenFollowed(ctx, req.(*IsTokenFollowedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetFollowTokenList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowTokenListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetFollowTokenList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Account_GetFollowTokenList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetFollowTokenList(ctx, req.(*GetFollowTokenListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Account_ServiceDesc is the grpc.ServiceDesc for Account service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Account_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.Account",
	HandlerType: (*AccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Account_Ping_Handler,
		},
		{
			MethodName: "Rebate",
			Handler:    _Account_Rebate_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _Account_GetAccount_Handler,
		},
		{
			MethodName: "GetAccountInfo",
			Handler:    _Account_GetAccountInfo_Handler,
		},
		{
			MethodName: "CheckAccount",
			Handler:    _Account_CheckAccount_Handler,
		},
		{
			MethodName: "AddTokenFollow",
			Handler:    _Account_AddTokenFollow_Handler,
		},
		{
			MethodName: "RemoveTokenFollow",
			Handler:    _Account_RemoveTokenFollow_Handler,
		},
		{
			MethodName: "UpdateUserBaseInfo",
			Handler:    _Account_UpdateUserBaseInfo_Handler,
		},
		{
			MethodName: "IsTokenFollowed",
			Handler:    _Account_IsTokenFollowed_Handler,
		},
		{
			MethodName: "GetFollowTokenList",
			Handler:    _Account_GetFollowTokenList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}
