// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.5
// Source: ws.proto

package wsclient

import (
	"context"

	"github.com/simance-ai/smdx/rpcx/ws/ws"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	FireMarketKlineRequest       = ws.FireMarketKlineRequest
	FireMarketKlineResponse      = ws.FireMarketKlineResponse
	FireMarketTxActivityRequest  = ws.FireMarketTxActivityRequest
	FireMarketTxActivityResponse = ws.FireMarketTxActivityResponse
	Request                      = ws.Request
	Response                     = ws.Response

	Ws interface {
		// FireMarketKline
		FireMarketKline(ctx context.Context, in *FireMarketKlineRequest, opts ...grpc.CallOption) (*FireMarketKlineResponse, error)
		FireMarketTxActivity(ctx context.Context, in *FireMarketTxActivityRequest, opts ...grpc.CallOption) (*FireMarketTxActivityResponse, error)
	}

	defaultWs struct {
		cli zrpc.Client
	}
)

func NewWs(cli zrpc.Client) Ws {
	return &defaultWs{
		cli: cli,
	}
}

// FireMarketKline
func (m *defaultWs) FireMarketKline(ctx context.Context, in *FireMarketKlineRequest, opts ...grpc.CallOption) (*FireMarketKlineResponse, error) {
	client := ws.NewWsClient(m.cli.Conn())
	return client.FireMarketKline(ctx, in, opts...)
}

func (m *defaultWs) FireMarketTxActivity(ctx context.Context, in *FireMarketTxActivityRequest, opts ...grpc.CallOption) (*FireMarketTxActivityResponse, error) {
	client := ws.NewWsClient(m.cli.Conn())
	return client.FireMarketTxActivity(ctx, in, opts...)
}
