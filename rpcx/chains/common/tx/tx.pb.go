// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v3.20.3
// source: common/tx.proto

package tx

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MarketKline struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chain         string                 `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	MarketAddress string                 `protobuf:"bytes,2,opt,name=market_address,json=marketAddress,proto3" json:"market_address,omitempty"`
	O             float64                `protobuf:"fixed64,3,opt,name=o,proto3" json:"o,omitempty"`
	H             float64                `protobuf:"fixed64,4,opt,name=h,proto3" json:"h,omitempty"`
	L             float64                `protobuf:"fixed64,5,opt,name=l,proto3" json:"l,omitempty"`
	C             float64                `protobuf:"fixed64,6,opt,name=c,proto3" json:"c,omitempty"`
	V             float64                `protobuf:"fixed64,7,opt,name=v,proto3" json:"v,omitempty"`
	Timestamp     int64                  `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarketKline) Reset() {
	*x = MarketKline{}
	mi := &file_common_tx_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketKline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketKline) ProtoMessage() {}

func (x *MarketKline) ProtoReflect() protoreflect.Message {
	mi := &file_common_tx_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketKline.ProtoReflect.Descriptor instead.
func (*MarketKline) Descriptor() ([]byte, []int) {
	return file_common_tx_proto_rawDescGZIP(), []int{0}
}

func (x *MarketKline) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *MarketKline) GetMarketAddress() string {
	if x != nil {
		return x.MarketAddress
	}
	return ""
}

func (x *MarketKline) GetO() float64 {
	if x != nil {
		return x.O
	}
	return 0
}

func (x *MarketKline) GetH() float64 {
	if x != nil {
		return x.H
	}
	return 0
}

func (x *MarketKline) GetL() float64 {
	if x != nil {
		return x.L
	}
	return 0
}

func (x *MarketKline) GetC() float64 {
	if x != nil {
		return x.C
	}
	return 0
}

func (x *MarketKline) GetV() float64 {
	if x != nil {
		return x.V
	}
	return 0
}

func (x *MarketKline) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Market struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Id                    int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address               string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`                                                               //市场地址
	BaseTokenAddress      string                 `protobuf:"bytes,3,opt,name=base_token_address,json=baseTokenAddress,proto3" json:"base_token_address,omitempty"`                   //基础token地址
	QuoteTokenAddress     string                 `protobuf:"bytes,4,opt,name=quote_token_address,json=quoteTokenAddress,proto3" json:"quote_token_address,omitempty"`                //引用token地址
	BaseSymbol            string                 `protobuf:"bytes,5,opt,name=base_symbol,json=baseSymbol,proto3" json:"base_symbol,omitempty"`                                       //基础代币符号
	QuoteSymbol           string                 `protobuf:"bytes,6,opt,name=quote_symbol,json=quoteSymbol,proto3" json:"quote_symbol,omitempty"`                                    //引用代币符号
	BasePrice             float64                `protobuf:"fixed64,7,opt,name=base_price,json=basePrice,proto3" json:"base_price,omitempty"`                                        // 基础代币价格
	QuotePrice            float64                `protobuf:"fixed64,8,opt,name=quote_price,json=quotePrice,proto3" json:"quote_price,omitempty"`                                     //引用代币价格
	MarketType            string                 `protobuf:"bytes,9,opt,name=market_type,json=marketType,proto3" json:"market_type,omitempty"`                                       //市场类型: raydium, pump
	CreatedTimestamp      int64                  `protobuf:"varint,10,opt,name=created_timestamp,json=createdTimestamp,proto3" json:"created_timestamp,omitempty"`                   //创建时间戳
	BaseVault             float64                `protobuf:"fixed64,11,opt,name=base_vault,json=baseVault,proto3" json:"base_vault,omitempty"`                                       //基础代币池中数量
	QuoteVault            float64                `protobuf:"fixed64,12,opt,name=quote_vault,json=quoteVault,proto3" json:"quote_vault,omitempty"`                                    //引用代币池中数量
	HolderCount           int64                  `protobuf:"varint,13,opt,name=holder_count,json=holderCount,proto3" json:"holder_count,omitempty"`                                  //持有者数量
	Sells_24H             int64                  `protobuf:"varint,14,opt,name=sells_24h,json=sells24h,proto3" json:"sells_24h,omitempty"`                                           //24小时卖出数量
	Buys_24H              int64                  `protobuf:"varint,15,opt,name=buys_24h,json=buys24h,proto3" json:"buys_24h,omitempty"`                                              //24小时买入数量
	Volume_24H            float64                `protobuf:"fixed64,16,opt,name=volume_24h,json=volume24h,proto3" json:"volume_24h,omitempty"`                                       //24小时成交额
	PriceChangePercent1M  float64                `protobuf:"fixed64,17,opt,name=price_change_percent1m,json=priceChangePercent1m,proto3" json:"price_change_percent1m,omitempty"`    //1分钟涨跌幅
	PriceChangePercent5M  float64                `protobuf:"fixed64,18,opt,name=price_change_percent5m,json=priceChangePercent5m,proto3" json:"price_change_percent5m,omitempty"`    //5分钟涨跌幅
	PriceChangePercent1H  float64                `protobuf:"fixed64,19,opt,name=price_change_percent1h,json=priceChangePercent1h,proto3" json:"price_change_percent1h,omitempty"`    //1小时涨跌幅
	PriceChangePercent6H  float64                `protobuf:"fixed64,20,opt,name=price_change_percent6h,json=priceChangePercent6h,proto3" json:"price_change_percent6h,omitempty"`    //6小时涨跌幅
	PriceChangePercent24H float64                `protobuf:"fixed64,21,opt,name=price_change_percent24h,json=priceChangePercent24h,proto3" json:"price_change_percent24h,omitempty"` //24小时涨跌幅
	Liquidity             float64                `protobuf:"fixed64,22,opt,name=liquidity,proto3" json:"liquidity,omitempty"`                                                        //池子usd大小
	MarketCap             float64                `protobuf:"fixed64,23,opt,name=market_cap,json=marketCap,proto3" json:"market_cap,omitempty"`                                       //市值usd大小
	OpenTimestamp         int64                  `protobuf:"varint,24,opt,name=open_timestamp,json=openTimestamp,proto3" json:"open_timestamp,omitempty"`                            //开始时间
	BaseIcon              string                 `protobuf:"bytes,25,opt,name=base_icon,json=baseIcon,proto3" json:"base_icon,omitempty"`                                            //基础币ICON
	QuoteIcon             string                 `protobuf:"bytes,26,opt,name=quote_icon,json=quoteIcon,proto3" json:"quote_icon,omitempty"`                                         //应用币ICON
	InitBaseVault         float64                `protobuf:"fixed64,27,opt,name=init_base_vault,json=initBaseVault,proto3" json:"init_base_vault,omitempty"`                         //初始化基础币数量
	InitQuoteVault        float64                `protobuf:"fixed64,28,opt,name=init_quote_vault,json=initQuoteVault,proto3" json:"init_quote_vault,omitempty"`                      //初始化引用币数量
	BaseMintAddress       string                 `protobuf:"bytes,29,opt,name=base_mint_address,json=baseMintAddress,proto3" json:"base_mint_address,omitempty"`                     //基础币地址
	QuoteMintAddress      string                 `protobuf:"bytes,30,opt,name=quote_mint_address,json=quoteMintAddress,proto3" json:"quote_mint_address,omitempty"`                  //引用币地址
	Logo                  string                 `protobuf:"bytes,31,opt,name=logo,proto3" json:"logo,omitempty"`                                                                    // 代币 logo 链接
	PriceChangePercent30M float64                `protobuf:"fixed64,32,opt,name=price_change_percent30m,json=priceChangePercent30m,proto3" json:"price_change_percent30m,omitempty"` //30分钟涨跌幅
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Market) Reset() {
	*x = Market{}
	mi := &file_common_tx_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Market) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Market) ProtoMessage() {}

func (x *Market) ProtoReflect() protoreflect.Message {
	mi := &file_common_tx_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Market.ProtoReflect.Descriptor instead.
func (*Market) Descriptor() ([]byte, []int) {
	return file_common_tx_proto_rawDescGZIP(), []int{1}
}

func (x *Market) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Market) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Market) GetBaseTokenAddress() string {
	if x != nil {
		return x.BaseTokenAddress
	}
	return ""
}

func (x *Market) GetQuoteTokenAddress() string {
	if x != nil {
		return x.QuoteTokenAddress
	}
	return ""
}

func (x *Market) GetBaseSymbol() string {
	if x != nil {
		return x.BaseSymbol
	}
	return ""
}

func (x *Market) GetQuoteSymbol() string {
	if x != nil {
		return x.QuoteSymbol
	}
	return ""
}

func (x *Market) GetBasePrice() float64 {
	if x != nil {
		return x.BasePrice
	}
	return 0
}

func (x *Market) GetQuotePrice() float64 {
	if x != nil {
		return x.QuotePrice
	}
	return 0
}

func (x *Market) GetMarketType() string {
	if x != nil {
		return x.MarketType
	}
	return ""
}

func (x *Market) GetCreatedTimestamp() int64 {
	if x != nil {
		return x.CreatedTimestamp
	}
	return 0
}

func (x *Market) GetBaseVault() float64 {
	if x != nil {
		return x.BaseVault
	}
	return 0
}

func (x *Market) GetQuoteVault() float64 {
	if x != nil {
		return x.QuoteVault
	}
	return 0
}

func (x *Market) GetHolderCount() int64 {
	if x != nil {
		return x.HolderCount
	}
	return 0
}

func (x *Market) GetSells_24H() int64 {
	if x != nil {
		return x.Sells_24H
	}
	return 0
}

func (x *Market) GetBuys_24H() int64 {
	if x != nil {
		return x.Buys_24H
	}
	return 0
}

func (x *Market) GetVolume_24H() float64 {
	if x != nil {
		return x.Volume_24H
	}
	return 0
}

func (x *Market) GetPriceChangePercent1M() float64 {
	if x != nil {
		return x.PriceChangePercent1M
	}
	return 0
}

func (x *Market) GetPriceChangePercent5M() float64 {
	if x != nil {
		return x.PriceChangePercent5M
	}
	return 0
}

func (x *Market) GetPriceChangePercent1H() float64 {
	if x != nil {
		return x.PriceChangePercent1H
	}
	return 0
}

func (x *Market) GetPriceChangePercent6H() float64 {
	if x != nil {
		return x.PriceChangePercent6H
	}
	return 0
}

func (x *Market) GetPriceChangePercent24H() float64 {
	if x != nil {
		return x.PriceChangePercent24H
	}
	return 0
}

func (x *Market) GetLiquidity() float64 {
	if x != nil {
		return x.Liquidity
	}
	return 0
}

func (x *Market) GetMarketCap() float64 {
	if x != nil {
		return x.MarketCap
	}
	return 0
}

func (x *Market) GetOpenTimestamp() int64 {
	if x != nil {
		return x.OpenTimestamp
	}
	return 0
}

func (x *Market) GetBaseIcon() string {
	if x != nil {
		return x.BaseIcon
	}
	return ""
}

func (x *Market) GetQuoteIcon() string {
	if x != nil {
		return x.QuoteIcon
	}
	return ""
}

func (x *Market) GetInitBaseVault() float64 {
	if x != nil {
		return x.InitBaseVault
	}
	return 0
}

func (x *Market) GetInitQuoteVault() float64 {
	if x != nil {
		return x.InitQuoteVault
	}
	return 0
}

func (x *Market) GetBaseMintAddress() string {
	if x != nil {
		return x.BaseMintAddress
	}
	return ""
}

func (x *Market) GetQuoteMintAddress() string {
	if x != nil {
		return x.QuoteMintAddress
	}
	return ""
}

func (x *Market) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *Market) GetPriceChangePercent30M() float64 {
	if x != nil {
		return x.PriceChangePercent30M
	}
	return 0
}

type RealTimeMarket struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Address                string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`                                                                 // 代币地址
	PoolAddress            string                 `protobuf:"bytes,2,opt,name=pool_address,json=poolAddress,proto3" json:"pool_address,omitempty"`                                      // 池地址
	Buys                   int64                  `protobuf:"varint,3,opt,name=buys,proto3" json:"buys,omitempty"`                                                                      // 买入数量
	Chain                  string                 `protobuf:"bytes,4,opt,name=chain,proto3" json:"chain,omitempty"`                                                                     // 所属链
	CreatorClose           bool                   `protobuf:"varint,5,opt,name=creator_close,json=creatorClose,proto3" json:"creator_close,omitempty"`                                  // 是否关闭创建者权限
	CreatorTokenStatus     string                 `protobuf:"bytes,6,opt,name=creator_token_status,json=creatorTokenStatus,proto3" json:"creator_token_status,omitempty"`               // 创建者代币状态
	HolderCount            int64                  `protobuf:"varint,7,opt,name=holder_count,json=holderCount,proto3" json:"holder_count,omitempty"`                                     // 持有人数量
	HotLevel               int32                  `protobuf:"varint,8,opt,name=hot_level,json=hotLevel,proto3" json:"hot_level,omitempty"`                                              // 热度等级
	Id                     int64                  `protobuf:"varint,9,opt,name=id,proto3" json:"id,omitempty"`                                                                          // 唯一标识符
	InitialLiquidity       float64                `protobuf:"fixed64,10,opt,name=initial_liquidity,json=initialLiquidity,proto3" json:"initial_liquidity,omitempty"`                    // 初始流动性
	IsShowAlert            bool                   `protobuf:"varint,11,opt,name=is_show_alert,json=isShowAlert,proto3" json:"is_show_alert,omitempty"`                                  // 是否显示警告
	Launchpad              string                 `protobuf:"bytes,12,opt,name=launchpad,proto3" json:"launchpad,omitempty"`                                                            // 启动平台
	Liquidity              float64                `protobuf:"fixed64,13,opt,name=liquidity,proto3" json:"liquidity,omitempty"`                                                          // 流动性
	Logo                   string                 `protobuf:"bytes,14,opt,name=logo,proto3" json:"logo,omitempty"`                                                                      // 代币 logo 链接
	MarketCap              float64                `protobuf:"fixed64,15,opt,name=market_cap,json=marketCap,proto3" json:"market_cap,omitempty"`                                         // 市值
	OpenTimestamp          int64                  `protobuf:"varint,16,opt,name=open_timestamp,json=openTimestamp,proto3" json:"open_timestamp,omitempty"`                              // 开放时间戳
	PoolCreationTimestamp  int64                  `protobuf:"varint,17,opt,name=pool_creation_timestamp,json=poolCreationTimestamp,proto3" json:"pool_creation_timestamp,omitempty"`    // 池子创建时间戳
	BasePrice              float64                `protobuf:"fixed64,18,opt,name=base_price,json=basePrice,proto3" json:"base_price,omitempty"`                                         // 主网币价格
	Price                  float64                `protobuf:"fixed64,19,opt,name=price,proto3" json:"price,omitempty"`                                                                  // 价格
	PriceChangePercent1H   float64                `protobuf:"fixed64,20,opt,name=price_change_percent1h,json=priceChangePercent1h,proto3" json:"price_change_percent1h,omitempty"`      // 1 小时价格变动百分比
	PriceChangePercent1M   float64                `protobuf:"fixed64,21,opt,name=price_change_percent1m,json=priceChangePercent1m,proto3" json:"price_change_percent1m,omitempty"`      // 1 分钟价格变动百分比
	PriceChangePercent5M   float64                `protobuf:"fixed64,22,opt,name=price_change_percent5m,json=priceChangePercent5m,proto3" json:"price_change_percent5m,omitempty"`      // 5 分钟价格变动百分比
	PriceChangePercent6H   float64                `protobuf:"fixed64,23,opt,name=price_change_percent6h,json=priceChangePercent6h,proto3" json:"price_change_percent6h,omitempty"`      // 6 小时价格变动百分比
	PriceChangePercent24H  float64                `protobuf:"fixed64,24,opt,name=price_change_percent24h,json=priceChangePercent24h,proto3" json:"price_change_percent24h,omitempty"`   // 24 小时价格变动百分比
	RenouncedFreezeAccount int64                  `protobuf:"varint,25,opt,name=renounced_freeze_account,json=renouncedFreezeAccount,proto3" json:"renounced_freeze_account,omitempty"` // 放弃冻结账户权限
	RenouncedMint          int64                  `protobuf:"varint,26,opt,name=renounced_mint,json=renouncedMint,proto3" json:"renounced_mint,omitempty"`                              // 放弃铸造权限
	Sells                  int64                  `protobuf:"varint,27,opt,name=sells,proto3" json:"sells,omitempty"`                                                                   // 卖出数量
	Swaps                  int64                  `protobuf:"varint,28,opt,name=swaps,proto3" json:"swaps,omitempty"`                                                                   // 交换数量
	Symbol                 string                 `protobuf:"bytes,29,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                                  // 代币符号
	Telegram               string                 `protobuf:"bytes,30,opt,name=telegram,proto3" json:"telegram,omitempty"`                                                              // Telegram 链接
	Top_10HolderRate       float64                `protobuf:"fixed64,31,opt,name=top_10_holder_rate,json=top10HolderRate,proto3" json:"top_10_holder_rate,omitempty"`                   // 前 10 持有人占比
	TwitterUsername        string                 `protobuf:"bytes,32,opt,name=twitter_username,json=twitterUsername,proto3" json:"twitter_username,omitempty"`                         // Twitter 用户名
	Volume                 float64                `protobuf:"fixed64,33,opt,name=volume,proto3" json:"volume,omitempty"`                                                                // 交易量
	Website                string                 `protobuf:"bytes,34,opt,name=website,proto3" json:"website,omitempty"`                                                                // 官网链接
	BaseMintAddress        string                 `protobuf:"bytes,35,opt,name=base_mint_address,json=baseMintAddress,proto3" json:"base_mint_address,omitempty"`
	QuoteMintAddress       string                 `protobuf:"bytes,36,opt,name=quote_mint_address,json=quoteMintAddress,proto3" json:"quote_mint_address,omitempty"`
	PriceChangePercent30M  float64                `protobuf:"fixed64,37,opt,name=price_change_percent30m,json=priceChangePercent30m,proto3" json:"price_change_percent30m,omitempty"`
	BaseTokenAddress       string                 `protobuf:"bytes,38,opt,name=base_token_address,json=baseTokenAddress,proto3" json:"base_token_address,omitempty"`
	QuoteTokenAddress      string                 `protobuf:"bytes,39,opt,name=quote_token_address,json=quoteTokenAddress,proto3" json:"quote_token_address,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *RealTimeMarket) Reset() {
	*x = RealTimeMarket{}
	mi := &file_common_tx_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RealTimeMarket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealTimeMarket) ProtoMessage() {}

func (x *RealTimeMarket) ProtoReflect() protoreflect.Message {
	mi := &file_common_tx_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealTimeMarket.ProtoReflect.Descriptor instead.
func (*RealTimeMarket) Descriptor() ([]byte, []int) {
	return file_common_tx_proto_rawDescGZIP(), []int{2}
}

func (x *RealTimeMarket) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RealTimeMarket) GetPoolAddress() string {
	if x != nil {
		return x.PoolAddress
	}
	return ""
}

func (x *RealTimeMarket) GetBuys() int64 {
	if x != nil {
		return x.Buys
	}
	return 0
}

func (x *RealTimeMarket) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *RealTimeMarket) GetCreatorClose() bool {
	if x != nil {
		return x.CreatorClose
	}
	return false
}

func (x *RealTimeMarket) GetCreatorTokenStatus() string {
	if x != nil {
		return x.CreatorTokenStatus
	}
	return ""
}

func (x *RealTimeMarket) GetHolderCount() int64 {
	if x != nil {
		return x.HolderCount
	}
	return 0
}

func (x *RealTimeMarket) GetHotLevel() int32 {
	if x != nil {
		return x.HotLevel
	}
	return 0
}

func (x *RealTimeMarket) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RealTimeMarket) GetInitialLiquidity() float64 {
	if x != nil {
		return x.InitialLiquidity
	}
	return 0
}

func (x *RealTimeMarket) GetIsShowAlert() bool {
	if x != nil {
		return x.IsShowAlert
	}
	return false
}

func (x *RealTimeMarket) GetLaunchpad() string {
	if x != nil {
		return x.Launchpad
	}
	return ""
}

func (x *RealTimeMarket) GetLiquidity() float64 {
	if x != nil {
		return x.Liquidity
	}
	return 0
}

func (x *RealTimeMarket) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *RealTimeMarket) GetMarketCap() float64 {
	if x != nil {
		return x.MarketCap
	}
	return 0
}

func (x *RealTimeMarket) GetOpenTimestamp() int64 {
	if x != nil {
		return x.OpenTimestamp
	}
	return 0
}

func (x *RealTimeMarket) GetPoolCreationTimestamp() int64 {
	if x != nil {
		return x.PoolCreationTimestamp
	}
	return 0
}

func (x *RealTimeMarket) GetBasePrice() float64 {
	if x != nil {
		return x.BasePrice
	}
	return 0
}

func (x *RealTimeMarket) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *RealTimeMarket) GetPriceChangePercent1H() float64 {
	if x != nil {
		return x.PriceChangePercent1H
	}
	return 0
}

func (x *RealTimeMarket) GetPriceChangePercent1M() float64 {
	if x != nil {
		return x.PriceChangePercent1M
	}
	return 0
}

func (x *RealTimeMarket) GetPriceChangePercent5M() float64 {
	if x != nil {
		return x.PriceChangePercent5M
	}
	return 0
}

func (x *RealTimeMarket) GetPriceChangePercent6H() float64 {
	if x != nil {
		return x.PriceChangePercent6H
	}
	return 0
}

func (x *RealTimeMarket) GetPriceChangePercent24H() float64 {
	if x != nil {
		return x.PriceChangePercent24H
	}
	return 0
}

func (x *RealTimeMarket) GetRenouncedFreezeAccount() int64 {
	if x != nil {
		return x.RenouncedFreezeAccount
	}
	return 0
}

func (x *RealTimeMarket) GetRenouncedMint() int64 {
	if x != nil {
		return x.RenouncedMint
	}
	return 0
}

func (x *RealTimeMarket) GetSells() int64 {
	if x != nil {
		return x.Sells
	}
	return 0
}

func (x *RealTimeMarket) GetSwaps() int64 {
	if x != nil {
		return x.Swaps
	}
	return 0
}

func (x *RealTimeMarket) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *RealTimeMarket) GetTelegram() string {
	if x != nil {
		return x.Telegram
	}
	return ""
}

func (x *RealTimeMarket) GetTop_10HolderRate() float64 {
	if x != nil {
		return x.Top_10HolderRate
	}
	return 0
}

func (x *RealTimeMarket) GetTwitterUsername() string {
	if x != nil {
		return x.TwitterUsername
	}
	return ""
}

func (x *RealTimeMarket) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *RealTimeMarket) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *RealTimeMarket) GetBaseMintAddress() string {
	if x != nil {
		return x.BaseMintAddress
	}
	return ""
}

func (x *RealTimeMarket) GetQuoteMintAddress() string {
	if x != nil {
		return x.QuoteMintAddress
	}
	return ""
}

func (x *RealTimeMarket) GetPriceChangePercent30M() float64 {
	if x != nil {
		return x.PriceChangePercent30M
	}
	return 0
}

func (x *RealTimeMarket) GetBaseTokenAddress() string {
	if x != nil {
		return x.BaseTokenAddress
	}
	return ""
}

func (x *RealTimeMarket) GetQuoteTokenAddress() string {
	if x != nil {
		return x.QuoteTokenAddress
	}
	return ""
}

type Tx struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Chain            string                 `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	MarketAddress    string                 `protobuf:"bytes,2,opt,name=market_address,json=marketAddress,proto3" json:"market_address,omitempty"`
	TxHash           string                 `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	BaseAmount       float64                `protobuf:"fixed64,4,opt,name=base_amount,json=baseAmount,proto3" json:"base_amount,omitempty"`
	QuoteAmount      float64                `protobuf:"fixed64,5,opt,name=quote_amount,json=quoteAmount,proto3" json:"quote_amount,omitempty"`
	BaseSymbol       string                 `protobuf:"bytes,6,opt,name=base_symbol,json=baseSymbol,proto3" json:"base_symbol,omitempty"`
	QuoteSymbol      string                 `protobuf:"bytes,7,opt,name=quote_symbol,json=quoteSymbol,proto3" json:"quote_symbol,omitempty"`
	BasePrice        float64                `protobuf:"fixed64,8,opt,name=base_price,json=basePrice,proto3" json:"base_price,omitempty"`
	QuotePrice       float64                `protobuf:"fixed64,9,opt,name=quote_price,json=quotePrice,proto3" json:"quote_price,omitempty"`
	CreatedTimestamp int64                  `protobuf:"varint,10,opt,name=created_timestamp,json=createdTimestamp,proto3" json:"created_timestamp,omitempty"`
	BlockHeight      int64                  `protobuf:"varint,11,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	TxIndex          int64                  `protobuf:"varint,12,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
	SenderAddress    string                 `protobuf:"bytes,13,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	RecipientAddress string                 `protobuf:"bytes,14,opt,name=recipient_address,json=recipientAddress,proto3" json:"recipient_address,omitempty"`
	TxType           int64                  `protobuf:"varint,15,opt,name=tx_type,json=txType,proto3" json:"tx_type,omitempty"` // 0created, 1buy, 2sell, 3add_liquidity, 4remove_liquidity
	BaseAddress      string                 `protobuf:"bytes,16,opt,name=base_address,json=baseAddress,proto3" json:"base_address,omitempty"`
	QuoteAddress     string                 `protobuf:"bytes,17,opt,name=quote_address,json=quoteAddress,proto3" json:"quote_address,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Tx) Reset() {
	*x = Tx{}
	mi := &file_common_tx_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tx) ProtoMessage() {}

func (x *Tx) ProtoReflect() protoreflect.Message {
	mi := &file_common_tx_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tx.ProtoReflect.Descriptor instead.
func (*Tx) Descriptor() ([]byte, []int) {
	return file_common_tx_proto_rawDescGZIP(), []int{3}
}

func (x *Tx) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *Tx) GetMarketAddress() string {
	if x != nil {
		return x.MarketAddress
	}
	return ""
}

func (x *Tx) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *Tx) GetBaseAmount() float64 {
	if x != nil {
		return x.BaseAmount
	}
	return 0
}

func (x *Tx) GetQuoteAmount() float64 {
	if x != nil {
		return x.QuoteAmount
	}
	return 0
}

func (x *Tx) GetBaseSymbol() string {
	if x != nil {
		return x.BaseSymbol
	}
	return ""
}

func (x *Tx) GetQuoteSymbol() string {
	if x != nil {
		return x.QuoteSymbol
	}
	return ""
}

func (x *Tx) GetBasePrice() float64 {
	if x != nil {
		return x.BasePrice
	}
	return 0
}

func (x *Tx) GetQuotePrice() float64 {
	if x != nil {
		return x.QuotePrice
	}
	return 0
}

func (x *Tx) GetCreatedTimestamp() int64 {
	if x != nil {
		return x.CreatedTimestamp
	}
	return 0
}

func (x *Tx) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *Tx) GetTxIndex() int64 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

func (x *Tx) GetSenderAddress() string {
	if x != nil {
		return x.SenderAddress
	}
	return ""
}

func (x *Tx) GetRecipientAddress() string {
	if x != nil {
		return x.RecipientAddress
	}
	return ""
}

func (x *Tx) GetTxType() int64 {
	if x != nil {
		return x.TxType
	}
	return 0
}

func (x *Tx) GetBaseAddress() string {
	if x != nil {
		return x.BaseAddress
	}
	return ""
}

func (x *Tx) GetQuoteAddress() string {
	if x != nil {
		return x.QuoteAddress
	}
	return ""
}

var File_common_tx_proto protoreflect.FileDescriptor

var file_common_tx_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x02, 0x74, 0x78, 0x22, 0xae, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x4b, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x6f,
	0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x68, 0x12, 0x0c,
	0x0a, 0x01, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x6c, 0x12, 0x0c, 0x0a, 0x01,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x63, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x76, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xc4, 0x09, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x61, 0x73, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x62, 0x61, 0x73, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x32, 0x34, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x32, 0x34, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x75, 0x79, 0x73, 0x5f, 0x32, 0x34, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62,
	0x75, 0x79, 0x73, 0x32, 0x34, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x32, 0x34, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x32, 0x34, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x31, 0x6d, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x31, 0x6d, 0x12, 0x34, 0x0a, 0x16, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x35, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x35,
	0x6d, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x31, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x31, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x36,
	0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x36, 0x68, 0x12, 0x36, 0x0a,
	0x17, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x32, 0x34, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x32, 0x34, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x61,
	0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43,
	0x61, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61,
	0x73, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x69, 0x6e, 0x69, 0x74, 0x42, 0x61, 0x73, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x69, 0x6e,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x33, 0x30, 0x6d,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x33, 0x30, 0x6d, 0x22, 0xbd, 0x0b,
	0x0a, 0x0e, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x75, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x62, 0x75, 0x79,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x6f, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b,
	0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x70, 0x61, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x70, 0x61, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x6f, 0x67, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x12, 0x25,
	0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x70, 0x6f, 0x6f, 0x6c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x31, 0x68, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x31, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x31, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x31, 0x6d, 0x12, 0x34,
	0x0a, 0x16, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x35, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x35, 0x6d, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x36, 0x68, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x36, 0x68, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x32, 0x34, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x32,
	0x34, 0x68, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x5f,
	0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x72, 0x65, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x46,
	0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x4d,
	0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x77, 0x61,
	0x70, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x77, 0x61, 0x70, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x12, 0x2b, 0x0a, 0x12, 0x74, 0x6f, 0x70, 0x5f, 0x31, 0x30, 0x5f, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x74, 0x6f, 0x70, 0x31, 0x30, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x77, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x69,
	0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x33,
	0x30, 0x6d, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x33, 0x30, 0x6d, 0x12,
	0x2c, 0x0a, 0x12, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x61, 0x73,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc2, 0x04,
	0x0a, 0x02, 0x54, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x62, 0x61, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x69, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x61, 0x69, 0x2f, 0x73, 0x6d, 0x64, 0x78,
	0x2f, 0x72, 0x70, 0x63, 0x78, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x78, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_tx_proto_rawDescOnce sync.Once
	file_common_tx_proto_rawDescData = file_common_tx_proto_rawDesc
)

func file_common_tx_proto_rawDescGZIP() []byte {
	file_common_tx_proto_rawDescOnce.Do(func() {
		file_common_tx_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_tx_proto_rawDescData)
	})
	return file_common_tx_proto_rawDescData
}

var file_common_tx_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_common_tx_proto_goTypes = []any{
	(*MarketKline)(nil),    // 0: tx.MarketKline
	(*Market)(nil),         // 1: tx.Market
	(*RealTimeMarket)(nil), // 2: tx.RealTimeMarket
	(*Tx)(nil),             // 3: tx.Tx
}
var file_common_tx_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_common_tx_proto_init() }
func file_common_tx_proto_init() {
	if File_common_tx_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_tx_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_tx_proto_goTypes,
		DependencyIndexes: file_common_tx_proto_depIdxs,
		MessageInfos:      file_common_tx_proto_msgTypes,
	}.Build()
	File_common_tx_proto = out.File
	file_common_tx_proto_rawDesc = nil
	file_common_tx_proto_goTypes = nil
	file_common_tx_proto_depIdxs = nil
}
