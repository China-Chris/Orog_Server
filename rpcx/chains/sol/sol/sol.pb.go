// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v3.20.3
// source: chains/sol.proto

package sol

import (
	trade "github.com/simance-ai/smdx/rpcx/chains/common/trade"
	tx "github.com/simance-ai/smdx/rpcx/chains/common/tx"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ping          string                 `protobuf:"bytes,1,opt,name=ping,proto3" json:"ping,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Request) Reset() {
	*x = Request{}
	mi := &file_chains_sol_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_chains_sol_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_chains_sol_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetPing() string {
	if x != nil {
		return x.Ping
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Response) Reset() {
	*x = Response{}
	mi := &file_chains_sol_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_chains_sol_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_chains_sol_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetTxByHashRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TxHash        string                 `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTxByHashRequest) Reset() {
	*x = GetTxByHashRequest{}
	mi := &file_chains_sol_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTxByHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxByHashRequest) ProtoMessage() {}

func (x *GetTxByHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chains_sol_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxByHashRequest.ProtoReflect.Descriptor instead.
func (*GetTxByHashRequest) Descriptor() ([]byte, []int) {
	return file_chains_sol_proto_rawDescGZIP(), []int{2}
}

func (x *GetTxByHashRequest) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

type Tx struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *tx.Tx                 `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tx) Reset() {
	*x = Tx{}
	mi := &file_chains_sol_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tx) ProtoMessage() {}

func (x *Tx) ProtoReflect() protoreflect.Message {
	mi := &file_chains_sol_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tx.ProtoReflect.Descriptor instead.
func (*Tx) Descriptor() ([]byte, []int) {
	return file_chains_sol_proto_rawDescGZIP(), []int{3}
}

func (x *Tx) GetResult() *tx.Tx {
	if x != nil {
		return x.Result
	}
	return nil
}

type TradeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TradeRequest  *trade.TradeRequest    `protobuf:"bytes,1,opt,name=trade_request,json=tradeRequest,proto3" json:"trade_request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradeRequest) Reset() {
	*x = TradeRequest{}
	mi := &file_chains_sol_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRequest) ProtoMessage() {}

func (x *TradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chains_sol_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRequest.ProtoReflect.Descriptor instead.
func (*TradeRequest) Descriptor() ([]byte, []int) {
	return file_chains_sol_proto_rawDescGZIP(), []int{4}
}

func (x *TradeRequest) GetTradeRequest() *trade.TradeRequest {
	if x != nil {
		return x.TradeRequest
	}
	return nil
}

type StartRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Height        int64                  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartRequest) Reset() {
	*x = StartRequest{}
	mi := &file_chains_sol_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRequest) ProtoMessage() {}

func (x *StartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chains_sol_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRequest.ProtoReflect.Descriptor instead.
func (*StartRequest) Descriptor() ([]byte, []int) {
	return file_chains_sol_proto_rawDescGZIP(), []int{5}
}

func (x *StartRequest) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type Page struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int64                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size          int64                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Page) Reset() {
	*x = Page{}
	mi := &file_chains_sol_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Page) ProtoMessage() {}

func (x *Page) ProtoReflect() protoreflect.Message {
	mi := &file_chains_sol_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Page.ProtoReflect.Descriptor instead.
func (*Page) Descriptor() ([]byte, []int) {
	return file_chains_sol_proto_rawDescGZIP(), []int{6}
}

func (x *Page) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Page) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type MarketListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*tx.Market           `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarketListResponse) Reset() {
	*x = MarketListResponse{}
	mi := &file_chains_sol_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketListResponse) ProtoMessage() {}

func (x *MarketListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chains_sol_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketListResponse.ProtoReflect.Descriptor instead.
func (*MarketListResponse) Descriptor() ([]byte, []int) {
	return file_chains_sol_proto_rawDescGZIP(), []int{7}
}

func (x *MarketListResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MarketListResponse) GetList() []*tx.Market {
	if x != nil {
		return x.List
	}
	return nil
}

type RealTimeMarketListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*tx.RealTimeMarket   `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RealTimeMarketListResponse) Reset() {
	*x = RealTimeMarketListResponse{}
	mi := &file_chains_sol_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RealTimeMarketListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealTimeMarketListResponse) ProtoMessage() {}

func (x *RealTimeMarketListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chains_sol_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealTimeMarketListResponse.ProtoReflect.Descriptor instead.
func (*RealTimeMarketListResponse) Descriptor() ([]byte, []int) {
	return file_chains_sol_proto_rawDescGZIP(), []int{8}
}

func (x *RealTimeMarketListResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RealTimeMarketListResponse) GetList() []*tx.RealTimeMarket {
	if x != nil {
		return x.List
	}
	return nil
}

type GetMarketKlineRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MarketAddress string                 `protobuf:"bytes,1,opt,name=market_address,json=marketAddress,proto3" json:"market_address,omitempty"`
	EndTimestamp  int64                  `protobuf:"varint,3,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	Interval      string                 `protobuf:"bytes,4,opt,name=interval,proto3" json:"interval,omitempty"` //1s 1m 5m 15m 30m 1h 4h 6h 1d
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMarketKlineRequest) Reset() {
	*x = GetMarketKlineRequest{}
	mi := &file_chains_sol_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMarketKlineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketKlineRequest) ProtoMessage() {}

func (x *GetMarketKlineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chains_sol_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketKlineRequest.ProtoReflect.Descriptor instead.
func (*GetMarketKlineRequest) Descriptor() ([]byte, []int) {
	return file_chains_sol_proto_rawDescGZIP(), []int{9}
}

func (x *GetMarketKlineRequest) GetMarketAddress() string {
	if x != nil {
		return x.MarketAddress
	}
	return ""
}

func (x *GetMarketKlineRequest) GetEndTimestamp() int64 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *GetMarketKlineRequest) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

type MarketKlineListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	List          []*tx.MarketKline      `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarketKlineListResponse) Reset() {
	*x = MarketKlineListResponse{}
	mi := &file_chains_sol_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketKlineListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketKlineListResponse) ProtoMessage() {}

func (x *MarketKlineListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chains_sol_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketKlineListResponse.ProtoReflect.Descriptor instead.
func (*MarketKlineListResponse) Descriptor() ([]byte, []int) {
	return file_chains_sol_proto_rawDescGZIP(), []int{10}
}

func (x *MarketKlineListResponse) GetList() []*tx.MarketKline {
	if x != nil {
		return x.List
	}
	return nil
}

type GetMarketListRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Page             int64                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size             int64                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	OrderBy          string                 `protobuf:"bytes,3,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	Direction        string                 `protobuf:"bytes,4,opt,name=direction,proto3" json:"direction,omitempty"`
	Filters          string                 `protobuf:"bytes,5,opt,name=filters,proto3" json:"filters,omitempty"`
	Limit            int64                  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Performance      string                 `protobuf:"bytes,7,opt,name=performance,proto3" json:"performance,omitempty"`
	Period           string                 `protobuf:"bytes,8,opt,name=period,proto3" json:"period,omitempty"`                                      //1s 1m 5m 15m 30m 1h 4h 6h 1d
	PumpOrRaydium    string                 `protobuf:"bytes,9,opt,name=pump_or_raydium,json=pumpOrRaydium,proto3" json:"pump_or_raydium,omitempty"` // pump raydium
	SearchValue      string                 `protobuf:"bytes,10,opt,name=search_value,json=searchValue,proto3" json:"search_value,omitempty"`
	MarketAddress    string                 `protobuf:"bytes,11,opt,name=market_address,json=marketAddress,proto3" json:"market_address,omitempty"`
	TokenAddressList []string               `protobuf:"bytes,12,rep,name=token_address_list,json=tokenAddressList,proto3" json:"token_address_list,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetMarketListRequest) Reset() {
	*x = GetMarketListRequest{}
	mi := &file_chains_sol_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMarketListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketListRequest) ProtoMessage() {}

func (x *GetMarketListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chains_sol_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketListRequest.ProtoReflect.Descriptor instead.
func (*GetMarketListRequest) Descriptor() ([]byte, []int) {
	return file_chains_sol_proto_rawDescGZIP(), []int{11}
}

func (x *GetMarketListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetMarketListRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetMarketListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetMarketListRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *GetMarketListRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *GetMarketListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetMarketListRequest) GetPerformance() string {
	if x != nil {
		return x.Performance
	}
	return ""
}

func (x *GetMarketListRequest) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *GetMarketListRequest) GetPumpOrRaydium() string {
	if x != nil {
		return x.PumpOrRaydium
	}
	return ""
}

func (x *GetMarketListRequest) GetSearchValue() string {
	if x != nil {
		return x.SearchValue
	}
	return ""
}

func (x *GetMarketListRequest) GetMarketAddress() string {
	if x != nil {
		return x.MarketAddress
	}
	return ""
}

func (x *GetMarketListRequest) GetTokenAddressList() []string {
	if x != nil {
		return x.TokenAddressList
	}
	return nil
}

type GetMarketInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MarketAddress string                 `protobuf:"bytes,1,opt,name=market_address,json=marketAddress,proto3" json:"market_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMarketInfoRequest) Reset() {
	*x = GetMarketInfoRequest{}
	mi := &file_chains_sol_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMarketInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketInfoRequest) ProtoMessage() {}

func (x *GetMarketInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chains_sol_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketInfoRequest.ProtoReflect.Descriptor instead.
func (*GetMarketInfoRequest) Descriptor() ([]byte, []int) {
	return file_chains_sol_proto_rawDescGZIP(), []int{12}
}

func (x *GetMarketInfoRequest) GetMarketAddress() string {
	if x != nil {
		return x.MarketAddress
	}
	return ""
}

type MarketInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Market        *tx.Market             `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarketInfoResponse) Reset() {
	*x = MarketInfoResponse{}
	mi := &file_chains_sol_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketInfoResponse) ProtoMessage() {}

func (x *MarketInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chains_sol_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketInfoResponse.ProtoReflect.Descriptor instead.
func (*MarketInfoResponse) Descriptor() ([]byte, []int) {
	return file_chains_sol_proto_rawDescGZIP(), []int{13}
}

func (x *MarketInfoResponse) GetMarket() *tx.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

type GetMemeMarketListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int64                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size          int64                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	OrderBy       string                 `protobuf:"bytes,3,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	Direction     string                 `protobuf:"bytes,4,opt,name=direction,proto3" json:"direction,omitempty"`
	Performance   string                 `protobuf:"bytes,5,opt,name=performance,proto3" json:"performance,omitempty"`
	PumpOrRaydium string                 `protobuf:"bytes,6,opt,name=pump_or_raydium,json=pumpOrRaydium,proto3" json:"pump_or_raydium,omitempty"` // pump raydium
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMemeMarketListRequest) Reset() {
	*x = GetMemeMarketListRequest{}
	mi := &file_chains_sol_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMemeMarketListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemeMarketListRequest) ProtoMessage() {}

func (x *GetMemeMarketListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chains_sol_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemeMarketListRequest.ProtoReflect.Descriptor instead.
func (*GetMemeMarketListRequest) Descriptor() ([]byte, []int) {
	return file_chains_sol_proto_rawDescGZIP(), []int{14}
}

func (x *GetMemeMarketListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetMemeMarketListRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetMemeMarketListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetMemeMarketListRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *GetMemeMarketListRequest) GetPerformance() string {
	if x != nil {
		return x.Performance
	}
	return ""
}

func (x *GetMemeMarketListRequest) GetPumpOrRaydium() string {
	if x != nil {
		return x.PumpOrRaydium
	}
	return ""
}

type GetMarketInfoByQuoteMintRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuoteMint     string                 `protobuf:"bytes,1,opt,name=quote_mint,json=quoteMint,proto3" json:"quote_mint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMarketInfoByQuoteMintRequest) Reset() {
	*x = GetMarketInfoByQuoteMintRequest{}
	mi := &file_chains_sol_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMarketInfoByQuoteMintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketInfoByQuoteMintRequest) ProtoMessage() {}

func (x *GetMarketInfoByQuoteMintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chains_sol_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketInfoByQuoteMintRequest.ProtoReflect.Descriptor instead.
func (*GetMarketInfoByQuoteMintRequest) Descriptor() ([]byte, []int) {
	return file_chains_sol_proto_rawDescGZIP(), []int{15}
}

func (x *GetMarketInfoByQuoteMintRequest) GetQuoteMint() string {
	if x != nil {
		return x.QuoteMint
	}
	return ""
}

type SearchCurrencyListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*Currency            `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchCurrencyListResponse) Reset() {
	*x = SearchCurrencyListResponse{}
	mi := &file_chains_sol_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchCurrencyListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCurrencyListResponse) ProtoMessage() {}

func (x *SearchCurrencyListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chains_sol_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCurrencyListResponse.ProtoReflect.Descriptor instead.
func (*SearchCurrencyListResponse) Descriptor() ([]byte, []int) {
	return file_chains_sol_proto_rawDescGZIP(), []int{16}
}

func (x *SearchCurrencyListResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchCurrencyListResponse) GetList() []*Currency {
	if x != nil {
		return x.List
	}
	return nil
}

type Currency struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Follow           bool                   `protobuf:"varint,1,opt,name=follow,proto3" json:"follow,omitempty"`                                              // 是否关注
	Logo             string                 `protobuf:"bytes,2,opt,name=logo,proto3" json:"logo,omitempty"`                                                   // logo
	Symbol           string                 `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`                                               // 货币符号
	Chain            string                 `protobuf:"bytes,4,opt,name=chain,proto3" json:"chain,omitempty"`                                                 // 链
	Address          string                 `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`                                             // 代币地址
	QuoteMintAddress string                 `protobuf:"bytes,6,opt,name=quote_mint_address,json=quoteMintAddress,proto3" json:"quote_mint_address,omitempty"` // 池地址
	Liquidity        float64                `protobuf:"fixed64,7,opt,name=liquidity,proto3" json:"liquidity,omitempty"`                                       // 24小时池流动性
	Volume_24        float64                `protobuf:"fixed64,8,opt,name=volume_24,json=volume24,proto3" json:"volume_24,omitempty"`                         // 池交易量
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Currency) Reset() {
	*x = Currency{}
	mi := &file_chains_sol_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_chains_sol_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_chains_sol_proto_rawDescGZIP(), []int{17}
}

func (x *Currency) GetFollow() bool {
	if x != nil {
		return x.Follow
	}
	return false
}

func (x *Currency) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *Currency) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Currency) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *Currency) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Currency) GetQuoteMintAddress() string {
	if x != nil {
		return x.QuoteMintAddress
	}
	return ""
}

func (x *Currency) GetLiquidity() float64 {
	if x != nil {
		return x.Liquidity
	}
	return 0
}

func (x *Currency) GetVolume_24() float64 {
	if x != nil {
		return x.Volume_24
	}
	return 0
}

type MarketActivityListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*Activity            `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarketActivityListResponse) Reset() {
	*x = MarketActivityListResponse{}
	mi := &file_chains_sol_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketActivityListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketActivityListResponse) ProtoMessage() {}

func (x *MarketActivityListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chains_sol_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketActivityListResponse.ProtoReflect.Descriptor instead.
func (*MarketActivityListResponse) Descriptor() ([]byte, []int) {
	return file_chains_sol_proto_rawDescGZIP(), []int{18}
}

func (x *MarketActivityListResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MarketActivityListResponse) GetList() []*Activity {
	if x != nil {
		return x.List
	}
	return nil
}

type Activity struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Maker                string                 `protobuf:"bytes,1,opt,name=maker,proto3" json:"maker,omitempty"`                                                              // 交易发起者地址
	BaseAmount           float64                `protobuf:"fixed64,2,opt,name=base_amount,json=baseAmount,proto3" json:"base_amount,omitempty"`                                // 基础货币的交易量
	QuoteAmount          float64                `protobuf:"fixed64,3,opt,name=quote_amount,json=quoteAmount,proto3" json:"quote_amount,omitempty"`                             // 报价货币的交易量
	AmountUsd            float64                `protobuf:"fixed64,4,opt,name=amount_usd,json=amountUsd,proto3" json:"amount_usd,omitempty"`                                   // 交易金额（以美元计）
	Timestamp            int64                  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                     // 交易时间戳
	Type                 int64                  `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`                                                               // 交易类型（-1TxUnknown 0created, 1buy, 2sell, 3add_liquidity, 4remove_liquidity）
	TxHash               string                 `protobuf:"bytes,7,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`                                              // 交易哈希
	PriceUsd             float64                `protobuf:"fixed64,8,opt,name=price_usd,json=priceUsd,proto3" json:"price_usd,omitempty"`                                      // 交易价格（以美元计）
	MakerTags            []string               `protobuf:"bytes,9,rep,name=maker_tags,json=makerTags,proto3" json:"maker_tags,omitempty"`                                     // 发起者的标签
	MakerTwitterName     string                 `protobuf:"bytes,10,opt,name=maker_twitter_name,json=makerTwitterName,proto3" json:"maker_twitter_name,omitempty"`             // 发起者的 Twitter 名称，可选
	MakerTwitterUsername string                 `protobuf:"bytes,11,opt,name=maker_twitter_username,json=makerTwitterUsername,proto3" json:"maker_twitter_username,omitempty"` // 发起者的 Twitter 用户名，可选
	MakerName            string                 `protobuf:"bytes,12,opt,name=maker_name,json=makerName,proto3" json:"maker_name,omitempty"`                                    // 发起者的名称，可选
	MakerAvatar          string                 `protobuf:"bytes,13,opt,name=maker_avatar,json=makerAvatar,proto3" json:"maker_avatar,omitempty"`                              // 发起者的头像，可选
	MakerEns             string                 `protobuf:"bytes,14,opt,name=maker_ens,json=makerEns,proto3" json:"maker_ens,omitempty"`                                       // 发起者的 ENS 名称，可选
	MakerTokenTags       []string               `protobuf:"bytes,15,rep,name=maker_token_tags,json=makerTokenTags,proto3" json:"maker_token_tags,omitempty"`                   // 发起者的代币标签
	TokenAddress         string                 `protobuf:"bytes,16,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`                           // 代币地址
	QuoteAddress         string                 `protobuf:"bytes,17,opt,name=quote_address,json=quoteAddress,proto3" json:"quote_address,omitempty"`                           // 报价货币地址
	TotalTrade           int64                  `protobuf:"varint,18,opt,name=total_trade,json=totalTrade,proto3" json:"total_trade,omitempty"`                                // 总交易量
	Id                   string                 `protobuf:"bytes,19,opt,name=id,proto3" json:"id,omitempty"`                                                                   // 唯一 ID
	IsFollowing          int32                  `protobuf:"varint,20,opt,name=is_following,json=isFollowing,proto3" json:"is_following,omitempty"`                             // 是否已关注（0/1）
	IsOpenOrClose        int32                  `protobuf:"varint,21,opt,name=is_open_or_close,json=isOpenOrClose,proto3" json:"is_open_or_close,omitempty"`                   // 是否开仓或平仓
	BuyCostUsd           float64                `protobuf:"fixed64,22,opt,name=buy_cost_usd,json=buyCostUsd,proto3" json:"buy_cost_usd,omitempty"`                             // 买入成本（以美元计）
	Balance              string                 `protobuf:"bytes,23,opt,name=balance,proto3" json:"balance,omitempty"`                                                         // 当前余额
	Cost                 float64                `protobuf:"fixed64,24,opt,name=cost,proto3" json:"cost,omitempty"`                                                             // 总成本
	HistoryBoughtAmount  float64                `protobuf:"fixed64,25,opt,name=history_bought_amount,json=historyBoughtAmount,proto3" json:"history_bought_amount,omitempty"`  // 历史买入总量
	HistorySoldIncome    float64                `protobuf:"fixed64,26,opt,name=history_sold_income,json=historySoldIncome,proto3" json:"history_sold_income,omitempty"`        // 历史卖出收益
	HistorySoldAmount    float64                `protobuf:"fixed64,27,opt,name=history_sold_amount,json=historySoldAmount,proto3" json:"history_sold_amount,omitempty"`        // 历史卖出总量
	UnrealizedProfit     float64                `protobuf:"fixed64,28,opt,name=unrealized_profit,json=unrealizedProfit,proto3" json:"unrealized_profit,omitempty"`             // 未实现利润
	RealizedProfit       float64                `protobuf:"fixed64,29,opt,name=realized_profit,json=realizedProfit,proto3" json:"realized_profit,omitempty"`                   // 已实现利润
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Activity) Reset() {
	*x = Activity{}
	mi := &file_chains_sol_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activity) ProtoMessage() {}

func (x *Activity) ProtoReflect() protoreflect.Message {
	mi := &file_chains_sol_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Activity.ProtoReflect.Descriptor instead.
func (*Activity) Descriptor() ([]byte, []int) {
	return file_chains_sol_proto_rawDescGZIP(), []int{19}
}

func (x *Activity) GetMaker() string {
	if x != nil {
		return x.Maker
	}
	return ""
}

func (x *Activity) GetBaseAmount() float64 {
	if x != nil {
		return x.BaseAmount
	}
	return 0
}

func (x *Activity) GetQuoteAmount() float64 {
	if x != nil {
		return x.QuoteAmount
	}
	return 0
}

func (x *Activity) GetAmountUsd() float64 {
	if x != nil {
		return x.AmountUsd
	}
	return 0
}

func (x *Activity) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Activity) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Activity) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *Activity) GetPriceUsd() float64 {
	if x != nil {
		return x.PriceUsd
	}
	return 0
}

func (x *Activity) GetMakerTags() []string {
	if x != nil {
		return x.MakerTags
	}
	return nil
}

func (x *Activity) GetMakerTwitterName() string {
	if x != nil {
		return x.MakerTwitterName
	}
	return ""
}

func (x *Activity) GetMakerTwitterUsername() string {
	if x != nil {
		return x.MakerTwitterUsername
	}
	return ""
}

func (x *Activity) GetMakerName() string {
	if x != nil {
		return x.MakerName
	}
	return ""
}

func (x *Activity) GetMakerAvatar() string {
	if x != nil {
		return x.MakerAvatar
	}
	return ""
}

func (x *Activity) GetMakerEns() string {
	if x != nil {
		return x.MakerEns
	}
	return ""
}

func (x *Activity) GetMakerTokenTags() []string {
	if x != nil {
		return x.MakerTokenTags
	}
	return nil
}

func (x *Activity) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *Activity) GetQuoteAddress() string {
	if x != nil {
		return x.QuoteAddress
	}
	return ""
}

func (x *Activity) GetTotalTrade() int64 {
	if x != nil {
		return x.TotalTrade
	}
	return 0
}

func (x *Activity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Activity) GetIsFollowing() int32 {
	if x != nil {
		return x.IsFollowing
	}
	return 0
}

func (x *Activity) GetIsOpenOrClose() int32 {
	if x != nil {
		return x.IsOpenOrClose
	}
	return 0
}

func (x *Activity) GetBuyCostUsd() float64 {
	if x != nil {
		return x.BuyCostUsd
	}
	return 0
}

func (x *Activity) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *Activity) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *Activity) GetHistoryBoughtAmount() float64 {
	if x != nil {
		return x.HistoryBoughtAmount
	}
	return 0
}

func (x *Activity) GetHistorySoldIncome() float64 {
	if x != nil {
		return x.HistorySoldIncome
	}
	return 0
}

func (x *Activity) GetHistorySoldAmount() float64 {
	if x != nil {
		return x.HistorySoldAmount
	}
	return 0
}

func (x *Activity) GetUnrealizedProfit() float64 {
	if x != nil {
		return x.UnrealizedProfit
	}
	return 0
}

func (x *Activity) GetRealizedProfit() float64 {
	if x != nil {
		return x.RealizedProfit
	}
	return 0
}

type MarketDetailResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Address            string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`                                                   // 代币地址
	Symbol             string                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                     // 代币符号
	Name               string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                         // 代币名称
	Decimals           int64                  `protobuf:"varint,4,opt,name=decimals,proto3" json:"decimals,omitempty"`                                                // 小数位数
	Logo               string                 `protobuf:"bytes,5,opt,name=logo,proto3" json:"logo,omitempty"`                                                         // 代币 logo 链接
	BiggestPoolAddress string                 `protobuf:"bytes,6,opt,name=biggest_pool_address,json=biggestPoolAddress,proto3" json:"biggest_pool_address,omitempty"` // 最大流动池地址
	OpenTimestamp      int64                  `protobuf:"varint,7,opt,name=open_timestamp,json=openTimestamp,proto3" json:"open_timestamp,omitempty"`                 // 开始时间戳
	CreationTimestamp  int64                  `protobuf:"varint,8,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`     // 创建时间戳
	HolderCount        int64                  `protobuf:"varint,9,opt,name=holder_count,json=holderCount,proto3" json:"holder_count,omitempty"`                       // 持有者数量
	CirculatingSupply  float64                `protobuf:"fixed64,10,opt,name=circulating_supply,json=circulatingSupply,proto3" json:"circulating_supply,omitempty"`   // 流通量
	TotalSupply        float64                `protobuf:"fixed64,11,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`                     // 总供应量
	MaxSupply          float64                `protobuf:"fixed64,12,opt,name=max_supply,json=maxSupply,proto3" json:"max_supply,omitempty"`                           // 最大供应量
	Liquidity          float64                `protobuf:"fixed64,13,opt,name=liquidity,proto3" json:"liquidity,omitempty"`                                            // 流动性
	Price              float64                `protobuf:"fixed64,14,opt,name=price,proto3" json:"price,omitempty"`                                                    // 当前价格
	BasePrice          float64                `protobuf:"fixed64,19,opt,name=base_price,json=basePrice,proto3" json:"base_price,omitempty"`                           // 总流通价格
	Follow             bool                   `protobuf:"varint,18,opt,name=follow,proto3" json:"follow,omitempty"`                                                   // 是否收藏
	Pool               *Pool                  `protobuf:"bytes,15,opt,name=pool,proto3" json:"pool,omitempty"`                                                        // 池信息
	Dev                *Developer             `protobuf:"bytes,16,opt,name=dev,proto3" json:"dev,omitempty"`                                                          // 开发者信息
	PriceInfo          *PriceInfo             `protobuf:"bytes,17,opt,name=price_info,json=priceInfo,proto3" json:"price_info,omitempty"`                             // 价格信息
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *MarketDetailResponse) Reset() {
	*x = MarketDetailResponse{}
	mi := &file_chains_sol_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDetailResponse) ProtoMessage() {}

func (x *MarketDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chains_sol_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDetailResponse.ProtoReflect.Descriptor instead.
func (*MarketDetailResponse) Descriptor() ([]byte, []int) {
	return file_chains_sol_proto_rawDescGZIP(), []int{20}
}

func (x *MarketDetailResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *MarketDetailResponse) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *MarketDetailResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MarketDetailResponse) GetDecimals() int64 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *MarketDetailResponse) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *MarketDetailResponse) GetBiggestPoolAddress() string {
	if x != nil {
		return x.BiggestPoolAddress
	}
	return ""
}

func (x *MarketDetailResponse) GetOpenTimestamp() int64 {
	if x != nil {
		return x.OpenTimestamp
	}
	return 0
}

func (x *MarketDetailResponse) GetCreationTimestamp() int64 {
	if x != nil {
		return x.CreationTimestamp
	}
	return 0
}

func (x *MarketDetailResponse) GetHolderCount() int64 {
	if x != nil {
		return x.HolderCount
	}
	return 0
}

func (x *MarketDetailResponse) GetCirculatingSupply() float64 {
	if x != nil {
		return x.CirculatingSupply
	}
	return 0
}

func (x *MarketDetailResponse) GetTotalSupply() float64 {
	if x != nil {
		return x.TotalSupply
	}
	return 0
}

func (x *MarketDetailResponse) GetMaxSupply() float64 {
	if x != nil {
		return x.MaxSupply
	}
	return 0
}

func (x *MarketDetailResponse) GetLiquidity() float64 {
	if x != nil {
		return x.Liquidity
	}
	return 0
}

func (x *MarketDetailResponse) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketDetailResponse) GetBasePrice() float64 {
	if x != nil {
		return x.BasePrice
	}
	return 0
}

func (x *MarketDetailResponse) GetFollow() bool {
	if x != nil {
		return x.Follow
	}
	return false
}

func (x *MarketDetailResponse) GetPool() *Pool {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *MarketDetailResponse) GetDev() *Developer {
	if x != nil {
		return x.Dev
	}
	return nil
}

func (x *MarketDetailResponse) GetPriceInfo() *PriceInfo {
	if x != nil {
		return x.PriceInfo
	}
	return nil
}

type Pool struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Address             string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`                                                         // 代币地址
	QuoteMintAddress    string                 `protobuf:"bytes,2,opt,name=quote_mint_address,json=quoteMintAddress,proto3" json:"quote_mint_address,omitempty"`             // 流动池地址
	QuoteAddress        string                 `protobuf:"bytes,3,opt,name=quote_address,json=quoteAddress,proto3" json:"quote_address,omitempty"`                           // 报价代币地址
	QuoteSymbol         string                 `protobuf:"bytes,4,opt,name=quote_symbol,json=quoteSymbol,proto3" json:"quote_symbol,omitempty"`                              // 报价代币符号
	Liquidity           float64                `protobuf:"fixed64,5,opt,name=liquidity,proto3" json:"liquidity,omitempty"`                                                   // 流动性
	BaseReserve         float64                `protobuf:"fixed64,6,opt,name=base_reserve,json=baseReserve,proto3" json:"base_reserve,omitempty"`                            // 基础代币储量
	QuoteReserve        float64                `protobuf:"fixed64,7,opt,name=quote_reserve,json=quoteReserve,proto3" json:"quote_reserve,omitempty"`                         // 报价代币储量
	InitialLiquidity    float64                `protobuf:"fixed64,8,opt,name=initial_liquidity,json=initialLiquidity,proto3" json:"initial_liquidity,omitempty"`             // 初始流动性
	InitialBaseReserve  float64                `protobuf:"fixed64,9,opt,name=initial_base_reserve,json=initialBaseReserve,proto3" json:"initial_base_reserve,omitempty"`     // 初始基础代币储量
	InitialQuoteReserve float64                `protobuf:"fixed64,10,opt,name=initial_quote_reserve,json=initialQuoteReserve,proto3" json:"initial_quote_reserve,omitempty"` // 初始报价代币储量
	CreationTimestamp   int64                  `protobuf:"varint,11,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`          // 创建时间戳
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Pool) Reset() {
	*x = Pool{}
	mi := &file_chains_sol_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pool) ProtoMessage() {}

func (x *Pool) ProtoReflect() protoreflect.Message {
	mi := &file_chains_sol_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pool.ProtoReflect.Descriptor instead.
func (*Pool) Descriptor() ([]byte, []int) {
	return file_chains_sol_proto_rawDescGZIP(), []int{21}
}

func (x *Pool) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Pool) GetQuoteMintAddress() string {
	if x != nil {
		return x.QuoteMintAddress
	}
	return ""
}

func (x *Pool) GetQuoteAddress() string {
	if x != nil {
		return x.QuoteAddress
	}
	return ""
}

func (x *Pool) GetQuoteSymbol() string {
	if x != nil {
		return x.QuoteSymbol
	}
	return ""
}

func (x *Pool) GetLiquidity() float64 {
	if x != nil {
		return x.Liquidity
	}
	return 0
}

func (x *Pool) GetBaseReserve() float64 {
	if x != nil {
		return x.BaseReserve
	}
	return 0
}

func (x *Pool) GetQuoteReserve() float64 {
	if x != nil {
		return x.QuoteReserve
	}
	return 0
}

func (x *Pool) GetInitialLiquidity() float64 {
	if x != nil {
		return x.InitialLiquidity
	}
	return 0
}

func (x *Pool) GetInitialBaseReserve() float64 {
	if x != nil {
		return x.InitialBaseReserve
	}
	return 0
}

func (x *Pool) GetInitialQuoteReserve() float64 {
	if x != nil {
		return x.InitialQuoteReserve
	}
	return 0
}

func (x *Pool) GetCreationTimestamp() int64 {
	if x != nil {
		return x.CreationTimestamp
	}
	return 0
}

type Developer struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Address             string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`                                                        // 代币地址
	CreatorAddress      string                 `protobuf:"bytes,2,opt,name=creator_address,json=creatorAddress,proto3" json:"creator_address,omitempty"`                    // 创作者地址
	CreatorTokenBalance float64                `protobuf:"fixed64,3,opt,name=creator_token_balance,json=creatorTokenBalance,proto3" json:"creator_token_balance,omitempty"` // 创作者代币余额
	CreatorTokenStatus  bool                   `protobuf:"varint,4,opt,name=creator_token_status,json=creatorTokenStatus,proto3" json:"creator_token_status,omitempty"`     // 创作者代币状态
	Top_10HolderRate    float64                `protobuf:"fixed64,5,opt,name=top_10_holder_rate,json=top10HolderRate,proto3" json:"top_10_holder_rate,omitempty"`           // 前10持有人占比
	Telegram            string                 `protobuf:"bytes,6,opt,name=telegram,proto3" json:"telegram,omitempty"`                                                      // 代币地址
	TwitterUsername     string                 `protobuf:"bytes,7,opt,name=twitter_username,json=twitterUsername,proto3" json:"twitter_username,omitempty"`                 // 代币地址
	Website             string                 `protobuf:"bytes,8,opt,name=website,proto3" json:"website,omitempty"`                                                        // 代币地址
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Developer) Reset() {
	*x = Developer{}
	mi := &file_chains_sol_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Developer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Developer) ProtoMessage() {}

func (x *Developer) ProtoReflect() protoreflect.Message {
	mi := &file_chains_sol_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Developer.ProtoReflect.Descriptor instead.
func (*Developer) Descriptor() ([]byte, []int) {
	return file_chains_sol_proto_rawDescGZIP(), []int{22}
}

func (x *Developer) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Developer) GetCreatorAddress() string {
	if x != nil {
		return x.CreatorAddress
	}
	return ""
}

func (x *Developer) GetCreatorTokenBalance() float64 {
	if x != nil {
		return x.CreatorTokenBalance
	}
	return 0
}

func (x *Developer) GetCreatorTokenStatus() bool {
	if x != nil {
		return x.CreatorTokenStatus
	}
	return false
}

func (x *Developer) GetTop_10HolderRate() float64 {
	if x != nil {
		return x.Top_10HolderRate
	}
	return 0
}

func (x *Developer) GetTelegram() string {
	if x != nil {
		return x.Telegram
	}
	return ""
}

func (x *Developer) GetTwitterUsername() string {
	if x != nil {
		return x.TwitterUsername
	}
	return ""
}

func (x *Developer) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

type PriceInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Address        string                 `protobuf:"bytes,35,opt,name=address,proto3" json:"address,omitempty"`
	Price          float64                `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`                                         // 当前价格
	Price_1M       float64                `protobuf:"fixed64,2,opt,name=price_1m,json=price1m,proto3" json:"price_1m,omitempty"`                      // 1分钟价格
	Price_5M       float64                `protobuf:"fixed64,3,opt,name=price_5m,json=price5m,proto3" json:"price_5m,omitempty"`                      // 5分钟价格
	Price_1H       float64                `protobuf:"fixed64,4,opt,name=price_1h,json=price1h,proto3" json:"price_1h,omitempty"`                      // 1小时价格
	Price_6H       float64                `protobuf:"fixed64,5,opt,name=price_6h,json=price6h,proto3" json:"price_6h,omitempty"`                      // 6小时价格
	Price_24H      float64                `protobuf:"fixed64,6,opt,name=price_24h,json=price24h,proto3" json:"price_24h,omitempty"`                   // 24小时价格
	Buys_1M        float64                `protobuf:"fixed64,7,opt,name=buys_1m,json=buys1m,proto3" json:"buys_1m,omitempty"`                         // 1分钟买入次数
	Buys_5M        float64                `protobuf:"fixed64,8,opt,name=buys_5m,json=buys5m,proto3" json:"buys_5m,omitempty"`                         // 5分钟买入次数
	Buys_1H        float64                `protobuf:"fixed64,9,opt,name=buys_1h,json=buys1h,proto3" json:"buys_1h,omitempty"`                         // 1小时买入次数
	Buys_6H        float64                `protobuf:"fixed64,10,opt,name=buys_6h,json=buys6h,proto3" json:"buys_6h,omitempty"`                        // 6小时买入次数
	Buys_24H       float64                `protobuf:"fixed64,11,opt,name=buys_24h,json=buys24h,proto3" json:"buys_24h,omitempty"`                     // 24小时买入次数
	Sells_1M       float64                `protobuf:"fixed64,12,opt,name=sells_1m,json=sells1m,proto3" json:"sells_1m,omitempty"`                     // 1分钟卖出次数
	Sells_5M       float64                `protobuf:"fixed64,13,opt,name=sells_5m,json=sells5m,proto3" json:"sells_5m,omitempty"`                     // 5分钟卖出次数
	Sells_1H       float64                `protobuf:"fixed64,14,opt,name=sells_1h,json=sells1h,proto3" json:"sells_1h,omitempty"`                     // 1小时卖出次数
	Sells_6H       float64                `protobuf:"fixed64,15,opt,name=sells_6h,json=sells6h,proto3" json:"sells_6h,omitempty"`                     // 6小时卖出次数
	Sells_24H      float64                `protobuf:"fixed64,16,opt,name=sells_24h,json=sells24h,proto3" json:"sells_24h,omitempty"`                  // 24小时卖出次数
	Volume_1M      float64                `protobuf:"fixed64,17,opt,name=volume_1m,json=volume1m,proto3" json:"volume_1m,omitempty"`                  // 1分钟交易量
	Volume_5M      float64                `protobuf:"fixed64,18,opt,name=volume_5m,json=volume5m,proto3" json:"volume_5m,omitempty"`                  // 5分钟交易量
	Volume_1H      float64                `protobuf:"fixed64,19,opt,name=volume_1h,json=volume1h,proto3" json:"volume_1h,omitempty"`                  // 1小时交易量
	Volume_6H      float64                `protobuf:"fixed64,20,opt,name=volume_6h,json=volume6h,proto3" json:"volume_6h,omitempty"`                  // 6小时交易量
	Volume_24H     float64                `protobuf:"fixed64,21,opt,name=volume_24h,json=volume24h,proto3" json:"volume_24h,omitempty"`               // 24小时交易量
	BuyVolume_1M   float64                `protobuf:"fixed64,22,opt,name=buy_volume_1m,json=buyVolume1m,proto3" json:"buy_volume_1m,omitempty"`       // 1分钟买入量
	BuyVolume_5M   float64                `protobuf:"fixed64,23,opt,name=buy_volume_5m,json=buyVolume5m,proto3" json:"buy_volume_5m,omitempty"`       // 5分钟买入量
	BuyVolume_1H   float64                `protobuf:"fixed64,24,opt,name=buy_volume_1h,json=buyVolume1h,proto3" json:"buy_volume_1h,omitempty"`       // 1小时买入量
	BuyVolume_6H   float64                `protobuf:"fixed64,25,opt,name=buy_volume_6h,json=buyVolume6h,proto3" json:"buy_volume_6h,omitempty"`       // 6小时买入量
	BuyVolume_24H  float64                `protobuf:"fixed64,26,opt,name=buy_volume_24h,json=buyVolume24h,proto3" json:"buy_volume_24h,omitempty"`    // 24小时买入量
	SellVolume_1M  float64                `protobuf:"fixed64,27,opt,name=sell_volume_1m,json=sellVolume1m,proto3" json:"sell_volume_1m,omitempty"`    // 1分钟卖出量
	SellVolume_5M  float64                `protobuf:"fixed64,28,opt,name=sell_volume_5m,json=sellVolume5m,proto3" json:"sell_volume_5m,omitempty"`    // 5分钟卖出量
	SellVolume_1H  float64                `protobuf:"fixed64,29,opt,name=sell_volume_1h,json=sellVolume1h,proto3" json:"sell_volume_1h,omitempty"`    // 1小时卖出量
	SellVolume_6H  float64                `protobuf:"fixed64,30,opt,name=sell_volume_6h,json=sellVolume6h,proto3" json:"sell_volume_6h,omitempty"`    // 6小时卖出量
	SellVolume_24H float64                `protobuf:"fixed64,31,opt,name=sell_volume_24h,json=sellVolume24h,proto3" json:"sell_volume_24h,omitempty"` // 24小时卖出量
	Swaps          int64                  `protobuf:"varint,32,opt,name=swaps,proto3" json:"swaps,omitempty"`                                         // 总交换次数
	Sells          int64                  `protobuf:"varint,33,opt,name=sells,proto3" json:"sells,omitempty"`                                         // 总卖出次数
	Buys           int64                  `protobuf:"varint,34,opt,name=buys,proto3" json:"buys,omitempty"`                                           // 总买入次数
	MarketCap      float64                `protobuf:"fixed64,36,opt,name=market_cap,json=marketCap,proto3" json:"market_cap,omitempty"`               // 总市值
	Volume         float64                `protobuf:"fixed64,37,opt,name=volume,proto3" json:"volume,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PriceInfo) Reset() {
	*x = PriceInfo{}
	mi := &file_chains_sol_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceInfo) ProtoMessage() {}

func (x *PriceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chains_sol_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceInfo.ProtoReflect.Descriptor instead.
func (*PriceInfo) Descriptor() ([]byte, []int) {
	return file_chains_sol_proto_rawDescGZIP(), []int{23}
}

func (x *PriceInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PriceInfo) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PriceInfo) GetPrice_1M() float64 {
	if x != nil {
		return x.Price_1M
	}
	return 0
}

func (x *PriceInfo) GetPrice_5M() float64 {
	if x != nil {
		return x.Price_5M
	}
	return 0
}

func (x *PriceInfo) GetPrice_1H() float64 {
	if x != nil {
		return x.Price_1H
	}
	return 0
}

func (x *PriceInfo) GetPrice_6H() float64 {
	if x != nil {
		return x.Price_6H
	}
	return 0
}

func (x *PriceInfo) GetPrice_24H() float64 {
	if x != nil {
		return x.Price_24H
	}
	return 0
}

func (x *PriceInfo) GetBuys_1M() float64 {
	if x != nil {
		return x.Buys_1M
	}
	return 0
}

func (x *PriceInfo) GetBuys_5M() float64 {
	if x != nil {
		return x.Buys_5M
	}
	return 0
}

func (x *PriceInfo) GetBuys_1H() float64 {
	if x != nil {
		return x.Buys_1H
	}
	return 0
}

func (x *PriceInfo) GetBuys_6H() float64 {
	if x != nil {
		return x.Buys_6H
	}
	return 0
}

func (x *PriceInfo) GetBuys_24H() float64 {
	if x != nil {
		return x.Buys_24H
	}
	return 0
}

func (x *PriceInfo) GetSells_1M() float64 {
	if x != nil {
		return x.Sells_1M
	}
	return 0
}

func (x *PriceInfo) GetSells_5M() float64 {
	if x != nil {
		return x.Sells_5M
	}
	return 0
}

func (x *PriceInfo) GetSells_1H() float64 {
	if x != nil {
		return x.Sells_1H
	}
	return 0
}

func (x *PriceInfo) GetSells_6H() float64 {
	if x != nil {
		return x.Sells_6H
	}
	return 0
}

func (x *PriceInfo) GetSells_24H() float64 {
	if x != nil {
		return x.Sells_24H
	}
	return 0
}

func (x *PriceInfo) GetVolume_1M() float64 {
	if x != nil {
		return x.Volume_1M
	}
	return 0
}

func (x *PriceInfo) GetVolume_5M() float64 {
	if x != nil {
		return x.Volume_5M
	}
	return 0
}

func (x *PriceInfo) GetVolume_1H() float64 {
	if x != nil {
		return x.Volume_1H
	}
	return 0
}

func (x *PriceInfo) GetVolume_6H() float64 {
	if x != nil {
		return x.Volume_6H
	}
	return 0
}

func (x *PriceInfo) GetVolume_24H() float64 {
	if x != nil {
		return x.Volume_24H
	}
	return 0
}

func (x *PriceInfo) GetBuyVolume_1M() float64 {
	if x != nil {
		return x.BuyVolume_1M
	}
	return 0
}

func (x *PriceInfo) GetBuyVolume_5M() float64 {
	if x != nil {
		return x.BuyVolume_5M
	}
	return 0
}

func (x *PriceInfo) GetBuyVolume_1H() float64 {
	if x != nil {
		return x.BuyVolume_1H
	}
	return 0
}

func (x *PriceInfo) GetBuyVolume_6H() float64 {
	if x != nil {
		return x.BuyVolume_6H
	}
	return 0
}

func (x *PriceInfo) GetBuyVolume_24H() float64 {
	if x != nil {
		return x.BuyVolume_24H
	}
	return 0
}

func (x *PriceInfo) GetSellVolume_1M() float64 {
	if x != nil {
		return x.SellVolume_1M
	}
	return 0
}

func (x *PriceInfo) GetSellVolume_5M() float64 {
	if x != nil {
		return x.SellVolume_5M
	}
	return 0
}

func (x *PriceInfo) GetSellVolume_1H() float64 {
	if x != nil {
		return x.SellVolume_1H
	}
	return 0
}

func (x *PriceInfo) GetSellVolume_6H() float64 {
	if x != nil {
		return x.SellVolume_6H
	}
	return 0
}

func (x *PriceInfo) GetSellVolume_24H() float64 {
	if x != nil {
		return x.SellVolume_24H
	}
	return 0
}

func (x *PriceInfo) GetSwaps() int64 {
	if x != nil {
		return x.Swaps
	}
	return 0
}

func (x *PriceInfo) GetSells() int64 {
	if x != nil {
		return x.Sells
	}
	return 0
}

func (x *PriceInfo) GetBuys() int64 {
	if x != nil {
		return x.Buys
	}
	return 0
}

func (x *PriceInfo) GetMarketCap() float64 {
	if x != nil {
		return x.MarketCap
	}
	return 0
}

func (x *PriceInfo) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

var File_chains_sol_proto protoreflect.FileDescriptor

var file_chains_sol_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x2f, 0x73, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x73, 0x6f, 0x6c, 0x1a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1d, 0x0a, 0x07,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x24, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x2d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x78, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68,
	0x22, 0x24, 0x0a, 0x02, 0x54, 0x78, 0x12, 0x1e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x74, 0x78, 0x2e, 0x54, 0x78, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x48, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x26, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x2e, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x4a, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x78, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x1a, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x78, 0x2e, 0x52, 0x65, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x7f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4b, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x22, 0x3e, 0x0a, 0x17, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4b, 0x6c, 0x69, 0x6e, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x78, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4b, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x81, 0x03, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x75, 0x6d, 0x70, 0x5f, 0x6f, 0x72,
	0x5f, 0x72, 0x61, 0x79, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x75, 0x6d, 0x70, 0x4f, 0x72, 0x52, 0x61, 0x79, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x38, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x78, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0xc5,
	0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x70, 0x75, 0x6d, 0x70, 0x5f, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x79, 0x64, 0x69, 0x75,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x6d, 0x70, 0x4f, 0x72, 0x52,
	0x61, 0x79, 0x64, 0x69, 0x75, 0x6d, 0x22, 0x40, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x4d, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x74, 0x22, 0x55, 0x0a, 0x1a, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x6f, 0x6c,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0xe7, 0x01, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x32, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x34, 0x22, 0x55, 0x0a, 0x1a, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x6f,
	0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0xf8, 0x07, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x75, 0x73, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x55, 0x73, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x55, 0x73, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x6e, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x61, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x73, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x75, 0x79, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x73,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x75, 0x79, 0x43, 0x6f, 0x73, 0x74,
	0x55, 0x73, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x6f, 0x75,
	0x67, 0x68, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x13, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x6f, 0x6c, 0x64, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x6f, 0x6c, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x22, 0x83, 0x05, 0x0a, 0x14,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x69,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x69, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x78,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x12, 0x1d, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x73, 0x6f, 0x6c, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c,
	0x12, 0x20, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x73, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x03, 0x64,
	0x65, 0x76, 0x12, 0x2d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0xbe, 0x03, 0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x69,
	0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a,
	0x14, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0xc2, 0x02, 0x0a, 0x09, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x74, 0x6f, 0x70,
	0x5f, 0x31, 0x30, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x6f, 0x70, 0x31, 0x30, 0x48, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x77,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x22, 0xcc, 0x08, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x31,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x72, 0x69, 0x63, 0x65, 0x31, 0x6d,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x35, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x70, 0x72, 0x69, 0x63, 0x65, 0x35, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x31, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x31, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x36, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x72, 0x69, 0x63, 0x65, 0x36,
	0x68, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x32, 0x34, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x32, 0x34, 0x68, 0x12, 0x17,
	0x0a, 0x07, 0x62, 0x75, 0x79, 0x73, 0x5f, 0x31, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x62, 0x75, 0x79, 0x73, 0x31, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x75, 0x79, 0x73, 0x5f,
	0x35, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x62, 0x75, 0x79, 0x73, 0x35, 0x6d,
	0x12, 0x17, 0x0a, 0x07, 0x62, 0x75, 0x79, 0x73, 0x5f, 0x31, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x62, 0x75, 0x79, 0x73, 0x31, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x75, 0x79,
	0x73, 0x5f, 0x36, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x62, 0x75, 0x79, 0x73,
	0x36, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x73, 0x5f, 0x32, 0x34, 0x68, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x75, 0x79, 0x73, 0x32, 0x34, 0x68, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x31, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x31, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x6c,
	0x73, 0x5f, 0x35, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x6c,
	0x73, 0x35, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x31, 0x68, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x31, 0x68, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x36, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x36, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c,
	0x6c, 0x73, 0x5f, 0x32, 0x34, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x65,
	0x6c, 0x6c, 0x73, 0x32, 0x34, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x31, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x31, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x35, 0x6d,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x35, 0x6d,
	0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x31, 0x68, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x68, 0x12, 0x1b, 0x0a,
	0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x36, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x36, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x32, 0x34, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x34, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x75, 0x79,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x31, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x62, 0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x6d, 0x12, 0x22, 0x0a,
	0x0d, 0x62, 0x75, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x35, 0x6d, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x35,
	0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x75, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x31, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x31, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x75, 0x79, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x5f, 0x36, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x62, 0x75,
	0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x36, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x75, 0x79,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x32, 0x34, 0x68, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x34, 0x68, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x31,
	0x6d, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x31, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x35, 0x6d, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x73,
	0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x35, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x31, 0x68, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31,
	0x68, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x36, 0x68, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x36, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x6c, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x32, 0x34, 0x68, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x73, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x34, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x77, 0x61, 0x70, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x73, 0x77, 0x61, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62,
	0x75, 0x79, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x62, 0x75, 0x79, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x99, 0x08, 0x0a, 0x03, 0x53, 0x6f, 0x6c, 0x12, 0x23,
	0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x0c, 0x2e, 0x73, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x73, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x78, 0x42, 0x79, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x17, 0x2e, 0x73, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x78, 0x42, 0x79,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x73, 0x6f,
	0x6c, 0x2e, 0x54, 0x78, 0x12, 0x29, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x11, 0x2e,
	0x73, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0d, 0x2e, 0x73, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x11, 0x2e, 0x73, 0x6f, 0x6c, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x73, 0x6f,
	0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e, 0x73, 0x6f,
	0x6c, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x73, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x59, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x73, 0x6f,
	0x6c, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x79, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x73, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x73, 0x6f,
	0x6c, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x73, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4b, 0x6c, 0x69, 0x6e,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x73, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x4b, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4b, 0x6c,
	0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x73, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x73, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x58, 0x54, 0x6f, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x73, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x73, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x73, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x51, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x73, 0x6f, 0x6c, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x73, 0x6f,
	0x6c, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e,
	0x73, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x6f, 0x6c, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x2e, 0x73,
	0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x6f, 0x6c, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x73, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_chains_sol_proto_rawDescOnce sync.Once
	file_chains_sol_proto_rawDescData = file_chains_sol_proto_rawDesc
)

func file_chains_sol_proto_rawDescGZIP() []byte {
	file_chains_sol_proto_rawDescOnce.Do(func() {
		file_chains_sol_proto_rawDescData = protoimpl.X.CompressGZIP(file_chains_sol_proto_rawDescData)
	})
	return file_chains_sol_proto_rawDescData
}

var file_chains_sol_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_chains_sol_proto_goTypes = []any{
	(*Request)(nil),                         // 0: sol.Request
	(*Response)(nil),                        // 1: sol.Response
	(*GetTxByHashRequest)(nil),              // 2: sol.GetTxByHashRequest
	(*Tx)(nil),                              // 3: sol.Tx
	(*TradeRequest)(nil),                    // 4: sol.TradeRequest
	(*StartRequest)(nil),                    // 5: sol.StartRequest
	(*Page)(nil),                            // 6: sol.Page
	(*MarketListResponse)(nil),              // 7: sol.MarketListResponse
	(*RealTimeMarketListResponse)(nil),      // 8: sol.RealTimeMarketListResponse
	(*GetMarketKlineRequest)(nil),           // 9: sol.GetMarketKlineRequest
	(*MarketKlineListResponse)(nil),         // 10: sol.MarketKlineListResponse
	(*GetMarketListRequest)(nil),            // 11: sol.GetMarketListRequest
	(*GetMarketInfoRequest)(nil),            // 12: sol.GetMarketInfoRequest
	(*MarketInfoResponse)(nil),              // 13: sol.MarketInfoResponse
	(*GetMemeMarketListRequest)(nil),        // 14: sol.GetMemeMarketListRequest
	(*GetMarketInfoByQuoteMintRequest)(nil), // 15: sol.GetMarketInfoByQuoteMintRequest
	(*SearchCurrencyListResponse)(nil),      // 16: sol.SearchCurrencyListResponse
	(*Currency)(nil),                        // 17: sol.Currency
	(*MarketActivityListResponse)(nil),      // 18: sol.MarketActivityListResponse
	(*Activity)(nil),                        // 19: sol.Activity
	(*MarketDetailResponse)(nil),            // 20: sol.MarketDetailResponse
	(*Pool)(nil),                            // 21: sol.Pool
	(*Developer)(nil),                       // 22: sol.Developer
	(*PriceInfo)(nil),                       // 23: sol.PriceInfo
	(*tx.Tx)(nil),                           // 24: tx.Tx
	(*trade.TradeRequest)(nil),              // 25: trade.TradeRequest
	(*tx.Market)(nil),                       // 26: tx.Market
	(*tx.RealTimeMarket)(nil),               // 27: tx.RealTimeMarket
	(*tx.MarketKline)(nil),                  // 28: tx.MarketKline
}
var file_chains_sol_proto_depIdxs = []int32{
	24, // 0: sol.Tx.result:type_name -> tx.Tx
	25, // 1: sol.TradeRequest.trade_request:type_name -> trade.TradeRequest
	26, // 2: sol.MarketListResponse.list:type_name -> tx.Market
	27, // 3: sol.RealTimeMarketListResponse.list:type_name -> tx.RealTimeMarket
	28, // 4: sol.MarketKlineListResponse.list:type_name -> tx.MarketKline
	26, // 5: sol.MarketInfoResponse.market:type_name -> tx.Market
	17, // 6: sol.SearchCurrencyListResponse.list:type_name -> sol.Currency
	19, // 7: sol.MarketActivityListResponse.list:type_name -> sol.Activity
	21, // 8: sol.MarketDetailResponse.pool:type_name -> sol.Pool
	22, // 9: sol.MarketDetailResponse.dev:type_name -> sol.Developer
	23, // 10: sol.MarketDetailResponse.price_info:type_name -> sol.PriceInfo
	0,  // 11: sol.Sol.Ping:input_type -> sol.Request
	2,  // 12: sol.Sol.GetTxByHash:input_type -> sol.GetTxByHashRequest
	5,  // 13: sol.Sol.Start:input_type -> sol.StartRequest
	4,  // 14: sol.Sol.Trade:input_type -> sol.TradeRequest
	12, // 15: sol.Sol.GetMarketInfo:input_type -> sol.GetMarketInfoRequest
	15, // 16: sol.Sol.GetMarketInfoByQuoteMint:input_type -> sol.GetMarketInfoByQuoteMintRequest
	11, // 17: sol.Sol.GetMarketList:input_type -> sol.GetMarketListRequest
	9,  // 18: sol.Sol.GetMarketKlineList:input_type -> sol.GetMarketKlineRequest
	11, // 19: sol.Sol.GetTrendingMarket:input_type -> sol.GetMarketListRequest
	11, // 20: sol.Sol.GetXTopMarketList:input_type -> sol.GetMarketListRequest
	11, // 21: sol.Sol.GetMemeMarketList:input_type -> sol.GetMarketListRequest
	11, // 22: sol.Sol.GetFollowMarketList:input_type -> sol.GetMarketListRequest
	11, // 23: sol.Sol.SearchCurrencyList:input_type -> sol.GetMarketListRequest
	11, // 24: sol.Sol.MarketActivityList:input_type -> sol.GetMarketListRequest
	11, // 25: sol.Sol.GetMarketDetail:input_type -> sol.GetMarketListRequest
	1,  // 26: sol.Sol.Ping:output_type -> sol.Response
	3,  // 27: sol.Sol.GetTxByHash:output_type -> sol.Tx
	1,  // 28: sol.Sol.Start:output_type -> sol.Response
	1,  // 29: sol.Sol.Trade:output_type -> sol.Response
	13, // 30: sol.Sol.GetMarketInfo:output_type -> sol.MarketInfoResponse
	13, // 31: sol.Sol.GetMarketInfoByQuoteMint:output_type -> sol.MarketInfoResponse
	7,  // 32: sol.Sol.GetMarketList:output_type -> sol.MarketListResponse
	10, // 33: sol.Sol.GetMarketKlineList:output_type -> sol.MarketKlineListResponse
	8,  // 34: sol.Sol.GetTrendingMarket:output_type -> sol.RealTimeMarketListResponse
	8,  // 35: sol.Sol.GetXTopMarketList:output_type -> sol.RealTimeMarketListResponse
	8,  // 36: sol.Sol.GetMemeMarketList:output_type -> sol.RealTimeMarketListResponse
	8,  // 37: sol.Sol.GetFollowMarketList:output_type -> sol.RealTimeMarketListResponse
	16, // 38: sol.Sol.SearchCurrencyList:output_type -> sol.SearchCurrencyListResponse
	18, // 39: sol.Sol.MarketActivityList:output_type -> sol.MarketActivityListResponse
	20, // 40: sol.Sol.GetMarketDetail:output_type -> sol.MarketDetailResponse
	26, // [26:41] is the sub-list for method output_type
	11, // [11:26] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_chains_sol_proto_init() }
func file_chains_sol_proto_init() {
	if File_chains_sol_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chains_sol_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chains_sol_proto_goTypes,
		DependencyIndexes: file_chains_sol_proto_depIdxs,
		MessageInfos:      file_chains_sol_proto_msgTypes,
	}.Build()
	File_chains_sol_proto = out.File
	file_chains_sol_proto_rawDesc = nil
	file_chains_sol_proto_goTypes = nil
	file_chains_sol_proto_depIdxs = nil
}
