// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.5
// Source: sol.proto

package solclient

import (
	"context"

	"github.com/simance-ai/smdx/rpcx/chains/sol/sol"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Activity                        = sol.Activity
	Currency                        = sol.Currency
	Developer                       = sol.Developer
	GetMarketInfoByQuoteMintRequest = sol.GetMarketInfoByQuoteMintRequest
	GetMarketInfoRequest            = sol.GetMarketInfoRequest
	GetMarketKlineRequest           = sol.GetMarketKlineRequest
	GetMarketListRequest            = sol.GetMarketListRequest
	GetMemeMarketListRequest        = sol.GetMemeMarketListRequest
	GetTxByHashRequest              = sol.GetTxByHashRequest
	MarketActivityListResponse      = sol.MarketActivityListResponse
	MarketDetailResponse            = sol.MarketDetailResponse
	MarketInfoResponse              = sol.MarketInfoResponse
	MarketKlineListResponse         = sol.MarketKlineListResponse
	MarketListResponse              = sol.MarketListResponse
	Page                            = sol.Page
	Pool                            = sol.Pool
	PriceInfo                       = sol.PriceInfo
	RealTimeMarketListResponse      = sol.RealTimeMarketListResponse
	Request                         = sol.Request
	Response                        = sol.Response
	SearchCurrencyListResponse      = sol.SearchCurrencyListResponse
	StartRequest                    = sol.StartRequest
	TradeRequest                    = sol.TradeRequest
	Tx                              = sol.Tx

	Sol interface {
		Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
		GetTxByHash(ctx context.Context, in *GetTxByHashRequest, opts ...grpc.CallOption) (*Tx, error)
		Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*Response, error)
		Trade(ctx context.Context, in *TradeRequest, opts ...grpc.CallOption) (*Response, error)
		GetMarketInfo(ctx context.Context, in *GetMarketInfoRequest, opts ...grpc.CallOption) (*MarketInfoResponse, error)
		GetMarketInfoByQuoteMint(ctx context.Context, in *GetMarketInfoByQuoteMintRequest, opts ...grpc.CallOption) (*MarketInfoResponse, error)
		GetMarketList(ctx context.Context, in *GetMarketListRequest, opts ...grpc.CallOption) (*MarketListResponse, error)
		GetMarketKlineList(ctx context.Context, in *GetMarketKlineRequest, opts ...grpc.CallOption) (*MarketKlineListResponse, error)
		GetTrendingMarket(ctx context.Context, in *GetMarketListRequest, opts ...grpc.CallOption) (*RealTimeMarketListResponse, error)
		GetXTopMarketList(ctx context.Context, in *GetMarketListRequest, opts ...grpc.CallOption) (*RealTimeMarketListResponse, error)
		GetMemeMarketList(ctx context.Context, in *GetMarketListRequest, opts ...grpc.CallOption) (*RealTimeMarketListResponse, error)
		GetFollowMarketList(ctx context.Context, in *GetMarketListRequest, opts ...grpc.CallOption) (*RealTimeMarketListResponse, error)
		SearchCurrencyList(ctx context.Context, in *GetMarketListRequest, opts ...grpc.CallOption) (*SearchCurrencyListResponse, error)
		MarketActivityList(ctx context.Context, in *GetMarketListRequest, opts ...grpc.CallOption) (*MarketActivityListResponse, error)
		GetMarketDetail(ctx context.Context, in *GetMarketListRequest, opts ...grpc.CallOption) (*MarketDetailResponse, error)
	}

	defaultSol struct {
		cli zrpc.Client
	}
)

func NewSol(cli zrpc.Client) Sol {
	return &defaultSol{
		cli: cli,
	}
}

func (m *defaultSol) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	client := sol.NewSolClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

func (m *defaultSol) GetTxByHash(ctx context.Context, in *GetTxByHashRequest, opts ...grpc.CallOption) (*Tx, error) {
	client := sol.NewSolClient(m.cli.Conn())
	return client.GetTxByHash(ctx, in, opts...)
}

func (m *defaultSol) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*Response, error) {
	client := sol.NewSolClient(m.cli.Conn())
	return client.Start(ctx, in, opts...)
}

func (m *defaultSol) Trade(ctx context.Context, in *TradeRequest, opts ...grpc.CallOption) (*Response, error) {
	client := sol.NewSolClient(m.cli.Conn())
	return client.Trade(ctx, in, opts...)
}

func (m *defaultSol) GetMarketInfo(ctx context.Context, in *GetMarketInfoRequest, opts ...grpc.CallOption) (*MarketInfoResponse, error) {
	client := sol.NewSolClient(m.cli.Conn())
	return client.GetMarketInfo(ctx, in, opts...)
}

func (m *defaultSol) GetMarketInfoByQuoteMint(ctx context.Context, in *GetMarketInfoByQuoteMintRequest, opts ...grpc.CallOption) (*MarketInfoResponse, error) {
	client := sol.NewSolClient(m.cli.Conn())
	return client.GetMarketInfoByQuoteMint(ctx, in, opts...)
}

func (m *defaultSol) GetMarketList(ctx context.Context, in *GetMarketListRequest, opts ...grpc.CallOption) (*MarketListResponse, error) {
	client := sol.NewSolClient(m.cli.Conn())
	return client.GetMarketList(ctx, in, opts...)
}

func (m *defaultSol) GetMarketKlineList(ctx context.Context, in *GetMarketKlineRequest, opts ...grpc.CallOption) (*MarketKlineListResponse, error) {
	client := sol.NewSolClient(m.cli.Conn())
	return client.GetMarketKlineList(ctx, in, opts...)
}

func (m *defaultSol) GetTrendingMarket(ctx context.Context, in *GetMarketListRequest, opts ...grpc.CallOption) (*RealTimeMarketListResponse, error) {
	client := sol.NewSolClient(m.cli.Conn())
	return client.GetTrendingMarket(ctx, in, opts...)
}

func (m *defaultSol) GetXTopMarketList(ctx context.Context, in *GetMarketListRequest, opts ...grpc.CallOption) (*RealTimeMarketListResponse, error) {
	client := sol.NewSolClient(m.cli.Conn())
	return client.GetXTopMarketList(ctx, in, opts...)
}

func (m *defaultSol) GetMemeMarketList(ctx context.Context, in *GetMarketListRequest, opts ...grpc.CallOption) (*RealTimeMarketListResponse, error) {
	client := sol.NewSolClient(m.cli.Conn())
	return client.GetMemeMarketList(ctx, in, opts...)
}

func (m *defaultSol) GetFollowMarketList(ctx context.Context, in *GetMarketListRequest, opts ...grpc.CallOption) (*RealTimeMarketListResponse, error) {
	client := sol.NewSolClient(m.cli.Conn())
	return client.GetFollowMarketList(ctx, in, opts...)
}

func (m *defaultSol) SearchCurrencyList(ctx context.Context, in *GetMarketListRequest, opts ...grpc.CallOption) (*SearchCurrencyListResponse, error) {
	client := sol.NewSolClient(m.cli.Conn())
	return client.SearchCurrencyList(ctx, in, opts...)
}

func (m *defaultSol) MarketActivityList(ctx context.Context, in *GetMarketListRequest, opts ...grpc.CallOption) (*MarketActivityListResponse, error) {
	client := sol.NewSolClient(m.cli.Conn())
	return client.MarketActivityList(ctx, in, opts...)
}

func (m *defaultSol) GetMarketDetail(ctx context.Context, in *GetMarketListRequest, opts ...grpc.CallOption) (*MarketDetailResponse, error) {
	client := sol.NewSolClient(m.cli.Conn())
	return client.GetMarketDetail(ctx, in, opts...)
}
