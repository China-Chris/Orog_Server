// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbx

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/simance-ai/smdx/rpcx/chains/sol/internal/dao/model"
)

func newMarketKline30m(db *gorm.DB, opts ...gen.DOOption) marketKline30m {
	_marketKline30m := marketKline30m{}

	_marketKline30m.marketKline30mDo.UseDB(db, opts...)
	_marketKline30m.marketKline30mDo.UseModel(&model.MarketKline30m{})

	tableName := _marketKline30m.marketKline30mDo.TableName()
	_marketKline30m.ALL = field.NewAsterisk(tableName)
	_marketKline30m.MarketAddress = field.NewString(tableName, "market_address")
	_marketKline30m.O = field.NewFloat64(tableName, "o")
	_marketKline30m.H = field.NewFloat64(tableName, "h")
	_marketKline30m.L = field.NewFloat64(tableName, "l")
	_marketKline30m.C = field.NewFloat64(tableName, "c")
	_marketKline30m.V = field.NewFloat64(tableName, "v")
	_marketKline30m.Timestamp = field.NewTime(tableName, "timestamp")
	_marketKline30m.UpdatedAt = field.NewTime(tableName, "updated_at")
	_marketKline30m.CreatedAt = field.NewTime(tableName, "created_at")

	_marketKline30m.fillFieldMap()

	return _marketKline30m
}

type marketKline30m struct {
	marketKline30mDo marketKline30mDo

	ALL           field.Asterisk
	MarketAddress field.String
	O             field.Float64
	H             field.Float64
	L             field.Float64
	C             field.Float64
	V             field.Float64
	Timestamp     field.Time
	UpdatedAt     field.Time
	CreatedAt     field.Time

	fieldMap map[string]field.Expr
}

func (m marketKline30m) Table(newTableName string) *marketKline30m {
	m.marketKline30mDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m marketKline30m) As(alias string) *marketKline30m {
	m.marketKline30mDo.DO = *(m.marketKline30mDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *marketKline30m) updateTableName(table string) *marketKline30m {
	m.ALL = field.NewAsterisk(table)
	m.MarketAddress = field.NewString(table, "market_address")
	m.O = field.NewFloat64(table, "o")
	m.H = field.NewFloat64(table, "h")
	m.L = field.NewFloat64(table, "l")
	m.C = field.NewFloat64(table, "c")
	m.V = field.NewFloat64(table, "v")
	m.Timestamp = field.NewTime(table, "timestamp")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.CreatedAt = field.NewTime(table, "created_at")

	m.fillFieldMap()

	return m
}

func (m *marketKline30m) WithContext(ctx context.Context) *marketKline30mDo {
	return m.marketKline30mDo.WithContext(ctx)
}

func (m marketKline30m) TableName() string { return m.marketKline30mDo.TableName() }

func (m marketKline30m) Alias() string { return m.marketKline30mDo.Alias() }

func (m marketKline30m) Columns(cols ...field.Expr) gen.Columns {
	return m.marketKline30mDo.Columns(cols...)
}

func (m *marketKline30m) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *marketKline30m) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 9)
	m.fieldMap["market_address"] = m.MarketAddress
	m.fieldMap["o"] = m.O
	m.fieldMap["h"] = m.H
	m.fieldMap["l"] = m.L
	m.fieldMap["c"] = m.C
	m.fieldMap["v"] = m.V
	m.fieldMap["timestamp"] = m.Timestamp
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["created_at"] = m.CreatedAt
}

func (m marketKline30m) clone(db *gorm.DB) marketKline30m {
	m.marketKline30mDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m marketKline30m) replaceDB(db *gorm.DB) marketKline30m {
	m.marketKline30mDo.ReplaceDB(db)
	return m
}

type marketKline30mDo struct{ gen.DO }

func (m marketKline30mDo) Debug() *marketKline30mDo {
	return m.withDO(m.DO.Debug())
}

func (m marketKline30mDo) WithContext(ctx context.Context) *marketKline30mDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m marketKline30mDo) ReadDB() *marketKline30mDo {
	return m.Clauses(dbresolver.Read)
}

func (m marketKline30mDo) WriteDB() *marketKline30mDo {
	return m.Clauses(dbresolver.Write)
}

func (m marketKline30mDo) Session(config *gorm.Session) *marketKline30mDo {
	return m.withDO(m.DO.Session(config))
}

func (m marketKline30mDo) Clauses(conds ...clause.Expression) *marketKline30mDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m marketKline30mDo) Returning(value interface{}, columns ...string) *marketKline30mDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m marketKline30mDo) Not(conds ...gen.Condition) *marketKline30mDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m marketKline30mDo) Or(conds ...gen.Condition) *marketKline30mDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m marketKline30mDo) Select(conds ...field.Expr) *marketKline30mDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m marketKline30mDo) Where(conds ...gen.Condition) *marketKline30mDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m marketKline30mDo) Order(conds ...field.Expr) *marketKline30mDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m marketKline30mDo) Distinct(cols ...field.Expr) *marketKline30mDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m marketKline30mDo) Omit(cols ...field.Expr) *marketKline30mDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m marketKline30mDo) Join(table schema.Tabler, on ...field.Expr) *marketKline30mDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m marketKline30mDo) LeftJoin(table schema.Tabler, on ...field.Expr) *marketKline30mDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m marketKline30mDo) RightJoin(table schema.Tabler, on ...field.Expr) *marketKline30mDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m marketKline30mDo) Group(cols ...field.Expr) *marketKline30mDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m marketKline30mDo) Having(conds ...gen.Condition) *marketKline30mDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m marketKline30mDo) Limit(limit int) *marketKline30mDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m marketKline30mDo) Offset(offset int) *marketKline30mDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m marketKline30mDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *marketKline30mDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m marketKline30mDo) Unscoped() *marketKline30mDo {
	return m.withDO(m.DO.Unscoped())
}

func (m marketKline30mDo) Create(values ...*model.MarketKline30m) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m marketKline30mDo) CreateInBatches(values []*model.MarketKline30m, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m marketKline30mDo) Save(values ...*model.MarketKline30m) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m marketKline30mDo) First() (*model.MarketKline30m, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketKline30m), nil
	}
}

func (m marketKline30mDo) Take() (*model.MarketKline30m, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketKline30m), nil
	}
}

func (m marketKline30mDo) Last() (*model.MarketKline30m, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketKline30m), nil
	}
}

func (m marketKline30mDo) Find() ([]*model.MarketKline30m, error) {
	result, err := m.DO.Find()
	return result.([]*model.MarketKline30m), err
}

func (m marketKline30mDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MarketKline30m, err error) {
	buf := make([]*model.MarketKline30m, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m marketKline30mDo) FindInBatches(result *[]*model.MarketKline30m, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m marketKline30mDo) Attrs(attrs ...field.AssignExpr) *marketKline30mDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m marketKline30mDo) Assign(attrs ...field.AssignExpr) *marketKline30mDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m marketKline30mDo) Joins(fields ...field.RelationField) *marketKline30mDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m marketKline30mDo) Preload(fields ...field.RelationField) *marketKline30mDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m marketKline30mDo) FirstOrInit() (*model.MarketKline30m, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketKline30m), nil
	}
}

func (m marketKline30mDo) FirstOrCreate() (*model.MarketKline30m, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketKline30m), nil
	}
}

func (m marketKline30mDo) FindByPage(offset int, limit int) (result []*model.MarketKline30m, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m marketKline30mDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m marketKline30mDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m marketKline30mDo) Delete(models ...*model.MarketKline30m) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *marketKline30mDo) withDO(do gen.Dao) *marketKline30mDo {
	m.DO = *do.(*gen.DO)
	return m
}
