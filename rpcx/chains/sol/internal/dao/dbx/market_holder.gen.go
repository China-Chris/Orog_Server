// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbx

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/simance-ai/smdx/rpcx/chains/sol/internal/dao/model"
)

func newMarketHolder(db *gorm.DB, opts ...gen.DOOption) marketHolder {
	_marketHolder := marketHolder{}

	_marketHolder.marketHolderDo.UseDB(db, opts...)
	_marketHolder.marketHolderDo.UseModel(&model.MarketHolder{})

	tableName := _marketHolder.marketHolderDo.TableName()
	_marketHolder.ALL = field.NewAsterisk(tableName)
	_marketHolder.MarketID = field.NewInt64(tableName, "market_id")
	_marketHolder.MarketAddress = field.NewString(tableName, "market_address")
	_marketHolder.CreatedTimestamp = field.NewTime(tableName, "created_timestamp")
	_marketHolder.QuoteAmount = field.NewFloat64(tableName, "quote_amount")
	_marketHolder.BaseAmount = field.NewFloat64(tableName, "base_amount")
	_marketHolder.CreatedAt = field.NewTime(tableName, "created_at")

	_marketHolder.fillFieldMap()

	return _marketHolder
}

type marketHolder struct {
	marketHolderDo marketHolderDo

	ALL              field.Asterisk
	MarketID         field.Int64
	MarketAddress    field.String
	CreatedTimestamp field.Time
	QuoteAmount      field.Float64
	BaseAmount       field.Float64
	CreatedAt        field.Time

	fieldMap map[string]field.Expr
}

func (m marketHolder) Table(newTableName string) *marketHolder {
	m.marketHolderDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m marketHolder) As(alias string) *marketHolder {
	m.marketHolderDo.DO = *(m.marketHolderDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *marketHolder) updateTableName(table string) *marketHolder {
	m.ALL = field.NewAsterisk(table)
	m.MarketID = field.NewInt64(table, "market_id")
	m.MarketAddress = field.NewString(table, "market_address")
	m.CreatedTimestamp = field.NewTime(table, "created_timestamp")
	m.QuoteAmount = field.NewFloat64(table, "quote_amount")
	m.BaseAmount = field.NewFloat64(table, "base_amount")
	m.CreatedAt = field.NewTime(table, "created_at")

	m.fillFieldMap()

	return m
}

func (m *marketHolder) WithContext(ctx context.Context) *marketHolderDo {
	return m.marketHolderDo.WithContext(ctx)
}

func (m marketHolder) TableName() string { return m.marketHolderDo.TableName() }

func (m marketHolder) Alias() string { return m.marketHolderDo.Alias() }

func (m marketHolder) Columns(cols ...field.Expr) gen.Columns {
	return m.marketHolderDo.Columns(cols...)
}

func (m *marketHolder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *marketHolder) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 6)
	m.fieldMap["market_id"] = m.MarketID
	m.fieldMap["market_address"] = m.MarketAddress
	m.fieldMap["created_timestamp"] = m.CreatedTimestamp
	m.fieldMap["quote_amount"] = m.QuoteAmount
	m.fieldMap["base_amount"] = m.BaseAmount
	m.fieldMap["created_at"] = m.CreatedAt
}

func (m marketHolder) clone(db *gorm.DB) marketHolder {
	m.marketHolderDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m marketHolder) replaceDB(db *gorm.DB) marketHolder {
	m.marketHolderDo.ReplaceDB(db)
	return m
}

type marketHolderDo struct{ gen.DO }

func (m marketHolderDo) Debug() *marketHolderDo {
	return m.withDO(m.DO.Debug())
}

func (m marketHolderDo) WithContext(ctx context.Context) *marketHolderDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m marketHolderDo) ReadDB() *marketHolderDo {
	return m.Clauses(dbresolver.Read)
}

func (m marketHolderDo) WriteDB() *marketHolderDo {
	return m.Clauses(dbresolver.Write)
}

func (m marketHolderDo) Session(config *gorm.Session) *marketHolderDo {
	return m.withDO(m.DO.Session(config))
}

func (m marketHolderDo) Clauses(conds ...clause.Expression) *marketHolderDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m marketHolderDo) Returning(value interface{}, columns ...string) *marketHolderDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m marketHolderDo) Not(conds ...gen.Condition) *marketHolderDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m marketHolderDo) Or(conds ...gen.Condition) *marketHolderDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m marketHolderDo) Select(conds ...field.Expr) *marketHolderDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m marketHolderDo) Where(conds ...gen.Condition) *marketHolderDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m marketHolderDo) Order(conds ...field.Expr) *marketHolderDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m marketHolderDo) Distinct(cols ...field.Expr) *marketHolderDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m marketHolderDo) Omit(cols ...field.Expr) *marketHolderDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m marketHolderDo) Join(table schema.Tabler, on ...field.Expr) *marketHolderDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m marketHolderDo) LeftJoin(table schema.Tabler, on ...field.Expr) *marketHolderDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m marketHolderDo) RightJoin(table schema.Tabler, on ...field.Expr) *marketHolderDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m marketHolderDo) Group(cols ...field.Expr) *marketHolderDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m marketHolderDo) Having(conds ...gen.Condition) *marketHolderDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m marketHolderDo) Limit(limit int) *marketHolderDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m marketHolderDo) Offset(offset int) *marketHolderDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m marketHolderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *marketHolderDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m marketHolderDo) Unscoped() *marketHolderDo {
	return m.withDO(m.DO.Unscoped())
}

func (m marketHolderDo) Create(values ...*model.MarketHolder) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m marketHolderDo) CreateInBatches(values []*model.MarketHolder, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m marketHolderDo) Save(values ...*model.MarketHolder) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m marketHolderDo) First() (*model.MarketHolder, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketHolder), nil
	}
}

func (m marketHolderDo) Take() (*model.MarketHolder, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketHolder), nil
	}
}

func (m marketHolderDo) Last() (*model.MarketHolder, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketHolder), nil
	}
}

func (m marketHolderDo) Find() ([]*model.MarketHolder, error) {
	result, err := m.DO.Find()
	return result.([]*model.MarketHolder), err
}

func (m marketHolderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MarketHolder, err error) {
	buf := make([]*model.MarketHolder, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m marketHolderDo) FindInBatches(result *[]*model.MarketHolder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m marketHolderDo) Attrs(attrs ...field.AssignExpr) *marketHolderDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m marketHolderDo) Assign(attrs ...field.AssignExpr) *marketHolderDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m marketHolderDo) Joins(fields ...field.RelationField) *marketHolderDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m marketHolderDo) Preload(fields ...field.RelationField) *marketHolderDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m marketHolderDo) FirstOrInit() (*model.MarketHolder, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketHolder), nil
	}
}

func (m marketHolderDo) FirstOrCreate() (*model.MarketHolder, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketHolder), nil
	}
}

func (m marketHolderDo) FindByPage(offset int, limit int) (result []*model.MarketHolder, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m marketHolderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m marketHolderDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m marketHolderDo) Delete(models ...*model.MarketHolder) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *marketHolderDo) withDO(do gen.Dao) *marketHolderDo {
	m.DO = *do.(*gen.DO)
	return m
}
