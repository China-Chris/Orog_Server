// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbx

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                  db,
		Market:              newMarket(db, opts...),
		MarketAuditMedium:   newMarketAuditMedium(db, opts...),
		MarketKline1:        newMarketKline1(db, opts...),
		MarketKline12h:      newMarketKline12h(db, opts...),
		MarketKline15m:      newMarketKline15m(db, opts...),
		MarketKline1d:       newMarketKline1d(db, opts...),
		MarketKline1h:       newMarketKline1h(db, opts...),
		MarketKline1m:       newMarketKline1m(db, opts...),
		MarketKline30m:      newMarketKline30m(db, opts...),
		MarketKline4h:       newMarketKline4h(db, opts...),
		MarketKline5m:       newMarketKline5m(db, opts...),
		MarketKline6h:       newMarketKline6h(db, opts...),
		MarketRealTimeDatum: newMarketRealTimeDatum(db, opts...),
		MarketTx:            newMarketTx(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Market              market
	MarketAuditMedium   marketAuditMedium
	MarketKline1        marketKline1
	MarketKline12h      marketKline12h
	MarketKline15m      marketKline15m
	MarketKline1d       marketKline1d
	MarketKline1h       marketKline1h
	MarketKline1m       marketKline1m
	MarketKline30m      marketKline30m
	MarketKline4h       marketKline4h
	MarketKline5m       marketKline5m
	MarketKline6h       marketKline6h
	MarketRealTimeDatum marketRealTimeDatum
	MarketTx            marketTx
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		Market:              q.Market.clone(db),
		MarketAuditMedium:   q.MarketAuditMedium.clone(db),
		MarketKline1:        q.MarketKline1.clone(db),
		MarketKline12h:      q.MarketKline12h.clone(db),
		MarketKline15m:      q.MarketKline15m.clone(db),
		MarketKline1d:       q.MarketKline1d.clone(db),
		MarketKline1h:       q.MarketKline1h.clone(db),
		MarketKline1m:       q.MarketKline1m.clone(db),
		MarketKline30m:      q.MarketKline30m.clone(db),
		MarketKline4h:       q.MarketKline4h.clone(db),
		MarketKline5m:       q.MarketKline5m.clone(db),
		MarketKline6h:       q.MarketKline6h.clone(db),
		MarketRealTimeDatum: q.MarketRealTimeDatum.clone(db),
		MarketTx:            q.MarketTx.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		Market:              q.Market.replaceDB(db),
		MarketAuditMedium:   q.MarketAuditMedium.replaceDB(db),
		MarketKline1:        q.MarketKline1.replaceDB(db),
		MarketKline12h:      q.MarketKline12h.replaceDB(db),
		MarketKline15m:      q.MarketKline15m.replaceDB(db),
		MarketKline1d:       q.MarketKline1d.replaceDB(db),
		MarketKline1h:       q.MarketKline1h.replaceDB(db),
		MarketKline1m:       q.MarketKline1m.replaceDB(db),
		MarketKline30m:      q.MarketKline30m.replaceDB(db),
		MarketKline4h:       q.MarketKline4h.replaceDB(db),
		MarketKline5m:       q.MarketKline5m.replaceDB(db),
		MarketKline6h:       q.MarketKline6h.replaceDB(db),
		MarketRealTimeDatum: q.MarketRealTimeDatum.replaceDB(db),
		MarketTx:            q.MarketTx.replaceDB(db),
	}
}

type queryCtx struct {
	Market              *marketDo
	MarketAuditMedium   *marketAuditMediumDo
	MarketKline1        *marketKline1Do
	MarketKline12h      *marketKline12hDo
	MarketKline15m      *marketKline15mDo
	MarketKline1d       *marketKline1dDo
	MarketKline1h       *marketKline1hDo
	MarketKline1m       *marketKline1mDo
	MarketKline30m      *marketKline30mDo
	MarketKline4h       *marketKline4hDo
	MarketKline5m       *marketKline5mDo
	MarketKline6h       *marketKline6hDo
	MarketRealTimeDatum *marketRealTimeDatumDo
	MarketTx            *marketTxDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Market:              q.Market.WithContext(ctx),
		MarketAuditMedium:   q.MarketAuditMedium.WithContext(ctx),
		MarketKline1:        q.MarketKline1.WithContext(ctx),
		MarketKline12h:      q.MarketKline12h.WithContext(ctx),
		MarketKline15m:      q.MarketKline15m.WithContext(ctx),
		MarketKline1d:       q.MarketKline1d.WithContext(ctx),
		MarketKline1h:       q.MarketKline1h.WithContext(ctx),
		MarketKline1m:       q.MarketKline1m.WithContext(ctx),
		MarketKline30m:      q.MarketKline30m.WithContext(ctx),
		MarketKline4h:       q.MarketKline4h.WithContext(ctx),
		MarketKline5m:       q.MarketKline5m.WithContext(ctx),
		MarketKline6h:       q.MarketKline6h.WithContext(ctx),
		MarketRealTimeDatum: q.MarketRealTimeDatum.WithContext(ctx),
		MarketTx:            q.MarketTx.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
