// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbx

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/simance-ai/smdx/rpcx/chains/sol/internal/dao/model"
)

func newMarketTx(db *gorm.DB, opts ...gen.DOOption) marketTx {
	_marketTx := marketTx{}

	_marketTx.marketTxDo.UseDB(db, opts...)
	_marketTx.marketTxDo.UseModel(&model.MarketTx{})

	tableName := _marketTx.marketTxDo.TableName()
	_marketTx.ALL = field.NewAsterisk(tableName)
	_marketTx.MarketAddress = field.NewString(tableName, "market_address")
	_marketTx.QuoteAmount = field.NewFloat64(tableName, "quote_amount")
	_marketTx.Volume = field.NewFloat64(tableName, "volume")
	_marketTx.QuotePrice = field.NewFloat64(tableName, "quote_price")
	_marketTx.TxType = field.NewInt32(tableName, "tx_type")
	_marketTx.BasePrice = field.NewFloat64(tableName, "base_price")
	_marketTx.TxHash = field.NewString(tableName, "tx_hash")
	_marketTx.Slot = field.NewInt32(tableName, "slot")
	_marketTx.QuoteAddress = field.NewString(tableName, "quote_address")
	_marketTx.MakerAddress = field.NewString(tableName, "maker_address")
	_marketTx.BaseAmount = field.NewFloat64(tableName, "base_amount")
	_marketTx.CreatedTimestamp = field.NewTime(tableName, "created_timestamp")
	_marketTx.CreatedAt = field.NewTime(tableName, "created_at")

	_marketTx.fillFieldMap()

	return _marketTx
}

type marketTx struct {
	marketTxDo marketTxDo

	ALL              field.Asterisk
	MarketAddress    field.String
	QuoteAmount      field.Float64
	Volume           field.Float64
	QuotePrice       field.Float64
	TxType           field.Int32
	BasePrice        field.Float64
	TxHash           field.String
	Slot             field.Int32
	QuoteAddress     field.String
	MakerAddress     field.String
	BaseAmount       field.Float64
	CreatedTimestamp field.Time
	CreatedAt        field.Time

	fieldMap map[string]field.Expr
}

func (m marketTx) Table(newTableName string) *marketTx {
	m.marketTxDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m marketTx) As(alias string) *marketTx {
	m.marketTxDo.DO = *(m.marketTxDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *marketTx) updateTableName(table string) *marketTx {
	m.ALL = field.NewAsterisk(table)
	m.MarketAddress = field.NewString(table, "market_address")
	m.QuoteAmount = field.NewFloat64(table, "quote_amount")
	m.Volume = field.NewFloat64(table, "volume")
	m.QuotePrice = field.NewFloat64(table, "quote_price")
	m.TxType = field.NewInt32(table, "tx_type")
	m.BasePrice = field.NewFloat64(table, "base_price")
	m.TxHash = field.NewString(table, "tx_hash")
	m.Slot = field.NewInt32(table, "slot")
	m.QuoteAddress = field.NewString(table, "quote_address")
	m.MakerAddress = field.NewString(table, "maker_address")
	m.BaseAmount = field.NewFloat64(table, "base_amount")
	m.CreatedTimestamp = field.NewTime(table, "created_timestamp")
	m.CreatedAt = field.NewTime(table, "created_at")

	m.fillFieldMap()

	return m
}

func (m *marketTx) WithContext(ctx context.Context) *marketTxDo { return m.marketTxDo.WithContext(ctx) }

func (m marketTx) TableName() string { return m.marketTxDo.TableName() }

func (m marketTx) Alias() string { return m.marketTxDo.Alias() }

func (m marketTx) Columns(cols ...field.Expr) gen.Columns { return m.marketTxDo.Columns(cols...) }

func (m *marketTx) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *marketTx) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 13)
	m.fieldMap["market_address"] = m.MarketAddress
	m.fieldMap["quote_amount"] = m.QuoteAmount
	m.fieldMap["volume"] = m.Volume
	m.fieldMap["quote_price"] = m.QuotePrice
	m.fieldMap["tx_type"] = m.TxType
	m.fieldMap["base_price"] = m.BasePrice
	m.fieldMap["tx_hash"] = m.TxHash
	m.fieldMap["slot"] = m.Slot
	m.fieldMap["quote_address"] = m.QuoteAddress
	m.fieldMap["maker_address"] = m.MakerAddress
	m.fieldMap["base_amount"] = m.BaseAmount
	m.fieldMap["created_timestamp"] = m.CreatedTimestamp
	m.fieldMap["created_at"] = m.CreatedAt
}

func (m marketTx) clone(db *gorm.DB) marketTx {
	m.marketTxDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m marketTx) replaceDB(db *gorm.DB) marketTx {
	m.marketTxDo.ReplaceDB(db)
	return m
}

type marketTxDo struct{ gen.DO }

func (m marketTxDo) Debug() *marketTxDo {
	return m.withDO(m.DO.Debug())
}

func (m marketTxDo) WithContext(ctx context.Context) *marketTxDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m marketTxDo) ReadDB() *marketTxDo {
	return m.Clauses(dbresolver.Read)
}

func (m marketTxDo) WriteDB() *marketTxDo {
	return m.Clauses(dbresolver.Write)
}

func (m marketTxDo) Session(config *gorm.Session) *marketTxDo {
	return m.withDO(m.DO.Session(config))
}

func (m marketTxDo) Clauses(conds ...clause.Expression) *marketTxDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m marketTxDo) Returning(value interface{}, columns ...string) *marketTxDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m marketTxDo) Not(conds ...gen.Condition) *marketTxDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m marketTxDo) Or(conds ...gen.Condition) *marketTxDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m marketTxDo) Select(conds ...field.Expr) *marketTxDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m marketTxDo) Where(conds ...gen.Condition) *marketTxDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m marketTxDo) Order(conds ...field.Expr) *marketTxDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m marketTxDo) Distinct(cols ...field.Expr) *marketTxDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m marketTxDo) Omit(cols ...field.Expr) *marketTxDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m marketTxDo) Join(table schema.Tabler, on ...field.Expr) *marketTxDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m marketTxDo) LeftJoin(table schema.Tabler, on ...field.Expr) *marketTxDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m marketTxDo) RightJoin(table schema.Tabler, on ...field.Expr) *marketTxDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m marketTxDo) Group(cols ...field.Expr) *marketTxDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m marketTxDo) Having(conds ...gen.Condition) *marketTxDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m marketTxDo) Limit(limit int) *marketTxDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m marketTxDo) Offset(offset int) *marketTxDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m marketTxDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *marketTxDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m marketTxDo) Unscoped() *marketTxDo {
	return m.withDO(m.DO.Unscoped())
}

func (m marketTxDo) Create(values ...*model.MarketTx) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m marketTxDo) CreateInBatches(values []*model.MarketTx, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m marketTxDo) Save(values ...*model.MarketTx) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m marketTxDo) First() (*model.MarketTx, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketTx), nil
	}
}

func (m marketTxDo) Take() (*model.MarketTx, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketTx), nil
	}
}

func (m marketTxDo) Last() (*model.MarketTx, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketTx), nil
	}
}

func (m marketTxDo) Find() ([]*model.MarketTx, error) {
	result, err := m.DO.Find()
	return result.([]*model.MarketTx), err
}

func (m marketTxDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MarketTx, err error) {
	buf := make([]*model.MarketTx, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m marketTxDo) FindInBatches(result *[]*model.MarketTx, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m marketTxDo) Attrs(attrs ...field.AssignExpr) *marketTxDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m marketTxDo) Assign(attrs ...field.AssignExpr) *marketTxDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m marketTxDo) Joins(fields ...field.RelationField) *marketTxDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m marketTxDo) Preload(fields ...field.RelationField) *marketTxDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m marketTxDo) FirstOrInit() (*model.MarketTx, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketTx), nil
	}
}

func (m marketTxDo) FirstOrCreate() (*model.MarketTx, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketTx), nil
	}
}

func (m marketTxDo) FindByPage(offset int, limit int) (result []*model.MarketTx, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m marketTxDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m marketTxDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m marketTxDo) Delete(models ...*model.MarketTx) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *marketTxDo) withDO(do gen.Dao) *marketTxDo {
	m.DO = *do.(*gen.DO)
	return m
}
