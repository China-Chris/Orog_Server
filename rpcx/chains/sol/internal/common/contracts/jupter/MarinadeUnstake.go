// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MarinadeUnstake is the `marinadeUnstake` instruction.
type MarinadeUnstake struct {

	// [0] = [] marinadeFinanceProgram
	//
	// [1] = [WRITE] state
	//
	// [2] = [WRITE] msolMint
	//
	// [3] = [WRITE] liqPoolSolLegPda
	//
	// [4] = [WRITE] liqPoolMsolLeg
	//
	// [5] = [WRITE] treasuryMsolAccount
	//
	// [6] = [WRITE] getMsolFrom
	//
	// [7] = [] getMsolFromAuthority
	//
	// [8] = [WRITE] transferSolTo
	//
	// [9] = [] systemProgram
	//
	// [10] = [] tokenProgram
	//
	// [11] = [WRITE] userWsolTokenAccount
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMarinadeUnstakeInstructionBuilder creates a new `MarinadeUnstake` instruction builder.
func NewMarinadeUnstakeInstructionBuilder() *MarinadeUnstake {
	nd := &MarinadeUnstake{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
	return nd
}

// SetMarinadeFinanceProgramAccount sets the "marinadeFinanceProgram" account.
func (inst *MarinadeUnstake) SetMarinadeFinanceProgramAccount(marinadeFinanceProgram ag_solanago.PublicKey) *MarinadeUnstake {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(marinadeFinanceProgram)
	return inst
}

// GetMarinadeFinanceProgramAccount gets the "marinadeFinanceProgram" account.
func (inst *MarinadeUnstake) GetMarinadeFinanceProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStateAccount sets the "state" account.
func (inst *MarinadeUnstake) SetStateAccount(state ag_solanago.PublicKey) *MarinadeUnstake {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(state).WRITE()
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *MarinadeUnstake) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMsolMintAccount sets the "msolMint" account.
func (inst *MarinadeUnstake) SetMsolMintAccount(msolMint ag_solanago.PublicKey) *MarinadeUnstake {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(msolMint).WRITE()
	return inst
}

// GetMsolMintAccount gets the "msolMint" account.
func (inst *MarinadeUnstake) GetMsolMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetLiqPoolSolLegPdaAccount sets the "liqPoolSolLegPda" account.
func (inst *MarinadeUnstake) SetLiqPoolSolLegPdaAccount(liqPoolSolLegPda ag_solanago.PublicKey) *MarinadeUnstake {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(liqPoolSolLegPda).WRITE()
	return inst
}

// GetLiqPoolSolLegPdaAccount gets the "liqPoolSolLegPda" account.
func (inst *MarinadeUnstake) GetLiqPoolSolLegPdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetLiqPoolMsolLegAccount sets the "liqPoolMsolLeg" account.
func (inst *MarinadeUnstake) SetLiqPoolMsolLegAccount(liqPoolMsolLeg ag_solanago.PublicKey) *MarinadeUnstake {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(liqPoolMsolLeg).WRITE()
	return inst
}

// GetLiqPoolMsolLegAccount gets the "liqPoolMsolLeg" account.
func (inst *MarinadeUnstake) GetLiqPoolMsolLegAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTreasuryMsolAccountAccount sets the "treasuryMsolAccount" account.
func (inst *MarinadeUnstake) SetTreasuryMsolAccountAccount(treasuryMsolAccount ag_solanago.PublicKey) *MarinadeUnstake {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(treasuryMsolAccount).WRITE()
	return inst
}

// GetTreasuryMsolAccountAccount gets the "treasuryMsolAccount" account.
func (inst *MarinadeUnstake) GetTreasuryMsolAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetGetMsolFromAccount sets the "getMsolFrom" account.
func (inst *MarinadeUnstake) SetGetMsolFromAccount(getMsolFrom ag_solanago.PublicKey) *MarinadeUnstake {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(getMsolFrom).WRITE()
	return inst
}

// GetGetMsolFromAccount gets the "getMsolFrom" account.
func (inst *MarinadeUnstake) GetGetMsolFromAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetGetMsolFromAuthorityAccount sets the "getMsolFromAuthority" account.
func (inst *MarinadeUnstake) SetGetMsolFromAuthorityAccount(getMsolFromAuthority ag_solanago.PublicKey) *MarinadeUnstake {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(getMsolFromAuthority)
	return inst
}

// GetGetMsolFromAuthorityAccount gets the "getMsolFromAuthority" account.
func (inst *MarinadeUnstake) GetGetMsolFromAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTransferSolToAccount sets the "transferSolTo" account.
func (inst *MarinadeUnstake) SetTransferSolToAccount(transferSolTo ag_solanago.PublicKey) *MarinadeUnstake {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(transferSolTo).WRITE()
	return inst
}

// GetTransferSolToAccount gets the "transferSolTo" account.
func (inst *MarinadeUnstake) GetTransferSolToAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *MarinadeUnstake) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *MarinadeUnstake {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *MarinadeUnstake) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *MarinadeUnstake) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *MarinadeUnstake {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *MarinadeUnstake) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetUserWsolTokenAccountAccount sets the "userWsolTokenAccount" account.
func (inst *MarinadeUnstake) SetUserWsolTokenAccountAccount(userWsolTokenAccount ag_solanago.PublicKey) *MarinadeUnstake {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(userWsolTokenAccount).WRITE()
	return inst
}

// GetUserWsolTokenAccountAccount gets the "userWsolTokenAccount" account.
func (inst *MarinadeUnstake) GetUserWsolTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

func (inst MarinadeUnstake) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MarinadeUnstake,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MarinadeUnstake) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MarinadeUnstake) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.MarinadeFinanceProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.MsolMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.LiqPoolSolLegPda is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.LiqPoolMsolLeg is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TreasuryMsolAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.GetMsolFrom is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.GetMsolFromAuthority is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TransferSolTo is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.UserWsolTokenAccount is not set")
		}
	}
	return nil
}

func (inst *MarinadeUnstake) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MarinadeUnstake")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=12]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("marinadeFinanceProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                 state", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("              msolMint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("      liqPoolSolLegPda", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        liqPoolMsolLeg", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("          treasuryMsol", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("           getMsolFrom", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("  getMsolFromAuthority", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("         transferSolTo", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("         userWsolToken", inst.AccountMetaSlice.Get(11)))
					})
				})
		})
}

func (obj MarinadeUnstake) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *MarinadeUnstake) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewMarinadeUnstakeInstruction declares a new MarinadeUnstake instruction with the provided parameters and accounts.
func NewMarinadeUnstakeInstruction(
	// Accounts:
	marinadeFinanceProgram ag_solanago.PublicKey,
	state ag_solanago.PublicKey,
	msolMint ag_solanago.PublicKey,
	liqPoolSolLegPda ag_solanago.PublicKey,
	liqPoolMsolLeg ag_solanago.PublicKey,
	treasuryMsolAccount ag_solanago.PublicKey,
	getMsolFrom ag_solanago.PublicKey,
	getMsolFromAuthority ag_solanago.PublicKey,
	transferSolTo ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	userWsolTokenAccount ag_solanago.PublicKey) *MarinadeUnstake {
	return NewMarinadeUnstakeInstructionBuilder().
		SetMarinadeFinanceProgramAccount(marinadeFinanceProgram).
		SetStateAccount(state).
		SetMsolMintAccount(msolMint).
		SetLiqPoolSolLegPdaAccount(liqPoolSolLegPda).
		SetLiqPoolMsolLegAccount(liqPoolMsolLeg).
		SetTreasuryMsolAccountAccount(treasuryMsolAccount).
		SetGetMsolFromAccount(getMsolFrom).
		SetGetMsolFromAuthorityAccount(getMsolFromAuthority).
		SetTransferSolToAccount(transferSolTo).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetUserWsolTokenAccountAccount(userWsolTokenAccount)
}
