// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SenchaSwap is the `senchaSwap` instruction.
type SenchaSwap struct {

	// [0] = [] swapProgram
	//
	// [1] = [] tokenProgram
	//
	// [2] = [WRITE] swap
	//
	// [3] = [] userAuthority
	//
	// [4] = [WRITE] inputUserAccount
	//
	// [5] = [WRITE] inputTokenAccount
	//
	// [6] = [WRITE] inputFeesAccount
	//
	// [7] = [WRITE] outputUserAccount
	//
	// [8] = [WRITE] outputTokenAccount
	//
	// [9] = [WRITE] outputFeesAccount
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSenchaSwapInstructionBuilder creates a new `SenchaSwap` instruction builder.
func NewSenchaSwapInstructionBuilder() *SenchaSwap {
	nd := &SenchaSwap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetSwapProgramAccount sets the "swapProgram" account.
func (inst *SenchaSwap) SetSwapProgramAccount(swapProgram ag_solanago.PublicKey) *SenchaSwap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(swapProgram)
	return inst
}

// GetSwapProgramAccount gets the "swapProgram" account.
func (inst *SenchaSwap) GetSwapProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *SenchaSwap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *SenchaSwap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *SenchaSwap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSwapAccount sets the "swap" account.
func (inst *SenchaSwap) SetSwapAccount(swap ag_solanago.PublicKey) *SenchaSwap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(swap).WRITE()
	return inst
}

// GetSwapAccount gets the "swap" account.
func (inst *SenchaSwap) GetSwapAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUserAuthorityAccount sets the "userAuthority" account.
func (inst *SenchaSwap) SetUserAuthorityAccount(userAuthority ag_solanago.PublicKey) *SenchaSwap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(userAuthority)
	return inst
}

// GetUserAuthorityAccount gets the "userAuthority" account.
func (inst *SenchaSwap) GetUserAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetInputUserAccountAccount sets the "inputUserAccount" account.
func (inst *SenchaSwap) SetInputUserAccountAccount(inputUserAccount ag_solanago.PublicKey) *SenchaSwap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(inputUserAccount).WRITE()
	return inst
}

// GetInputUserAccountAccount gets the "inputUserAccount" account.
func (inst *SenchaSwap) GetInputUserAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetInputTokenAccountAccount sets the "inputTokenAccount" account.
func (inst *SenchaSwap) SetInputTokenAccountAccount(inputTokenAccount ag_solanago.PublicKey) *SenchaSwap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(inputTokenAccount).WRITE()
	return inst
}

// GetInputTokenAccountAccount gets the "inputTokenAccount" account.
func (inst *SenchaSwap) GetInputTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetInputFeesAccountAccount sets the "inputFeesAccount" account.
func (inst *SenchaSwap) SetInputFeesAccountAccount(inputFeesAccount ag_solanago.PublicKey) *SenchaSwap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(inputFeesAccount).WRITE()
	return inst
}

// GetInputFeesAccountAccount gets the "inputFeesAccount" account.
func (inst *SenchaSwap) GetInputFeesAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetOutputUserAccountAccount sets the "outputUserAccount" account.
func (inst *SenchaSwap) SetOutputUserAccountAccount(outputUserAccount ag_solanago.PublicKey) *SenchaSwap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(outputUserAccount).WRITE()
	return inst
}

// GetOutputUserAccountAccount gets the "outputUserAccount" account.
func (inst *SenchaSwap) GetOutputUserAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetOutputTokenAccountAccount sets the "outputTokenAccount" account.
func (inst *SenchaSwap) SetOutputTokenAccountAccount(outputTokenAccount ag_solanago.PublicKey) *SenchaSwap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(outputTokenAccount).WRITE()
	return inst
}

// GetOutputTokenAccountAccount gets the "outputTokenAccount" account.
func (inst *SenchaSwap) GetOutputTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetOutputFeesAccountAccount sets the "outputFeesAccount" account.
func (inst *SenchaSwap) SetOutputFeesAccountAccount(outputFeesAccount ag_solanago.PublicKey) *SenchaSwap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(outputFeesAccount).WRITE()
	return inst
}

// GetOutputFeesAccountAccount gets the "outputFeesAccount" account.
func (inst *SenchaSwap) GetOutputFeesAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst SenchaSwap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SenchaSwap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SenchaSwap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SenchaSwap) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.SwapProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Swap is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.UserAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.InputUserAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.InputTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.InputFeesAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.OutputUserAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.OutputTokenAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.OutputFeesAccount is not set")
		}
	}
	return nil
}

func (inst *SenchaSwap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SenchaSwap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("  swapProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta(" tokenProgram", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         swap", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("userAuthority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("    inputUser", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("   inputToken", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("    inputFees", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("   outputUser", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("  outputToken", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("   outputFees", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj SenchaSwap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *SenchaSwap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewSenchaSwapInstruction declares a new SenchaSwap instruction with the provided parameters and accounts.
func NewSenchaSwapInstruction(
	// Accounts:
	swapProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	swap ag_solanago.PublicKey,
	userAuthority ag_solanago.PublicKey,
	inputUserAccount ag_solanago.PublicKey,
	inputTokenAccount ag_solanago.PublicKey,
	inputFeesAccount ag_solanago.PublicKey,
	outputUserAccount ag_solanago.PublicKey,
	outputTokenAccount ag_solanago.PublicKey,
	outputFeesAccount ag_solanago.PublicKey) *SenchaSwap {
	return NewSenchaSwapInstructionBuilder().
		SetSwapProgramAccount(swapProgram).
		SetTokenProgramAccount(tokenProgram).
		SetSwapAccount(swap).
		SetUserAuthorityAccount(userAuthority).
		SetInputUserAccountAccount(inputUserAccount).
		SetInputTokenAccountAccount(inputTokenAccount).
		SetInputFeesAccountAccount(inputFeesAccount).
		SetOutputUserAccountAccount(outputUserAccount).
		SetOutputTokenAccountAccount(outputTokenAccount).
		SetOutputFeesAccountAccount(outputFeesAccount)
}
