// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CremaSwap is the `cremaSwap` instruction.
type CremaSwap struct {

	// [0] = [] swapProgram
	//
	// [1] = [] clmmConfig
	//
	// [2] = [WRITE] clmmpool
	//
	// [3] = [] tokenA
	//
	// [4] = [] tokenB
	//
	// [5] = [WRITE] accountA
	//
	// [6] = [WRITE] accountB
	//
	// [7] = [WRITE] tokenAVault
	//
	// [8] = [WRITE] tokenBVault
	//
	// [9] = [WRITE] tickArrayMap
	//
	// [10] = [] owner
	//
	// [11] = [] partner
	//
	// [12] = [WRITE] partnerAtaA
	//
	// [13] = [WRITE] partnerAtaB
	//
	// [14] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCremaSwapInstructionBuilder creates a new `CremaSwap` instruction builder.
func NewCremaSwapInstructionBuilder() *CremaSwap {
	nd := &CremaSwap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 15),
	}
	return nd
}

// SetSwapProgramAccount sets the "swapProgram" account.
func (inst *CremaSwap) SetSwapProgramAccount(swapProgram ag_solanago.PublicKey) *CremaSwap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(swapProgram)
	return inst
}

// GetSwapProgramAccount gets the "swapProgram" account.
func (inst *CremaSwap) GetSwapProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetClmmConfigAccount sets the "clmmConfig" account.
func (inst *CremaSwap) SetClmmConfigAccount(clmmConfig ag_solanago.PublicKey) *CremaSwap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(clmmConfig)
	return inst
}

// GetClmmConfigAccount gets the "clmmConfig" account.
func (inst *CremaSwap) GetClmmConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetClmmpoolAccount sets the "clmmpool" account.
func (inst *CremaSwap) SetClmmpoolAccount(clmmpool ag_solanago.PublicKey) *CremaSwap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(clmmpool).WRITE()
	return inst
}

// GetClmmpoolAccount gets the "clmmpool" account.
func (inst *CremaSwap) GetClmmpoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenAAccount sets the "tokenA" account.
func (inst *CremaSwap) SetTokenAAccount(tokenA ag_solanago.PublicKey) *CremaSwap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenA)
	return inst
}

// GetTokenAAccount gets the "tokenA" account.
func (inst *CremaSwap) GetTokenAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenBAccount sets the "tokenB" account.
func (inst *CremaSwap) SetTokenBAccount(tokenB ag_solanago.PublicKey) *CremaSwap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenB)
	return inst
}

// GetTokenBAccount gets the "tokenB" account.
func (inst *CremaSwap) GetTokenBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetAccountAAccount sets the "accountA" account.
func (inst *CremaSwap) SetAccountAAccount(accountA ag_solanago.PublicKey) *CremaSwap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(accountA).WRITE()
	return inst
}

// GetAccountAAccount gets the "accountA" account.
func (inst *CremaSwap) GetAccountAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetAccountBAccount sets the "accountB" account.
func (inst *CremaSwap) SetAccountBAccount(accountB ag_solanago.PublicKey) *CremaSwap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(accountB).WRITE()
	return inst
}

// GetAccountBAccount gets the "accountB" account.
func (inst *CremaSwap) GetAccountBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenAVaultAccount sets the "tokenAVault" account.
func (inst *CremaSwap) SetTokenAVaultAccount(tokenAVault ag_solanago.PublicKey) *CremaSwap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenAVault).WRITE()
	return inst
}

// GetTokenAVaultAccount gets the "tokenAVault" account.
func (inst *CremaSwap) GetTokenAVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenBVaultAccount sets the "tokenBVault" account.
func (inst *CremaSwap) SetTokenBVaultAccount(tokenBVault ag_solanago.PublicKey) *CremaSwap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenBVault).WRITE()
	return inst
}

// GetTokenBVaultAccount gets the "tokenBVault" account.
func (inst *CremaSwap) GetTokenBVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTickArrayMapAccount sets the "tickArrayMap" account.
func (inst *CremaSwap) SetTickArrayMapAccount(tickArrayMap ag_solanago.PublicKey) *CremaSwap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tickArrayMap).WRITE()
	return inst
}

// GetTickArrayMapAccount gets the "tickArrayMap" account.
func (inst *CremaSwap) GetTickArrayMapAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetOwnerAccount sets the "owner" account.
func (inst *CremaSwap) SetOwnerAccount(owner ag_solanago.PublicKey) *CremaSwap {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(owner)
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *CremaSwap) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetPartnerAccount sets the "partner" account.
func (inst *CremaSwap) SetPartnerAccount(partner ag_solanago.PublicKey) *CremaSwap {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(partner)
	return inst
}

// GetPartnerAccount gets the "partner" account.
func (inst *CremaSwap) GetPartnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetPartnerAtaAAccount sets the "partnerAtaA" account.
func (inst *CremaSwap) SetPartnerAtaAAccount(partnerAtaA ag_solanago.PublicKey) *CremaSwap {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(partnerAtaA).WRITE()
	return inst
}

// GetPartnerAtaAAccount gets the "partnerAtaA" account.
func (inst *CremaSwap) GetPartnerAtaAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetPartnerAtaBAccount sets the "partnerAtaB" account.
func (inst *CremaSwap) SetPartnerAtaBAccount(partnerAtaB ag_solanago.PublicKey) *CremaSwap {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(partnerAtaB).WRITE()
	return inst
}

// GetPartnerAtaBAccount gets the "partnerAtaB" account.
func (inst *CremaSwap) GetPartnerAtaBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *CremaSwap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CremaSwap {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *CremaSwap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

func (inst CremaSwap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CremaSwap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CremaSwap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CremaSwap) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.SwapProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ClmmConfig is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Clmmpool is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenA is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenB is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.AccountA is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.AccountB is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenAVault is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenBVault is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TickArrayMap is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.Partner is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.PartnerAtaA is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.PartnerAtaB is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *CremaSwap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CremaSwap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=15]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta(" swapProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("  clmmConfig", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("    clmmpool", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("      tokenA", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("      tokenB", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("    accountA", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("    accountB", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta(" tokenAVault", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta(" tokenBVault", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("tickArrayMap", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("       owner", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("     partner", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta(" partnerAtaA", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta(" partnerAtaB", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("tokenProgram", inst.AccountMetaSlice.Get(14)))
					})
				})
		})
}

func (obj CremaSwap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CremaSwap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCremaSwapInstruction declares a new CremaSwap instruction with the provided parameters and accounts.
func NewCremaSwapInstruction(
	// Accounts:
	swapProgram ag_solanago.PublicKey,
	clmmConfig ag_solanago.PublicKey,
	clmmpool ag_solanago.PublicKey,
	tokenA ag_solanago.PublicKey,
	tokenB ag_solanago.PublicKey,
	accountA ag_solanago.PublicKey,
	accountB ag_solanago.PublicKey,
	tokenAVault ag_solanago.PublicKey,
	tokenBVault ag_solanago.PublicKey,
	tickArrayMap ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	partner ag_solanago.PublicKey,
	partnerAtaA ag_solanago.PublicKey,
	partnerAtaB ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *CremaSwap {
	return NewCremaSwapInstructionBuilder().
		SetSwapProgramAccount(swapProgram).
		SetClmmConfigAccount(clmmConfig).
		SetClmmpoolAccount(clmmpool).
		SetTokenAAccount(tokenA).
		SetTokenBAccount(tokenB).
		SetAccountAAccount(accountA).
		SetAccountBAccount(accountB).
		SetTokenAVaultAccount(tokenAVault).
		SetTokenBVaultAccount(tokenBVault).
		SetTickArrayMapAccount(tickArrayMap).
		SetOwnerAccount(owner).
		SetPartnerAccount(partner).
		SetPartnerAtaAAccount(partnerAtaA).
		SetPartnerAtaBAccount(partnerAtaB).
		SetTokenProgramAccount(tokenProgram)
}
