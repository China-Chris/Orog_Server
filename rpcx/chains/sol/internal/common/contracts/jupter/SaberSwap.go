// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SaberSwap is the `saberSwap` instruction.
type SaberSwap struct {

	// [0] = [] swapProgram
	//
	// [1] = [] tokenProgram
	//
	// [2] = [] swap
	//
	// [3] = [] swapAuthority
	//
	// [4] = [] userAuthority
	//
	// [5] = [WRITE] inputUserAccount
	//
	// [6] = [WRITE] inputTokenAccount
	//
	// [7] = [WRITE] outputUserAccount
	//
	// [8] = [WRITE] outputTokenAccount
	//
	// [9] = [WRITE] feesTokenAccount
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSaberSwapInstructionBuilder creates a new `SaberSwap` instruction builder.
func NewSaberSwapInstructionBuilder() *SaberSwap {
	nd := &SaberSwap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetSwapProgramAccount sets the "swapProgram" account.
func (inst *SaberSwap) SetSwapProgramAccount(swapProgram ag_solanago.PublicKey) *SaberSwap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(swapProgram)
	return inst
}

// GetSwapProgramAccount gets the "swapProgram" account.
func (inst *SaberSwap) GetSwapProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *SaberSwap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *SaberSwap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *SaberSwap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSwapAccount sets the "swap" account.
func (inst *SaberSwap) SetSwapAccount(swap ag_solanago.PublicKey) *SaberSwap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(swap)
	return inst
}

// GetSwapAccount gets the "swap" account.
func (inst *SaberSwap) GetSwapAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSwapAuthorityAccount sets the "swapAuthority" account.
func (inst *SaberSwap) SetSwapAuthorityAccount(swapAuthority ag_solanago.PublicKey) *SaberSwap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(swapAuthority)
	return inst
}

// GetSwapAuthorityAccount gets the "swapAuthority" account.
func (inst *SaberSwap) GetSwapAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetUserAuthorityAccount sets the "userAuthority" account.
func (inst *SaberSwap) SetUserAuthorityAccount(userAuthority ag_solanago.PublicKey) *SaberSwap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(userAuthority)
	return inst
}

// GetUserAuthorityAccount gets the "userAuthority" account.
func (inst *SaberSwap) GetUserAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetInputUserAccountAccount sets the "inputUserAccount" account.
func (inst *SaberSwap) SetInputUserAccountAccount(inputUserAccount ag_solanago.PublicKey) *SaberSwap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(inputUserAccount).WRITE()
	return inst
}

// GetInputUserAccountAccount gets the "inputUserAccount" account.
func (inst *SaberSwap) GetInputUserAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetInputTokenAccountAccount sets the "inputTokenAccount" account.
func (inst *SaberSwap) SetInputTokenAccountAccount(inputTokenAccount ag_solanago.PublicKey) *SaberSwap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(inputTokenAccount).WRITE()
	return inst
}

// GetInputTokenAccountAccount gets the "inputTokenAccount" account.
func (inst *SaberSwap) GetInputTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetOutputUserAccountAccount sets the "outputUserAccount" account.
func (inst *SaberSwap) SetOutputUserAccountAccount(outputUserAccount ag_solanago.PublicKey) *SaberSwap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(outputUserAccount).WRITE()
	return inst
}

// GetOutputUserAccountAccount gets the "outputUserAccount" account.
func (inst *SaberSwap) GetOutputUserAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetOutputTokenAccountAccount sets the "outputTokenAccount" account.
func (inst *SaberSwap) SetOutputTokenAccountAccount(outputTokenAccount ag_solanago.PublicKey) *SaberSwap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(outputTokenAccount).WRITE()
	return inst
}

// GetOutputTokenAccountAccount gets the "outputTokenAccount" account.
func (inst *SaberSwap) GetOutputTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetFeesTokenAccountAccount sets the "feesTokenAccount" account.
func (inst *SaberSwap) SetFeesTokenAccountAccount(feesTokenAccount ag_solanago.PublicKey) *SaberSwap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(feesTokenAccount).WRITE()
	return inst
}

// GetFeesTokenAccountAccount gets the "feesTokenAccount" account.
func (inst *SaberSwap) GetFeesTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst SaberSwap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SaberSwap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SaberSwap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SaberSwap) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.SwapProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Swap is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SwapAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.UserAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.InputUserAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.InputTokenAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.OutputUserAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.OutputTokenAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.FeesTokenAccount is not set")
		}
	}
	return nil
}

func (inst *SaberSwap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SaberSwap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("  swapProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta(" tokenProgram", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         swap", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("swapAuthority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("userAuthority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("    inputUser", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("   inputToken", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("   outputUser", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("  outputToken", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("    feesToken", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj SaberSwap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *SaberSwap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewSaberSwapInstruction declares a new SaberSwap instruction with the provided parameters and accounts.
func NewSaberSwapInstruction(
	// Accounts:
	swapProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	swap ag_solanago.PublicKey,
	swapAuthority ag_solanago.PublicKey,
	userAuthority ag_solanago.PublicKey,
	inputUserAccount ag_solanago.PublicKey,
	inputTokenAccount ag_solanago.PublicKey,
	outputUserAccount ag_solanago.PublicKey,
	outputTokenAccount ag_solanago.PublicKey,
	feesTokenAccount ag_solanago.PublicKey) *SaberSwap {
	return NewSaberSwapInstructionBuilder().
		SetSwapProgramAccount(swapProgram).
		SetTokenProgramAccount(tokenProgram).
		SetSwapAccount(swap).
		SetSwapAuthorityAccount(swapAuthority).
		SetUserAuthorityAccount(userAuthority).
		SetInputUserAccountAccount(inputUserAccount).
		SetInputTokenAccountAccount(inputTokenAccount).
		SetOutputUserAccountAccount(outputUserAccount).
		SetOutputTokenAccountAccount(outputTokenAccount).
		SetFeesTokenAccountAccount(feesTokenAccount)
}
