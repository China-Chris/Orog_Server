// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// RaydiumSwap is the `raydiumSwap` instruction.
type RaydiumSwap struct {

	// [0] = [] swapProgram
	//
	// [1] = [] tokenProgram
	//
	// [2] = [WRITE] ammId
	//
	// [3] = [] ammAuthority
	//
	// [4] = [WRITE] ammOpenOrders
	//
	// [5] = [WRITE] poolCoinTokenAccount
	//
	// [6] = [WRITE] poolPcTokenAccount
	//
	// [7] = [] serumProgramId
	//
	// [8] = [WRITE] serumMarket
	//
	// [9] = [WRITE] serumBids
	//
	// [10] = [WRITE] serumAsks
	//
	// [11] = [WRITE] serumEventQueue
	//
	// [12] = [WRITE] serumCoinVaultAccount
	//
	// [13] = [WRITE] serumPcVaultAccount
	//
	// [14] = [] serumVaultSigner
	//
	// [15] = [WRITE] userSourceTokenAccount
	//
	// [16] = [WRITE] userDestinationTokenAccount
	//
	// [17] = [] userSourceOwner
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewRaydiumSwapInstructionBuilder creates a new `RaydiumSwap` instruction builder.
func NewRaydiumSwapInstructionBuilder() *RaydiumSwap {
	nd := &RaydiumSwap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 18),
	}
	return nd
}

// SetSwapProgramAccount sets the "swapProgram" account.
func (inst *RaydiumSwap) SetSwapProgramAccount(swapProgram ag_solanago.PublicKey) *RaydiumSwap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(swapProgram)
	return inst
}

// GetSwapProgramAccount gets the "swapProgram" account.
func (inst *RaydiumSwap) GetSwapProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *RaydiumSwap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *RaydiumSwap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *RaydiumSwap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAmmIdAccount sets the "ammId" account.
func (inst *RaydiumSwap) SetAmmIdAccount(ammId ag_solanago.PublicKey) *RaydiumSwap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(ammId).WRITE()
	return inst
}

// GetAmmIdAccount gets the "ammId" account.
func (inst *RaydiumSwap) GetAmmIdAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAmmAuthorityAccount sets the "ammAuthority" account.
func (inst *RaydiumSwap) SetAmmAuthorityAccount(ammAuthority ag_solanago.PublicKey) *RaydiumSwap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(ammAuthority)
	return inst
}

// GetAmmAuthorityAccount gets the "ammAuthority" account.
func (inst *RaydiumSwap) GetAmmAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAmmOpenOrdersAccount sets the "ammOpenOrders" account.
func (inst *RaydiumSwap) SetAmmOpenOrdersAccount(ammOpenOrders ag_solanago.PublicKey) *RaydiumSwap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(ammOpenOrders).WRITE()
	return inst
}

// GetAmmOpenOrdersAccount gets the "ammOpenOrders" account.
func (inst *RaydiumSwap) GetAmmOpenOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetPoolCoinTokenAccountAccount sets the "poolCoinTokenAccount" account.
func (inst *RaydiumSwap) SetPoolCoinTokenAccountAccount(poolCoinTokenAccount ag_solanago.PublicKey) *RaydiumSwap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(poolCoinTokenAccount).WRITE()
	return inst
}

// GetPoolCoinTokenAccountAccount gets the "poolCoinTokenAccount" account.
func (inst *RaydiumSwap) GetPoolCoinTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPoolPcTokenAccountAccount sets the "poolPcTokenAccount" account.
func (inst *RaydiumSwap) SetPoolPcTokenAccountAccount(poolPcTokenAccount ag_solanago.PublicKey) *RaydiumSwap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(poolPcTokenAccount).WRITE()
	return inst
}

// GetPoolPcTokenAccountAccount gets the "poolPcTokenAccount" account.
func (inst *RaydiumSwap) GetPoolPcTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSerumProgramIdAccount sets the "serumProgramId" account.
func (inst *RaydiumSwap) SetSerumProgramIdAccount(serumProgramId ag_solanago.PublicKey) *RaydiumSwap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(serumProgramId)
	return inst
}

// GetSerumProgramIdAccount gets the "serumProgramId" account.
func (inst *RaydiumSwap) GetSerumProgramIdAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSerumMarketAccount sets the "serumMarket" account.
func (inst *RaydiumSwap) SetSerumMarketAccount(serumMarket ag_solanago.PublicKey) *RaydiumSwap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(serumMarket).WRITE()
	return inst
}

// GetSerumMarketAccount gets the "serumMarket" account.
func (inst *RaydiumSwap) GetSerumMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetSerumBidsAccount sets the "serumBids" account.
func (inst *RaydiumSwap) SetSerumBidsAccount(serumBids ag_solanago.PublicKey) *RaydiumSwap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(serumBids).WRITE()
	return inst
}

// GetSerumBidsAccount gets the "serumBids" account.
func (inst *RaydiumSwap) GetSerumBidsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetSerumAsksAccount sets the "serumAsks" account.
func (inst *RaydiumSwap) SetSerumAsksAccount(serumAsks ag_solanago.PublicKey) *RaydiumSwap {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(serumAsks).WRITE()
	return inst
}

// GetSerumAsksAccount gets the "serumAsks" account.
func (inst *RaydiumSwap) GetSerumAsksAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetSerumEventQueueAccount sets the "serumEventQueue" account.
func (inst *RaydiumSwap) SetSerumEventQueueAccount(serumEventQueue ag_solanago.PublicKey) *RaydiumSwap {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(serumEventQueue).WRITE()
	return inst
}

// GetSerumEventQueueAccount gets the "serumEventQueue" account.
func (inst *RaydiumSwap) GetSerumEventQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetSerumCoinVaultAccountAccount sets the "serumCoinVaultAccount" account.
func (inst *RaydiumSwap) SetSerumCoinVaultAccountAccount(serumCoinVaultAccount ag_solanago.PublicKey) *RaydiumSwap {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(serumCoinVaultAccount).WRITE()
	return inst
}

// GetSerumCoinVaultAccountAccount gets the "serumCoinVaultAccount" account.
func (inst *RaydiumSwap) GetSerumCoinVaultAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetSerumPcVaultAccountAccount sets the "serumPcVaultAccount" account.
func (inst *RaydiumSwap) SetSerumPcVaultAccountAccount(serumPcVaultAccount ag_solanago.PublicKey) *RaydiumSwap {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(serumPcVaultAccount).WRITE()
	return inst
}

// GetSerumPcVaultAccountAccount gets the "serumPcVaultAccount" account.
func (inst *RaydiumSwap) GetSerumPcVaultAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetSerumVaultSignerAccount sets the "serumVaultSigner" account.
func (inst *RaydiumSwap) SetSerumVaultSignerAccount(serumVaultSigner ag_solanago.PublicKey) *RaydiumSwap {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(serumVaultSigner)
	return inst
}

// GetSerumVaultSignerAccount gets the "serumVaultSigner" account.
func (inst *RaydiumSwap) GetSerumVaultSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetUserSourceTokenAccountAccount sets the "userSourceTokenAccount" account.
func (inst *RaydiumSwap) SetUserSourceTokenAccountAccount(userSourceTokenAccount ag_solanago.PublicKey) *RaydiumSwap {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(userSourceTokenAccount).WRITE()
	return inst
}

// GetUserSourceTokenAccountAccount gets the "userSourceTokenAccount" account.
func (inst *RaydiumSwap) GetUserSourceTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetUserDestinationTokenAccountAccount sets the "userDestinationTokenAccount" account.
func (inst *RaydiumSwap) SetUserDestinationTokenAccountAccount(userDestinationTokenAccount ag_solanago.PublicKey) *RaydiumSwap {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(userDestinationTokenAccount).WRITE()
	return inst
}

// GetUserDestinationTokenAccountAccount gets the "userDestinationTokenAccount" account.
func (inst *RaydiumSwap) GetUserDestinationTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetUserSourceOwnerAccount sets the "userSourceOwner" account.
func (inst *RaydiumSwap) SetUserSourceOwnerAccount(userSourceOwner ag_solanago.PublicKey) *RaydiumSwap {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(userSourceOwner)
	return inst
}

// GetUserSourceOwnerAccount gets the "userSourceOwner" account.
func (inst *RaydiumSwap) GetUserSourceOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

func (inst RaydiumSwap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_RaydiumSwap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst RaydiumSwap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *RaydiumSwap) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.SwapProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AmmId is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.AmmAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.AmmOpenOrders is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.PoolCoinTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.PoolPcTokenAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SerumProgramId is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SerumMarket is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.SerumBids is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.SerumAsks is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.SerumEventQueue is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.SerumCoinVaultAccount is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.SerumPcVaultAccount is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.SerumVaultSigner is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.UserSourceTokenAccount is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.UserDestinationTokenAccount is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.UserSourceOwner is not set")
		}
	}
	return nil
}

func (inst *RaydiumSwap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("RaydiumSwap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=18]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         swapProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        tokenProgram", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("               ammId", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        ammAuthority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       ammOpenOrders", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("       poolCoinToken", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("         poolPcToken", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("      serumProgramId", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("         serumMarket", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("           serumBids", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("           serumAsks", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("     serumEventQueue", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("      serumCoinVault", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("        serumPcVault", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("    serumVaultSigner", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("     userSourceToken", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("userDestinationToken", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("     userSourceOwner", inst.AccountMetaSlice.Get(17)))
					})
				})
		})
}

func (obj RaydiumSwap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *RaydiumSwap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewRaydiumSwapInstruction declares a new RaydiumSwap instruction with the provided parameters and accounts.
func NewRaydiumSwapInstruction(
	// Accounts:
	swapProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	ammId ag_solanago.PublicKey,
	ammAuthority ag_solanago.PublicKey,
	ammOpenOrders ag_solanago.PublicKey,
	poolCoinTokenAccount ag_solanago.PublicKey,
	poolPcTokenAccount ag_solanago.PublicKey,
	serumProgramId ag_solanago.PublicKey,
	serumMarket ag_solanago.PublicKey,
	serumBids ag_solanago.PublicKey,
	serumAsks ag_solanago.PublicKey,
	serumEventQueue ag_solanago.PublicKey,
	serumCoinVaultAccount ag_solanago.PublicKey,
	serumPcVaultAccount ag_solanago.PublicKey,
	serumVaultSigner ag_solanago.PublicKey,
	userSourceTokenAccount ag_solanago.PublicKey,
	userDestinationTokenAccount ag_solanago.PublicKey,
	userSourceOwner ag_solanago.PublicKey) *RaydiumSwap {
	return NewRaydiumSwapInstructionBuilder().
		SetSwapProgramAccount(swapProgram).
		SetTokenProgramAccount(tokenProgram).
		SetAmmIdAccount(ammId).
		SetAmmAuthorityAccount(ammAuthority).
		SetAmmOpenOrdersAccount(ammOpenOrders).
		SetPoolCoinTokenAccountAccount(poolCoinTokenAccount).
		SetPoolPcTokenAccountAccount(poolPcTokenAccount).
		SetSerumProgramIdAccount(serumProgramId).
		SetSerumMarketAccount(serumMarket).
		SetSerumBidsAccount(serumBids).
		SetSerumAsksAccount(serumAsks).
		SetSerumEventQueueAccount(serumEventQueue).
		SetSerumCoinVaultAccountAccount(serumCoinVaultAccount).
		SetSerumPcVaultAccountAccount(serumPcVaultAccount).
		SetSerumVaultSignerAccount(serumVaultSigner).
		SetUserSourceTokenAccountAccount(userSourceTokenAccount).
		SetUserDestinationTokenAccountAccount(userDestinationTokenAccount).
		SetUserSourceOwnerAccount(userSourceOwner)
}
