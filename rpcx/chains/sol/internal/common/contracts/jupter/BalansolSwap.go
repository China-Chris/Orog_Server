// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// BalansolSwap is the `balansolSwap` instruction.
type BalansolSwap struct {

	// [0] = [] swapProgram
	//
	// [1] = [WRITE] authority
	//
	// [2] = [WRITE] pool
	//
	// [3] = [WRITE] taxMan
	//
	// [4] = [] bidMint
	//
	// [5] = [] treasurer
	//
	// [6] = [WRITE] srcTreasury
	//
	// [7] = [WRITE] srcAssociatedTokenAccount
	//
	// [8] = [] askMint
	//
	// [9] = [WRITE] dstTreasury
	//
	// [10] = [WRITE] dstAssociatedTokenAccount
	//
	// [11] = [WRITE] dstTokenAccountTaxman
	//
	// [12] = [] systemProgram
	//
	// [13] = [] tokenProgram
	//
	// [14] = [] associatedTokenProgram
	//
	// [15] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewBalansolSwapInstructionBuilder creates a new `BalansolSwap` instruction builder.
func NewBalansolSwapInstructionBuilder() *BalansolSwap {
	nd := &BalansolSwap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 16),
	}
	return nd
}

// SetSwapProgramAccount sets the "swapProgram" account.
func (inst *BalansolSwap) SetSwapProgramAccount(swapProgram ag_solanago.PublicKey) *BalansolSwap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(swapProgram)
	return inst
}

// GetSwapProgramAccount gets the "swapProgram" account.
func (inst *BalansolSwap) GetSwapProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *BalansolSwap) SetAuthorityAccount(authority ag_solanago.PublicKey) *BalansolSwap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority).WRITE()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *BalansolSwap) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPoolAccount sets the "pool" account.
func (inst *BalansolSwap) SetPoolAccount(pool ag_solanago.PublicKey) *BalansolSwap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *BalansolSwap) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTaxManAccount sets the "taxMan" account.
func (inst *BalansolSwap) SetTaxManAccount(taxMan ag_solanago.PublicKey) *BalansolSwap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(taxMan).WRITE()
	return inst
}

// GetTaxManAccount gets the "taxMan" account.
func (inst *BalansolSwap) GetTaxManAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetBidMintAccount sets the "bidMint" account.
func (inst *BalansolSwap) SetBidMintAccount(bidMint ag_solanago.PublicKey) *BalansolSwap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(bidMint)
	return inst
}

// GetBidMintAccount gets the "bidMint" account.
func (inst *BalansolSwap) GetBidMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTreasurerAccount sets the "treasurer" account.
func (inst *BalansolSwap) SetTreasurerAccount(treasurer ag_solanago.PublicKey) *BalansolSwap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(treasurer)
	return inst
}

// GetTreasurerAccount gets the "treasurer" account.
func (inst *BalansolSwap) GetTreasurerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSrcTreasuryAccount sets the "srcTreasury" account.
func (inst *BalansolSwap) SetSrcTreasuryAccount(srcTreasury ag_solanago.PublicKey) *BalansolSwap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(srcTreasury).WRITE()
	return inst
}

// GetSrcTreasuryAccount gets the "srcTreasury" account.
func (inst *BalansolSwap) GetSrcTreasuryAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSrcAssociatedTokenAccountAccount sets the "srcAssociatedTokenAccount" account.
func (inst *BalansolSwap) SetSrcAssociatedTokenAccountAccount(srcAssociatedTokenAccount ag_solanago.PublicKey) *BalansolSwap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(srcAssociatedTokenAccount).WRITE()
	return inst
}

// GetSrcAssociatedTokenAccountAccount gets the "srcAssociatedTokenAccount" account.
func (inst *BalansolSwap) GetSrcAssociatedTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetAskMintAccount sets the "askMint" account.
func (inst *BalansolSwap) SetAskMintAccount(askMint ag_solanago.PublicKey) *BalansolSwap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(askMint)
	return inst
}

// GetAskMintAccount gets the "askMint" account.
func (inst *BalansolSwap) GetAskMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetDstTreasuryAccount sets the "dstTreasury" account.
func (inst *BalansolSwap) SetDstTreasuryAccount(dstTreasury ag_solanago.PublicKey) *BalansolSwap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(dstTreasury).WRITE()
	return inst
}

// GetDstTreasuryAccount gets the "dstTreasury" account.
func (inst *BalansolSwap) GetDstTreasuryAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetDstAssociatedTokenAccountAccount sets the "dstAssociatedTokenAccount" account.
func (inst *BalansolSwap) SetDstAssociatedTokenAccountAccount(dstAssociatedTokenAccount ag_solanago.PublicKey) *BalansolSwap {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(dstAssociatedTokenAccount).WRITE()
	return inst
}

// GetDstAssociatedTokenAccountAccount gets the "dstAssociatedTokenAccount" account.
func (inst *BalansolSwap) GetDstAssociatedTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetDstTokenAccountTaxmanAccount sets the "dstTokenAccountTaxman" account.
func (inst *BalansolSwap) SetDstTokenAccountTaxmanAccount(dstTokenAccountTaxman ag_solanago.PublicKey) *BalansolSwap {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(dstTokenAccountTaxman).WRITE()
	return inst
}

// GetDstTokenAccountTaxmanAccount gets the "dstTokenAccountTaxman" account.
func (inst *BalansolSwap) GetDstTokenAccountTaxmanAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *BalansolSwap) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *BalansolSwap {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *BalansolSwap) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *BalansolSwap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *BalansolSwap {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *BalansolSwap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *BalansolSwap) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *BalansolSwap {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *BalansolSwap) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetRentAccount sets the "rent" account.
func (inst *BalansolSwap) SetRentAccount(rent ag_solanago.PublicKey) *BalansolSwap {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *BalansolSwap) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

func (inst BalansolSwap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_BalansolSwap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst BalansolSwap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *BalansolSwap) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.SwapProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TaxMan is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.BidMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Treasurer is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SrcTreasury is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SrcAssociatedTokenAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.AskMint is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.DstTreasury is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.DstAssociatedTokenAccount is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.DstTokenAccountTaxman is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *BalansolSwap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("BalansolSwap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=16]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           swapProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("             authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                  pool", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                taxMan", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("               bidMint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("             treasurer", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("           srcTreasury", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("    srcAssociatedToken", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("               askMint", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("           dstTreasury", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("    dstAssociatedToken", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta(" dstTokenAccountTaxman", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("                  rent", inst.AccountMetaSlice.Get(15)))
					})
				})
		})
}

func (obj BalansolSwap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *BalansolSwap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewBalansolSwapInstruction declares a new BalansolSwap instruction with the provided parameters and accounts.
func NewBalansolSwapInstruction(
	// Accounts:
	swapProgram ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	pool ag_solanago.PublicKey,
	taxMan ag_solanago.PublicKey,
	bidMint ag_solanago.PublicKey,
	treasurer ag_solanago.PublicKey,
	srcTreasury ag_solanago.PublicKey,
	srcAssociatedTokenAccount ag_solanago.PublicKey,
	askMint ag_solanago.PublicKey,
	dstTreasury ag_solanago.PublicKey,
	dstAssociatedTokenAccount ag_solanago.PublicKey,
	dstTokenAccountTaxman ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *BalansolSwap {
	return NewBalansolSwapInstructionBuilder().
		SetSwapProgramAccount(swapProgram).
		SetAuthorityAccount(authority).
		SetPoolAccount(pool).
		SetTaxManAccount(taxMan).
		SetBidMintAccount(bidMint).
		SetTreasurerAccount(treasurer).
		SetSrcTreasuryAccount(srcTreasury).
		SetSrcAssociatedTokenAccountAccount(srcAssociatedTokenAccount).
		SetAskMintAccount(askMint).
		SetDstTreasuryAccount(dstTreasury).
		SetDstAssociatedTokenAccountAccount(dstAssociatedTokenAccount).
		SetDstTokenAccountTaxmanAccount(dstTokenAccountTaxman).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetRentAccount(rent)
}
