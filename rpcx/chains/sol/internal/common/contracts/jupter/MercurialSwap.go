// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MercurialSwap is the `mercurialSwap` instruction.
type MercurialSwap struct {

	// [0] = [] swapProgram
	//
	// [1] = [] swapState
	//
	// [2] = [] tokenProgram
	//
	// [3] = [] poolAuthority
	//
	// [4] = [] userTransferAuthority
	//
	// [5] = [WRITE] sourceTokenAccount
	//
	// [6] = [WRITE] destinationTokenAccount
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMercurialSwapInstructionBuilder creates a new `MercurialSwap` instruction builder.
func NewMercurialSwapInstructionBuilder() *MercurialSwap {
	nd := &MercurialSwap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetSwapProgramAccount sets the "swapProgram" account.
func (inst *MercurialSwap) SetSwapProgramAccount(swapProgram ag_solanago.PublicKey) *MercurialSwap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(swapProgram)
	return inst
}

// GetSwapProgramAccount gets the "swapProgram" account.
func (inst *MercurialSwap) GetSwapProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSwapStateAccount sets the "swapState" account.
func (inst *MercurialSwap) SetSwapStateAccount(swapState ag_solanago.PublicKey) *MercurialSwap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(swapState)
	return inst
}

// GetSwapStateAccount gets the "swapState" account.
func (inst *MercurialSwap) GetSwapStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *MercurialSwap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *MercurialSwap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *MercurialSwap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPoolAuthorityAccount sets the "poolAuthority" account.
func (inst *MercurialSwap) SetPoolAuthorityAccount(poolAuthority ag_solanago.PublicKey) *MercurialSwap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(poolAuthority)
	return inst
}

// GetPoolAuthorityAccount gets the "poolAuthority" account.
func (inst *MercurialSwap) GetPoolAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetUserTransferAuthorityAccount sets the "userTransferAuthority" account.
func (inst *MercurialSwap) SetUserTransferAuthorityAccount(userTransferAuthority ag_solanago.PublicKey) *MercurialSwap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(userTransferAuthority)
	return inst
}

// GetUserTransferAuthorityAccount gets the "userTransferAuthority" account.
func (inst *MercurialSwap) GetUserTransferAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSourceTokenAccountAccount sets the "sourceTokenAccount" account.
func (inst *MercurialSwap) SetSourceTokenAccountAccount(sourceTokenAccount ag_solanago.PublicKey) *MercurialSwap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(sourceTokenAccount).WRITE()
	return inst
}

// GetSourceTokenAccountAccount gets the "sourceTokenAccount" account.
func (inst *MercurialSwap) GetSourceTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetDestinationTokenAccountAccount sets the "destinationTokenAccount" account.
func (inst *MercurialSwap) SetDestinationTokenAccountAccount(destinationTokenAccount ag_solanago.PublicKey) *MercurialSwap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(destinationTokenAccount).WRITE()
	return inst
}

// GetDestinationTokenAccountAccount gets the "destinationTokenAccount" account.
func (inst *MercurialSwap) GetDestinationTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst MercurialSwap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MercurialSwap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MercurialSwap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MercurialSwap) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.SwapProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.SwapState is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PoolAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.UserTransferAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SourceTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.DestinationTokenAccount is not set")
		}
	}
	return nil
}

func (inst *MercurialSwap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MercurialSwap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          swapProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("            swapState", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         tokenProgram", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        poolAuthority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("userTransferAuthority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("          sourceToken", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     destinationToken", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj MercurialSwap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *MercurialSwap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewMercurialSwapInstruction declares a new MercurialSwap instruction with the provided parameters and accounts.
func NewMercurialSwapInstruction(
	// Accounts:
	swapProgram ag_solanago.PublicKey,
	swapState ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	poolAuthority ag_solanago.PublicKey,
	userTransferAuthority ag_solanago.PublicKey,
	sourceTokenAccount ag_solanago.PublicKey,
	destinationTokenAccount ag_solanago.PublicKey) *MercurialSwap {
	return NewMercurialSwapInstructionBuilder().
		SetSwapProgramAccount(swapProgram).
		SetSwapStateAccount(swapState).
		SetTokenProgramAccount(tokenProgram).
		SetPoolAuthorityAccount(poolAuthority).
		SetUserTransferAuthorityAccount(userTransferAuthority).
		SetSourceTokenAccountAccount(sourceTokenAccount).
		SetDestinationTokenAccountAccount(destinationTokenAccount)
}
