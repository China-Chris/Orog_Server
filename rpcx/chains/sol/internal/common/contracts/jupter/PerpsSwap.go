// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// PerpsSwap is the `perpsSwap` instruction.
type PerpsSwap struct {

	// [0] = [] swapProgram
	//
	// [1] = [WRITE] owner
	//
	// [2] = [WRITE] fundingAccount
	//
	// [3] = [WRITE] receivingAccount
	//
	// [4] = [] transferAuthority
	//
	// [5] = [] perpetuals
	//
	// [6] = [WRITE] pool
	//
	// [7] = [WRITE] receivingCustody
	//
	// [8] = [] receivingCustodyOracleAccount
	//
	// [9] = [WRITE] receivingCustodyTokenAccount
	//
	// [10] = [WRITE] dispensingCustody
	//
	// [11] = [] dispensingCustodyOracleAccount
	//
	// [12] = [WRITE] dispensingCustodyTokenAccount
	//
	// [13] = [] tokenProgram
	//
	// [14] = [] eventAuthority
	//
	// [15] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewPerpsSwapInstructionBuilder creates a new `PerpsSwap` instruction builder.
func NewPerpsSwapInstructionBuilder() *PerpsSwap {
	nd := &PerpsSwap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 16),
	}
	return nd
}

// SetSwapProgramAccount sets the "swapProgram" account.
func (inst *PerpsSwap) SetSwapProgramAccount(swapProgram ag_solanago.PublicKey) *PerpsSwap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(swapProgram)
	return inst
}

// GetSwapProgramAccount gets the "swapProgram" account.
func (inst *PerpsSwap) GetSwapProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOwnerAccount sets the "owner" account.
func (inst *PerpsSwap) SetOwnerAccount(owner ag_solanago.PublicKey) *PerpsSwap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(owner).WRITE()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *PerpsSwap) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetFundingAccountAccount sets the "fundingAccount" account.
func (inst *PerpsSwap) SetFundingAccountAccount(fundingAccount ag_solanago.PublicKey) *PerpsSwap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(fundingAccount).WRITE()
	return inst
}

// GetFundingAccountAccount gets the "fundingAccount" account.
func (inst *PerpsSwap) GetFundingAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetReceivingAccountAccount sets the "receivingAccount" account.
func (inst *PerpsSwap) SetReceivingAccountAccount(receivingAccount ag_solanago.PublicKey) *PerpsSwap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(receivingAccount).WRITE()
	return inst
}

// GetReceivingAccountAccount gets the "receivingAccount" account.
func (inst *PerpsSwap) GetReceivingAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTransferAuthorityAccount sets the "transferAuthority" account.
func (inst *PerpsSwap) SetTransferAuthorityAccount(transferAuthority ag_solanago.PublicKey) *PerpsSwap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(transferAuthority)
	return inst
}

// GetTransferAuthorityAccount gets the "transferAuthority" account.
func (inst *PerpsSwap) GetTransferAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetPerpetualsAccount sets the "perpetuals" account.
func (inst *PerpsSwap) SetPerpetualsAccount(perpetuals ag_solanago.PublicKey) *PerpsSwap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(perpetuals)
	return inst
}

// GetPerpetualsAccount gets the "perpetuals" account.
func (inst *PerpsSwap) GetPerpetualsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPoolAccount sets the "pool" account.
func (inst *PerpsSwap) SetPoolAccount(pool ag_solanago.PublicKey) *PerpsSwap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *PerpsSwap) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetReceivingCustodyAccount sets the "receivingCustody" account.
func (inst *PerpsSwap) SetReceivingCustodyAccount(receivingCustody ag_solanago.PublicKey) *PerpsSwap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(receivingCustody).WRITE()
	return inst
}

// GetReceivingCustodyAccount gets the "receivingCustody" account.
func (inst *PerpsSwap) GetReceivingCustodyAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetReceivingCustodyOracleAccountAccount sets the "receivingCustodyOracleAccount" account.
func (inst *PerpsSwap) SetReceivingCustodyOracleAccountAccount(receivingCustodyOracleAccount ag_solanago.PublicKey) *PerpsSwap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(receivingCustodyOracleAccount)
	return inst
}

// GetReceivingCustodyOracleAccountAccount gets the "receivingCustodyOracleAccount" account.
func (inst *PerpsSwap) GetReceivingCustodyOracleAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetReceivingCustodyTokenAccountAccount sets the "receivingCustodyTokenAccount" account.
func (inst *PerpsSwap) SetReceivingCustodyTokenAccountAccount(receivingCustodyTokenAccount ag_solanago.PublicKey) *PerpsSwap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(receivingCustodyTokenAccount).WRITE()
	return inst
}

// GetReceivingCustodyTokenAccountAccount gets the "receivingCustodyTokenAccount" account.
func (inst *PerpsSwap) GetReceivingCustodyTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetDispensingCustodyAccount sets the "dispensingCustody" account.
func (inst *PerpsSwap) SetDispensingCustodyAccount(dispensingCustody ag_solanago.PublicKey) *PerpsSwap {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(dispensingCustody).WRITE()
	return inst
}

// GetDispensingCustodyAccount gets the "dispensingCustody" account.
func (inst *PerpsSwap) GetDispensingCustodyAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetDispensingCustodyOracleAccountAccount sets the "dispensingCustodyOracleAccount" account.
func (inst *PerpsSwap) SetDispensingCustodyOracleAccountAccount(dispensingCustodyOracleAccount ag_solanago.PublicKey) *PerpsSwap {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(dispensingCustodyOracleAccount)
	return inst
}

// GetDispensingCustodyOracleAccountAccount gets the "dispensingCustodyOracleAccount" account.
func (inst *PerpsSwap) GetDispensingCustodyOracleAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetDispensingCustodyTokenAccountAccount sets the "dispensingCustodyTokenAccount" account.
func (inst *PerpsSwap) SetDispensingCustodyTokenAccountAccount(dispensingCustodyTokenAccount ag_solanago.PublicKey) *PerpsSwap {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(dispensingCustodyTokenAccount).WRITE()
	return inst
}

// GetDispensingCustodyTokenAccountAccount gets the "dispensingCustodyTokenAccount" account.
func (inst *PerpsSwap) GetDispensingCustodyTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *PerpsSwap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *PerpsSwap {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *PerpsSwap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetEventAuthorityAccount sets the "eventAuthority" account.
func (inst *PerpsSwap) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *PerpsSwap {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "eventAuthority" account.
func (inst *PerpsSwap) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetProgramAccount sets the "program" account.
func (inst *PerpsSwap) SetProgramAccount(program ag_solanago.PublicKey) *PerpsSwap {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *PerpsSwap) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

func (inst PerpsSwap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_PerpsSwap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst PerpsSwap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *PerpsSwap) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.SwapProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.FundingAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ReceivingAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TransferAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Perpetuals is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.ReceivingCustody is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.ReceivingCustodyOracleAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.ReceivingCustodyTokenAccount is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.DispensingCustody is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.DispensingCustodyOracleAccount is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.DispensingCustodyTokenAccount is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *PerpsSwap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("PerpsSwap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=16]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("            swapProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                  owner", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                funding", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("              receiving", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("      transferAuthority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("             perpetuals", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                   pool", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("       receivingCustody", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta(" receivingCustodyOracle", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("  receivingCustodyToken", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("      dispensingCustody", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("dispensingCustodyOracle", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta(" dispensingCustodyToken", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("           tokenProgram", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("         eventAuthority", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("                program", inst.AccountMetaSlice.Get(15)))
					})
				})
		})
}

func (obj PerpsSwap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *PerpsSwap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewPerpsSwapInstruction declares a new PerpsSwap instruction with the provided parameters and accounts.
func NewPerpsSwapInstruction(
	// Accounts:
	swapProgram ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	fundingAccount ag_solanago.PublicKey,
	receivingAccount ag_solanago.PublicKey,
	transferAuthority ag_solanago.PublicKey,
	perpetuals ag_solanago.PublicKey,
	pool ag_solanago.PublicKey,
	receivingCustody ag_solanago.PublicKey,
	receivingCustodyOracleAccount ag_solanago.PublicKey,
	receivingCustodyTokenAccount ag_solanago.PublicKey,
	dispensingCustody ag_solanago.PublicKey,
	dispensingCustodyOracleAccount ag_solanago.PublicKey,
	dispensingCustodyTokenAccount ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *PerpsSwap {
	return NewPerpsSwapInstructionBuilder().
		SetSwapProgramAccount(swapProgram).
		SetOwnerAccount(owner).
		SetFundingAccountAccount(fundingAccount).
		SetReceivingAccountAccount(receivingAccount).
		SetTransferAuthorityAccount(transferAuthority).
		SetPerpetualsAccount(perpetuals).
		SetPoolAccount(pool).
		SetReceivingCustodyAccount(receivingCustody).
		SetReceivingCustodyOracleAccountAccount(receivingCustodyOracleAccount).
		SetReceivingCustodyTokenAccountAccount(receivingCustodyTokenAccount).
		SetDispensingCustodyAccount(dispensingCustody).
		SetDispensingCustodyOracleAccountAccount(dispensingCustodyOracleAccount).
		SetDispensingCustodyTokenAccountAccount(dispensingCustodyTokenAccount).
		SetTokenProgramAccount(tokenProgram).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
