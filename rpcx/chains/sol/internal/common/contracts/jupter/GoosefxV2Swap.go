// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// GoosefxV2Swap is the `goosefxV2Swap` instruction.
type GoosefxV2Swap struct {

	// [0] = [] swapProgram
	//
	// [1] = [WRITE] pair
	//
	// [2] = [WRITE] poolRegistry
	//
	// [3] = [] userWallet
	//
	// [4] = [] sslPoolInSigner
	//
	// [5] = [] sslPoolOutSigner
	//
	// [6] = [WRITE] userAtaIn
	//
	// [7] = [WRITE] userAtaOut
	//
	// [8] = [WRITE] sslOutMainVault
	//
	// [9] = [WRITE] sslOutSecondaryVault
	//
	// [10] = [WRITE] sslInMainVault
	//
	// [11] = [WRITE] sslInSecondaryVault
	//
	// [12] = [WRITE] sslOutFeeVault
	//
	// [13] = [WRITE] feeDestination
	//
	// [14] = [WRITE] outputTokenPriceHistory
	//
	// [15] = [] outputTokenOracle
	//
	// [16] = [WRITE] inputTokenPriceHistory
	//
	// [17] = [] inputTokenOracle
	//
	// [18] = [WRITE] eventEmitter
	//
	// [19] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewGoosefxV2SwapInstructionBuilder creates a new `GoosefxV2Swap` instruction builder.
func NewGoosefxV2SwapInstructionBuilder() *GoosefxV2Swap {
	nd := &GoosefxV2Swap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 20),
	}
	return nd
}

// SetSwapProgramAccount sets the "swapProgram" account.
func (inst *GoosefxV2Swap) SetSwapProgramAccount(swapProgram ag_solanago.PublicKey) *GoosefxV2Swap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(swapProgram)
	return inst
}

// GetSwapProgramAccount gets the "swapProgram" account.
func (inst *GoosefxV2Swap) GetSwapProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPairAccount sets the "pair" account.
func (inst *GoosefxV2Swap) SetPairAccount(pair ag_solanago.PublicKey) *GoosefxV2Swap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(pair).WRITE()
	return inst
}

// GetPairAccount gets the "pair" account.
func (inst *GoosefxV2Swap) GetPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPoolRegistryAccount sets the "poolRegistry" account.
func (inst *GoosefxV2Swap) SetPoolRegistryAccount(poolRegistry ag_solanago.PublicKey) *GoosefxV2Swap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(poolRegistry).WRITE()
	return inst
}

// GetPoolRegistryAccount gets the "poolRegistry" account.
func (inst *GoosefxV2Swap) GetPoolRegistryAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUserWalletAccount sets the "userWallet" account.
func (inst *GoosefxV2Swap) SetUserWalletAccount(userWallet ag_solanago.PublicKey) *GoosefxV2Swap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(userWallet)
	return inst
}

// GetUserWalletAccount gets the "userWallet" account.
func (inst *GoosefxV2Swap) GetUserWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSslPoolInSignerAccount sets the "sslPoolInSigner" account.
func (inst *GoosefxV2Swap) SetSslPoolInSignerAccount(sslPoolInSigner ag_solanago.PublicKey) *GoosefxV2Swap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(sslPoolInSigner)
	return inst
}

// GetSslPoolInSignerAccount gets the "sslPoolInSigner" account.
func (inst *GoosefxV2Swap) GetSslPoolInSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSslPoolOutSignerAccount sets the "sslPoolOutSigner" account.
func (inst *GoosefxV2Swap) SetSslPoolOutSignerAccount(sslPoolOutSigner ag_solanago.PublicKey) *GoosefxV2Swap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(sslPoolOutSigner)
	return inst
}

// GetSslPoolOutSignerAccount gets the "sslPoolOutSigner" account.
func (inst *GoosefxV2Swap) GetSslPoolOutSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetUserAtaInAccount sets the "userAtaIn" account.
func (inst *GoosefxV2Swap) SetUserAtaInAccount(userAtaIn ag_solanago.PublicKey) *GoosefxV2Swap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(userAtaIn).WRITE()
	return inst
}

// GetUserAtaInAccount gets the "userAtaIn" account.
func (inst *GoosefxV2Swap) GetUserAtaInAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetUserAtaOutAccount sets the "userAtaOut" account.
func (inst *GoosefxV2Swap) SetUserAtaOutAccount(userAtaOut ag_solanago.PublicKey) *GoosefxV2Swap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(userAtaOut).WRITE()
	return inst
}

// GetUserAtaOutAccount gets the "userAtaOut" account.
func (inst *GoosefxV2Swap) GetUserAtaOutAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSslOutMainVaultAccount sets the "sslOutMainVault" account.
func (inst *GoosefxV2Swap) SetSslOutMainVaultAccount(sslOutMainVault ag_solanago.PublicKey) *GoosefxV2Swap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(sslOutMainVault).WRITE()
	return inst
}

// GetSslOutMainVaultAccount gets the "sslOutMainVault" account.
func (inst *GoosefxV2Swap) GetSslOutMainVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetSslOutSecondaryVaultAccount sets the "sslOutSecondaryVault" account.
func (inst *GoosefxV2Swap) SetSslOutSecondaryVaultAccount(sslOutSecondaryVault ag_solanago.PublicKey) *GoosefxV2Swap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(sslOutSecondaryVault).WRITE()
	return inst
}

// GetSslOutSecondaryVaultAccount gets the "sslOutSecondaryVault" account.
func (inst *GoosefxV2Swap) GetSslOutSecondaryVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetSslInMainVaultAccount sets the "sslInMainVault" account.
func (inst *GoosefxV2Swap) SetSslInMainVaultAccount(sslInMainVault ag_solanago.PublicKey) *GoosefxV2Swap {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(sslInMainVault).WRITE()
	return inst
}

// GetSslInMainVaultAccount gets the "sslInMainVault" account.
func (inst *GoosefxV2Swap) GetSslInMainVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetSslInSecondaryVaultAccount sets the "sslInSecondaryVault" account.
func (inst *GoosefxV2Swap) SetSslInSecondaryVaultAccount(sslInSecondaryVault ag_solanago.PublicKey) *GoosefxV2Swap {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(sslInSecondaryVault).WRITE()
	return inst
}

// GetSslInSecondaryVaultAccount gets the "sslInSecondaryVault" account.
func (inst *GoosefxV2Swap) GetSslInSecondaryVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetSslOutFeeVaultAccount sets the "sslOutFeeVault" account.
func (inst *GoosefxV2Swap) SetSslOutFeeVaultAccount(sslOutFeeVault ag_solanago.PublicKey) *GoosefxV2Swap {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(sslOutFeeVault).WRITE()
	return inst
}

// GetSslOutFeeVaultAccount gets the "sslOutFeeVault" account.
func (inst *GoosefxV2Swap) GetSslOutFeeVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetFeeDestinationAccount sets the "feeDestination" account.
func (inst *GoosefxV2Swap) SetFeeDestinationAccount(feeDestination ag_solanago.PublicKey) *GoosefxV2Swap {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(feeDestination).WRITE()
	return inst
}

// GetFeeDestinationAccount gets the "feeDestination" account.
func (inst *GoosefxV2Swap) GetFeeDestinationAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetOutputTokenPriceHistoryAccount sets the "outputTokenPriceHistory" account.
func (inst *GoosefxV2Swap) SetOutputTokenPriceHistoryAccount(outputTokenPriceHistory ag_solanago.PublicKey) *GoosefxV2Swap {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(outputTokenPriceHistory).WRITE()
	return inst
}

// GetOutputTokenPriceHistoryAccount gets the "outputTokenPriceHistory" account.
func (inst *GoosefxV2Swap) GetOutputTokenPriceHistoryAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetOutputTokenOracleAccount sets the "outputTokenOracle" account.
func (inst *GoosefxV2Swap) SetOutputTokenOracleAccount(outputTokenOracle ag_solanago.PublicKey) *GoosefxV2Swap {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(outputTokenOracle)
	return inst
}

// GetOutputTokenOracleAccount gets the "outputTokenOracle" account.
func (inst *GoosefxV2Swap) GetOutputTokenOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetInputTokenPriceHistoryAccount sets the "inputTokenPriceHistory" account.
func (inst *GoosefxV2Swap) SetInputTokenPriceHistoryAccount(inputTokenPriceHistory ag_solanago.PublicKey) *GoosefxV2Swap {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(inputTokenPriceHistory).WRITE()
	return inst
}

// GetInputTokenPriceHistoryAccount gets the "inputTokenPriceHistory" account.
func (inst *GoosefxV2Swap) GetInputTokenPriceHistoryAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetInputTokenOracleAccount sets the "inputTokenOracle" account.
func (inst *GoosefxV2Swap) SetInputTokenOracleAccount(inputTokenOracle ag_solanago.PublicKey) *GoosefxV2Swap {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(inputTokenOracle)
	return inst
}

// GetInputTokenOracleAccount gets the "inputTokenOracle" account.
func (inst *GoosefxV2Swap) GetInputTokenOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

// SetEventEmitterAccount sets the "eventEmitter" account.
func (inst *GoosefxV2Swap) SetEventEmitterAccount(eventEmitter ag_solanago.PublicKey) *GoosefxV2Swap {
	inst.AccountMetaSlice[18] = ag_solanago.Meta(eventEmitter).WRITE()
	return inst
}

// GetEventEmitterAccount gets the "eventEmitter" account.
func (inst *GoosefxV2Swap) GetEventEmitterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(18)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *GoosefxV2Swap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *GoosefxV2Swap {
	inst.AccountMetaSlice[19] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *GoosefxV2Swap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(19)
}

func (inst GoosefxV2Swap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_GoosefxV2Swap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst GoosefxV2Swap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *GoosefxV2Swap) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.SwapProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Pair is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PoolRegistry is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.UserWallet is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SslPoolInSigner is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SslPoolOutSigner is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.UserAtaIn is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.UserAtaOut is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SslOutMainVault is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.SslOutSecondaryVault is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.SslInMainVault is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.SslInSecondaryVault is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.SslOutFeeVault is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.FeeDestination is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.OutputTokenPriceHistory is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.OutputTokenOracle is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.InputTokenPriceHistory is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.InputTokenOracle is not set")
		}
		if inst.AccountMetaSlice[18] == nil {
			return errors.New("accounts.EventEmitter is not set")
		}
		if inst.AccountMetaSlice[19] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *GoosefxV2Swap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("GoosefxV2Swap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=20]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("            swapProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                   pair", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("           poolRegistry", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("             userWallet", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        sslPoolInSigner", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("       sslPoolOutSigner", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("              userAtaIn", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("             userAtaOut", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("        sslOutMainVault", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("   sslOutSecondaryVault", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("         sslInMainVault", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("    sslInSecondaryVault", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("         sslOutFeeVault", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("         feeDestination", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("outputTokenPriceHistory", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("      outputTokenOracle", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta(" inputTokenPriceHistory", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("       inputTokenOracle", inst.AccountMetaSlice.Get(17)))
						accountsBranch.Child(ag_format.Meta("           eventEmitter", inst.AccountMetaSlice.Get(18)))
						accountsBranch.Child(ag_format.Meta("           tokenProgram", inst.AccountMetaSlice.Get(19)))
					})
				})
		})
}

func (obj GoosefxV2Swap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *GoosefxV2Swap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewGoosefxV2SwapInstruction declares a new GoosefxV2Swap instruction with the provided parameters and accounts.
func NewGoosefxV2SwapInstruction(
	// Accounts:
	swapProgram ag_solanago.PublicKey,
	pair ag_solanago.PublicKey,
	poolRegistry ag_solanago.PublicKey,
	userWallet ag_solanago.PublicKey,
	sslPoolInSigner ag_solanago.PublicKey,
	sslPoolOutSigner ag_solanago.PublicKey,
	userAtaIn ag_solanago.PublicKey,
	userAtaOut ag_solanago.PublicKey,
	sslOutMainVault ag_solanago.PublicKey,
	sslOutSecondaryVault ag_solanago.PublicKey,
	sslInMainVault ag_solanago.PublicKey,
	sslInSecondaryVault ag_solanago.PublicKey,
	sslOutFeeVault ag_solanago.PublicKey,
	feeDestination ag_solanago.PublicKey,
	outputTokenPriceHistory ag_solanago.PublicKey,
	outputTokenOracle ag_solanago.PublicKey,
	inputTokenPriceHistory ag_solanago.PublicKey,
	inputTokenOracle ag_solanago.PublicKey,
	eventEmitter ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *GoosefxV2Swap {
	return NewGoosefxV2SwapInstructionBuilder().
		SetSwapProgramAccount(swapProgram).
		SetPairAccount(pair).
		SetPoolRegistryAccount(poolRegistry).
		SetUserWalletAccount(userWallet).
		SetSslPoolInSignerAccount(sslPoolInSigner).
		SetSslPoolOutSignerAccount(sslPoolOutSigner).
		SetUserAtaInAccount(userAtaIn).
		SetUserAtaOutAccount(userAtaOut).
		SetSslOutMainVaultAccount(sslOutMainVault).
		SetSslOutSecondaryVaultAccount(sslOutSecondaryVault).
		SetSslInMainVaultAccount(sslInMainVault).
		SetSslInSecondaryVaultAccount(sslInSecondaryVault).
		SetSslOutFeeVaultAccount(sslOutFeeVault).
		SetFeeDestinationAccount(feeDestination).
		SetOutputTokenPriceHistoryAccount(outputTokenPriceHistory).
		SetOutputTokenOracleAccount(outputTokenOracle).
		SetInputTokenPriceHistoryAccount(inputTokenPriceHistory).
		SetInputTokenOracleAccount(inputTokenOracle).
		SetEventEmitterAccount(eventEmitter).
		SetTokenProgramAccount(tokenProgram)
}
