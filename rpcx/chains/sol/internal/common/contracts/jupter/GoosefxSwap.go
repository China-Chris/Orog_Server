// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// GoosefxSwap is the `goosefxSwap` instruction.
type GoosefxSwap struct {

	// [0] = [] swapProgram
	//
	// [1] = [] controller
	//
	// [2] = [WRITE] pair
	//
	// [3] = [WRITE] sslIn
	//
	// [4] = [WRITE] sslOut
	//
	// [5] = [WRITE] liabilityVaultIn
	//
	// [6] = [WRITE] swappedLiabilityVaultIn
	//
	// [7] = [WRITE] liabilityVaultOut
	//
	// [8] = [WRITE] swappedLiabilityVaultOut
	//
	// [9] = [WRITE] userInAta
	//
	// [10] = [WRITE] userOutAta
	//
	// [11] = [WRITE] feeCollectorAta
	//
	// [12] = [] userWallet
	//
	// [13] = [] feeCollector
	//
	// [14] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewGoosefxSwapInstructionBuilder creates a new `GoosefxSwap` instruction builder.
func NewGoosefxSwapInstructionBuilder() *GoosefxSwap {
	nd := &GoosefxSwap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 15),
	}
	return nd
}

// SetSwapProgramAccount sets the "swapProgram" account.
func (inst *GoosefxSwap) SetSwapProgramAccount(swapProgram ag_solanago.PublicKey) *GoosefxSwap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(swapProgram)
	return inst
}

// GetSwapProgramAccount gets the "swapProgram" account.
func (inst *GoosefxSwap) GetSwapProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetControllerAccount sets the "controller" account.
func (inst *GoosefxSwap) SetControllerAccount(controller ag_solanago.PublicKey) *GoosefxSwap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(controller)
	return inst
}

// GetControllerAccount gets the "controller" account.
func (inst *GoosefxSwap) GetControllerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPairAccount sets the "pair" account.
func (inst *GoosefxSwap) SetPairAccount(pair ag_solanago.PublicKey) *GoosefxSwap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(pair).WRITE()
	return inst
}

// GetPairAccount gets the "pair" account.
func (inst *GoosefxSwap) GetPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSslInAccount sets the "sslIn" account.
func (inst *GoosefxSwap) SetSslInAccount(sslIn ag_solanago.PublicKey) *GoosefxSwap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(sslIn).WRITE()
	return inst
}

// GetSslInAccount gets the "sslIn" account.
func (inst *GoosefxSwap) GetSslInAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSslOutAccount sets the "sslOut" account.
func (inst *GoosefxSwap) SetSslOutAccount(sslOut ag_solanago.PublicKey) *GoosefxSwap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(sslOut).WRITE()
	return inst
}

// GetSslOutAccount gets the "sslOut" account.
func (inst *GoosefxSwap) GetSslOutAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetLiabilityVaultInAccount sets the "liabilityVaultIn" account.
func (inst *GoosefxSwap) SetLiabilityVaultInAccount(liabilityVaultIn ag_solanago.PublicKey) *GoosefxSwap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(liabilityVaultIn).WRITE()
	return inst
}

// GetLiabilityVaultInAccount gets the "liabilityVaultIn" account.
func (inst *GoosefxSwap) GetLiabilityVaultInAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSwappedLiabilityVaultInAccount sets the "swappedLiabilityVaultIn" account.
func (inst *GoosefxSwap) SetSwappedLiabilityVaultInAccount(swappedLiabilityVaultIn ag_solanago.PublicKey) *GoosefxSwap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(swappedLiabilityVaultIn).WRITE()
	return inst
}

// GetSwappedLiabilityVaultInAccount gets the "swappedLiabilityVaultIn" account.
func (inst *GoosefxSwap) GetSwappedLiabilityVaultInAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetLiabilityVaultOutAccount sets the "liabilityVaultOut" account.
func (inst *GoosefxSwap) SetLiabilityVaultOutAccount(liabilityVaultOut ag_solanago.PublicKey) *GoosefxSwap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(liabilityVaultOut).WRITE()
	return inst
}

// GetLiabilityVaultOutAccount gets the "liabilityVaultOut" account.
func (inst *GoosefxSwap) GetLiabilityVaultOutAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSwappedLiabilityVaultOutAccount sets the "swappedLiabilityVaultOut" account.
func (inst *GoosefxSwap) SetSwappedLiabilityVaultOutAccount(swappedLiabilityVaultOut ag_solanago.PublicKey) *GoosefxSwap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(swappedLiabilityVaultOut).WRITE()
	return inst
}

// GetSwappedLiabilityVaultOutAccount gets the "swappedLiabilityVaultOut" account.
func (inst *GoosefxSwap) GetSwappedLiabilityVaultOutAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetUserInAtaAccount sets the "userInAta" account.
func (inst *GoosefxSwap) SetUserInAtaAccount(userInAta ag_solanago.PublicKey) *GoosefxSwap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(userInAta).WRITE()
	return inst
}

// GetUserInAtaAccount gets the "userInAta" account.
func (inst *GoosefxSwap) GetUserInAtaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetUserOutAtaAccount sets the "userOutAta" account.
func (inst *GoosefxSwap) SetUserOutAtaAccount(userOutAta ag_solanago.PublicKey) *GoosefxSwap {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(userOutAta).WRITE()
	return inst
}

// GetUserOutAtaAccount gets the "userOutAta" account.
func (inst *GoosefxSwap) GetUserOutAtaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetFeeCollectorAtaAccount sets the "feeCollectorAta" account.
func (inst *GoosefxSwap) SetFeeCollectorAtaAccount(feeCollectorAta ag_solanago.PublicKey) *GoosefxSwap {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(feeCollectorAta).WRITE()
	return inst
}

// GetFeeCollectorAtaAccount gets the "feeCollectorAta" account.
func (inst *GoosefxSwap) GetFeeCollectorAtaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetUserWalletAccount sets the "userWallet" account.
func (inst *GoosefxSwap) SetUserWalletAccount(userWallet ag_solanago.PublicKey) *GoosefxSwap {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(userWallet)
	return inst
}

// GetUserWalletAccount gets the "userWallet" account.
func (inst *GoosefxSwap) GetUserWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetFeeCollectorAccount sets the "feeCollector" account.
func (inst *GoosefxSwap) SetFeeCollectorAccount(feeCollector ag_solanago.PublicKey) *GoosefxSwap {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(feeCollector)
	return inst
}

// GetFeeCollectorAccount gets the "feeCollector" account.
func (inst *GoosefxSwap) GetFeeCollectorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *GoosefxSwap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *GoosefxSwap {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *GoosefxSwap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

func (inst GoosefxSwap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_GoosefxSwap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst GoosefxSwap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *GoosefxSwap) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.SwapProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Controller is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Pair is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SslIn is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SslOut is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.LiabilityVaultIn is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SwappedLiabilityVaultIn is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.LiabilityVaultOut is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SwappedLiabilityVaultOut is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.UserInAta is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.UserOutAta is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.FeeCollectorAta is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.UserWallet is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.FeeCollector is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *GoosefxSwap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("GoosefxSwap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=15]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("             swapProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("              controller", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                    pair", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                   sslIn", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                  sslOut", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("        liabilityVaultIn", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta(" swappedLiabilityVaultIn", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("       liabilityVaultOut", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("swappedLiabilityVaultOut", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("               userInAta", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("              userOutAta", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("         feeCollectorAta", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("              userWallet", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("            feeCollector", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("            tokenProgram", inst.AccountMetaSlice.Get(14)))
					})
				})
		})
}

func (obj GoosefxSwap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *GoosefxSwap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewGoosefxSwapInstruction declares a new GoosefxSwap instruction with the provided parameters and accounts.
func NewGoosefxSwapInstruction(
	// Accounts:
	swapProgram ag_solanago.PublicKey,
	controller ag_solanago.PublicKey,
	pair ag_solanago.PublicKey,
	sslIn ag_solanago.PublicKey,
	sslOut ag_solanago.PublicKey,
	liabilityVaultIn ag_solanago.PublicKey,
	swappedLiabilityVaultIn ag_solanago.PublicKey,
	liabilityVaultOut ag_solanago.PublicKey,
	swappedLiabilityVaultOut ag_solanago.PublicKey,
	userInAta ag_solanago.PublicKey,
	userOutAta ag_solanago.PublicKey,
	feeCollectorAta ag_solanago.PublicKey,
	userWallet ag_solanago.PublicKey,
	feeCollector ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *GoosefxSwap {
	return NewGoosefxSwapInstructionBuilder().
		SetSwapProgramAccount(swapProgram).
		SetControllerAccount(controller).
		SetPairAccount(pair).
		SetSslInAccount(sslIn).
		SetSslOutAccount(sslOut).
		SetLiabilityVaultInAccount(liabilityVaultIn).
		SetSwappedLiabilityVaultInAccount(swappedLiabilityVaultIn).
		SetLiabilityVaultOutAccount(liabilityVaultOut).
		SetSwappedLiabilityVaultOutAccount(swappedLiabilityVaultOut).
		SetUserInAtaAccount(userInAta).
		SetUserOutAtaAccount(userOutAta).
		SetFeeCollectorAtaAccount(feeCollectorAta).
		SetUserWalletAccount(userWallet).
		SetFeeCollectorAccount(feeCollector).
		SetTokenProgramAccount(tokenProgram)
}
