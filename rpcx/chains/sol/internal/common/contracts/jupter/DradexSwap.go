// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// DradexSwap is the `dradexSwap` instruction.
type DradexSwap struct {

	// [0] = [] swapProgram
	//
	// [1] = [WRITE] pair
	//
	// [2] = [WRITE] market
	//
	// [3] = [WRITE] eventQueue
	//
	// [4] = [] dexUser
	//
	// [5] = [WRITE] marketUser
	//
	// [6] = [WRITE] bids
	//
	// [7] = [WRITE] asks
	//
	// [8] = [WRITE] t0Vault
	//
	// [9] = [WRITE] t1Vault
	//
	// [10] = [WRITE] t0User
	//
	// [11] = [WRITE] t1User
	//
	// [12] = [] master
	//
	// [13] = [WRITE] signer
	//
	// [14] = [] systemProgram
	//
	// [15] = [] tokenProgram
	//
	// [16] = [] logger
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDradexSwapInstructionBuilder creates a new `DradexSwap` instruction builder.
func NewDradexSwapInstructionBuilder() *DradexSwap {
	nd := &DradexSwap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 17),
	}
	return nd
}

// SetSwapProgramAccount sets the "swapProgram" account.
func (inst *DradexSwap) SetSwapProgramAccount(swapProgram ag_solanago.PublicKey) *DradexSwap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(swapProgram)
	return inst
}

// GetSwapProgramAccount gets the "swapProgram" account.
func (inst *DradexSwap) GetSwapProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPairAccount sets the "pair" account.
func (inst *DradexSwap) SetPairAccount(pair ag_solanago.PublicKey) *DradexSwap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(pair).WRITE()
	return inst
}

// GetPairAccount gets the "pair" account.
func (inst *DradexSwap) GetPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMarketAccount sets the "market" account.
func (inst *DradexSwap) SetMarketAccount(market ag_solanago.PublicKey) *DradexSwap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(market).WRITE()
	return inst
}

// GetMarketAccount gets the "market" account.
func (inst *DradexSwap) GetMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetEventQueueAccount sets the "eventQueue" account.
func (inst *DradexSwap) SetEventQueueAccount(eventQueue ag_solanago.PublicKey) *DradexSwap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(eventQueue).WRITE()
	return inst
}

// GetEventQueueAccount gets the "eventQueue" account.
func (inst *DradexSwap) GetEventQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetDexUserAccount sets the "dexUser" account.
func (inst *DradexSwap) SetDexUserAccount(dexUser ag_solanago.PublicKey) *DradexSwap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(dexUser)
	return inst
}

// GetDexUserAccount gets the "dexUser" account.
func (inst *DradexSwap) GetDexUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMarketUserAccount sets the "marketUser" account.
func (inst *DradexSwap) SetMarketUserAccount(marketUser ag_solanago.PublicKey) *DradexSwap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(marketUser).WRITE()
	return inst
}

// GetMarketUserAccount gets the "marketUser" account.
func (inst *DradexSwap) GetMarketUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetBidsAccount sets the "bids" account.
func (inst *DradexSwap) SetBidsAccount(bids ag_solanago.PublicKey) *DradexSwap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(bids).WRITE()
	return inst
}

// GetBidsAccount gets the "bids" account.
func (inst *DradexSwap) GetBidsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetAsksAccount sets the "asks" account.
func (inst *DradexSwap) SetAsksAccount(asks ag_solanago.PublicKey) *DradexSwap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(asks).WRITE()
	return inst
}

// GetAsksAccount gets the "asks" account.
func (inst *DradexSwap) GetAsksAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetT0VaultAccount sets the "t0Vault" account.
func (inst *DradexSwap) SetT0VaultAccount(t0Vault ag_solanago.PublicKey) *DradexSwap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(t0Vault).WRITE()
	return inst
}

// GetT0VaultAccount gets the "t0Vault" account.
func (inst *DradexSwap) GetT0VaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetT1VaultAccount sets the "t1Vault" account.
func (inst *DradexSwap) SetT1VaultAccount(t1Vault ag_solanago.PublicKey) *DradexSwap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(t1Vault).WRITE()
	return inst
}

// GetT1VaultAccount gets the "t1Vault" account.
func (inst *DradexSwap) GetT1VaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetT0UserAccount sets the "t0User" account.
func (inst *DradexSwap) SetT0UserAccount(t0User ag_solanago.PublicKey) *DradexSwap {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(t0User).WRITE()
	return inst
}

// GetT0UserAccount gets the "t0User" account.
func (inst *DradexSwap) GetT0UserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetT1UserAccount sets the "t1User" account.
func (inst *DradexSwap) SetT1UserAccount(t1User ag_solanago.PublicKey) *DradexSwap {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(t1User).WRITE()
	return inst
}

// GetT1UserAccount gets the "t1User" account.
func (inst *DradexSwap) GetT1UserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetMasterAccount sets the "master" account.
func (inst *DradexSwap) SetMasterAccount(master ag_solanago.PublicKey) *DradexSwap {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(master)
	return inst
}

// GetMasterAccount gets the "master" account.
func (inst *DradexSwap) GetMasterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetSignerAccount sets the "signer" account.
func (inst *DradexSwap) SetSignerAccount(signer ag_solanago.PublicKey) *DradexSwap {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(signer).WRITE()
	return inst
}

// GetSignerAccount gets the "signer" account.
func (inst *DradexSwap) GetSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *DradexSwap) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *DradexSwap {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *DradexSwap) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *DradexSwap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *DradexSwap {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *DradexSwap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetLoggerAccount sets the "logger" account.
func (inst *DradexSwap) SetLoggerAccount(logger ag_solanago.PublicKey) *DradexSwap {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(logger)
	return inst
}

// GetLoggerAccount gets the "logger" account.
func (inst *DradexSwap) GetLoggerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

func (inst DradexSwap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_DradexSwap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DradexSwap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DradexSwap) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.SwapProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Pair is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Market is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.EventQueue is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.DexUser is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.MarketUser is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Bids is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Asks is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.T0Vault is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.T1Vault is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.T0User is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.T1User is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.Master is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.Signer is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.Logger is not set")
		}
	}
	return nil
}

func (inst *DradexSwap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DradexSwap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=17]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("  swapProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         pair", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       market", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("   eventQueue", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("      dexUser", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("   marketUser", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("         bids", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("         asks", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("      t0Vault", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("      t1Vault", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("       t0User", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("       t1User", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("       master", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("       signer", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta(" tokenProgram", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("       logger", inst.AccountMetaSlice.Get(16)))
					})
				})
		})
}

func (obj DradexSwap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *DradexSwap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewDradexSwapInstruction declares a new DradexSwap instruction with the provided parameters and accounts.
func NewDradexSwapInstruction(
	// Accounts:
	swapProgram ag_solanago.PublicKey,
	pair ag_solanago.PublicKey,
	market ag_solanago.PublicKey,
	eventQueue ag_solanago.PublicKey,
	dexUser ag_solanago.PublicKey,
	marketUser ag_solanago.PublicKey,
	bids ag_solanago.PublicKey,
	asks ag_solanago.PublicKey,
	t0Vault ag_solanago.PublicKey,
	t1Vault ag_solanago.PublicKey,
	t0User ag_solanago.PublicKey,
	t1User ag_solanago.PublicKey,
	master ag_solanago.PublicKey,
	signer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	logger ag_solanago.PublicKey) *DradexSwap {
	return NewDradexSwapInstructionBuilder().
		SetSwapProgramAccount(swapProgram).
		SetPairAccount(pair).
		SetMarketAccount(market).
		SetEventQueueAccount(eventQueue).
		SetDexUserAccount(dexUser).
		SetMarketUserAccount(marketUser).
		SetBidsAccount(bids).
		SetAsksAccount(asks).
		SetT0VaultAccount(t0Vault).
		SetT1VaultAccount(t1Vault).
		SetT0UserAccount(t0User).
		SetT1UserAccount(t1User).
		SetMasterAccount(master).
		SetSignerAccount(signer).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetLoggerAccount(logger)
}
