// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupter

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "Jupiter"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	// route_plan Topologically sorted trade DAG
	Instruction_Route = ag_binary.TypeID([8]byte{229, 23, 203, 151, 122, 227, 173, 42})

	Instruction_RouteWithTokenLedger = ag_binary.TypeID([8]byte{150, 86, 71, 116, 167, 93, 14, 104})

	// Route by using program owned token accounts and open orders accounts.
	Instruction_SharedAccountsRoute = ag_binary.TypeID([8]byte{193, 32, 155, 51, 65, 214, 156, 129})

	Instruction_SharedAccountsRouteWithTokenLedger = ag_binary.TypeID([8]byte{230, 121, 143, 80, 119, 159, 106, 170})

	// Route by using program owned token accounts and open orders accounts.
	Instruction_SharedAccountsExactOutRoute = ag_binary.TypeID([8]byte{176, 209, 105, 168, 154, 125, 69, 62})

	Instruction_SetTokenLedger = ag_binary.TypeID([8]byte{228, 85, 185, 112, 78, 79, 77, 2})

	Instruction_CreateOpenOrders = ag_binary.TypeID([8]byte{229, 194, 212, 172, 8, 10, 134, 147})

	Instruction_CreateProgramOpenOrders = ag_binary.TypeID([8]byte{28, 226, 32, 148, 188, 136, 113, 171})

	Instruction_CreateTokenLedger = ag_binary.TypeID([8]byte{232, 242, 197, 253, 240, 143, 129, 52})

	Instruction_MercurialSwap = ag_binary.TypeID([8]byte{2, 5, 77, 173, 197, 0, 7, 157})

	Instruction_CykuraSwap = ag_binary.TypeID([8]byte{38, 241, 21, 107, 120, 59, 184, 249})

	Instruction_SerumSwap = ag_binary.TypeID([8]byte{88, 183, 70, 249, 214, 118, 82, 210})

	Instruction_SaberSwap = ag_binary.TypeID([8]byte{64, 62, 98, 226, 52, 74, 37, 178})

	Instruction_SaberAddDecimals = ag_binary.TypeID([8]byte{36, 53, 231, 184, 7, 181, 5, 238})

	Instruction_TokenSwap = ag_binary.TypeID([8]byte{187, 192, 118, 212, 62, 109, 28, 213})

	Instruction_TokenSwapV2 = ag_binary.TypeID([8]byte{51, 48, 145, 115, 123, 95, 71, 138})

	Instruction_SenchaSwap = ag_binary.TypeID([8]byte{25, 50, 7, 21, 207, 248, 230, 194})

	Instruction_StepSwap = ag_binary.TypeID([8]byte{155, 56, 208, 198, 27, 61, 149, 233})

	Instruction_CropperSwap = ag_binary.TypeID([8]byte{230, 216, 47, 182, 165, 117, 210, 103})

	Instruction_RaydiumSwap = ag_binary.TypeID([8]byte{177, 173, 42, 240, 184, 4, 124, 81})

	Instruction_CremaSwap = ag_binary.TypeID([8]byte{169, 220, 41, 250, 35, 190, 133, 198})

	Instruction_LifinitySwap = ag_binary.TypeID([8]byte{23, 96, 165, 33, 90, 214, 96, 153})

	Instruction_MarinadeDeposit = ag_binary.TypeID([8]byte{62, 236, 248, 28, 222, 232, 182, 73})

	Instruction_MarinadeUnstake = ag_binary.TypeID([8]byte{41, 120, 15, 0, 113, 219, 42, 1})

	Instruction_AldrinSwap = ag_binary.TypeID([8]byte{251, 232, 119, 166, 225, 185, 169, 161})

	Instruction_AldrinV2Swap = ag_binary.TypeID([8]byte{190, 166, 89, 139, 33, 152, 16, 10})

	Instruction_WhirlpoolSwap = ag_binary.TypeID([8]byte{123, 229, 184, 63, 12, 0, 92, 145})

	Instruction_InvariantSwap = ag_binary.TypeID([8]byte{187, 193, 40, 121, 47, 73, 144, 177})

	Instruction_MeteoraSwap = ag_binary.TypeID([8]byte{127, 125, 226, 12, 81, 24, 204, 35})

	Instruction_GoosefxSwap = ag_binary.TypeID([8]byte{222, 136, 46, 123, 189, 125, 124, 122})

	Instruction_DeltafiSwap = ag_binary.TypeID([8]byte{132, 230, 102, 120, 205, 9, 237, 190})

	Instruction_BalansolSwap = ag_binary.TypeID([8]byte{137, 109, 253, 253, 70, 109, 11, 100})

	Instruction_MarcoPoloSwap = ag_binary.TypeID([8]byte{241, 147, 94, 15, 58, 108, 179, 68})

	Instruction_DradexSwap = ag_binary.TypeID([8]byte{34, 146, 160, 38, 51, 85, 58, 151})

	Instruction_LifinityV2Swap = ag_binary.TypeID([8]byte{19, 152, 195, 245, 187, 144, 74, 227})

	Instruction_RaydiumClmmSwap = ag_binary.TypeID([8]byte{47, 184, 213, 193, 35, 210, 87, 4})

	Instruction_PhoenixSwap = ag_binary.TypeID([8]byte{99, 66, 223, 95, 236, 131, 26, 140})

	Instruction_SymmetrySwap = ag_binary.TypeID([8]byte{17, 114, 237, 234, 154, 12, 185, 116})

	Instruction_HeliumTreasuryManagementRedeemV0 = ag_binary.TypeID([8]byte{163, 159, 163, 25, 243, 161, 108, 74})

	Instruction_GoosefxV2Swap = ag_binary.TypeID([8]byte{178, 108, 208, 137, 154, 194, 168, 213})

	Instruction_PerpsSwap = ag_binary.TypeID([8]byte{147, 22, 108, 178, 110, 18, 171, 34})

	Instruction_PerpsAddLiquidity = ag_binary.TypeID([8]byte{170, 238, 222, 214, 245, 202, 108, 155})

	Instruction_PerpsRemoveLiquidity = ag_binary.TypeID([8]byte{79, 211, 232, 140, 8, 78, 220, 34})

	Instruction_MeteoraDlmmSwap = ag_binary.TypeID([8]byte{127, 64, 37, 138, 173, 243, 207, 84})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_Route:
		return "Route"
	case Instruction_RouteWithTokenLedger:
		return "RouteWithTokenLedger"
	case Instruction_SharedAccountsRoute:
		return "SharedAccountsRoute"
	case Instruction_SharedAccountsRouteWithTokenLedger:
		return "SharedAccountsRouteWithTokenLedger"
	case Instruction_SharedAccountsExactOutRoute:
		return "SharedAccountsExactOutRoute"
	case Instruction_SetTokenLedger:
		return "SetTokenLedger"
	case Instruction_CreateOpenOrders:
		return "CreateOpenOrders"
	case Instruction_CreateProgramOpenOrders:
		return "CreateProgramOpenOrders"
	case Instruction_CreateTokenLedger:
		return "CreateTokenLedger"
	case Instruction_MercurialSwap:
		return "MercurialSwap"
	case Instruction_CykuraSwap:
		return "CykuraSwap"
	case Instruction_SerumSwap:
		return "SerumSwap"
	case Instruction_SaberSwap:
		return "SaberSwap"
	case Instruction_SaberAddDecimals:
		return "SaberAddDecimals"
	case Instruction_TokenSwap:
		return "TokenSwap"
	case Instruction_TokenSwapV2:
		return "TokenSwapV2"
	case Instruction_SenchaSwap:
		return "SenchaSwap"
	case Instruction_StepSwap:
		return "StepSwap"
	case Instruction_CropperSwap:
		return "CropperSwap"
	case Instruction_RaydiumSwap:
		return "RaydiumSwap"
	case Instruction_CremaSwap:
		return "CremaSwap"
	case Instruction_LifinitySwap:
		return "LifinitySwap"
	case Instruction_MarinadeDeposit:
		return "MarinadeDeposit"
	case Instruction_MarinadeUnstake:
		return "MarinadeUnstake"
	case Instruction_AldrinSwap:
		return "AldrinSwap"
	case Instruction_AldrinV2Swap:
		return "AldrinV2Swap"
	case Instruction_WhirlpoolSwap:
		return "WhirlpoolSwap"
	case Instruction_InvariantSwap:
		return "InvariantSwap"
	case Instruction_MeteoraSwap:
		return "MeteoraSwap"
	case Instruction_GoosefxSwap:
		return "GoosefxSwap"
	case Instruction_DeltafiSwap:
		return "DeltafiSwap"
	case Instruction_BalansolSwap:
		return "BalansolSwap"
	case Instruction_MarcoPoloSwap:
		return "MarcoPoloSwap"
	case Instruction_DradexSwap:
		return "DradexSwap"
	case Instruction_LifinityV2Swap:
		return "LifinityV2Swap"
	case Instruction_RaydiumClmmSwap:
		return "RaydiumClmmSwap"
	case Instruction_PhoenixSwap:
		return "PhoenixSwap"
	case Instruction_SymmetrySwap:
		return "SymmetrySwap"
	case Instruction_HeliumTreasuryManagementRedeemV0:
		return "HeliumTreasuryManagementRedeemV0"
	case Instruction_GoosefxV2Swap:
		return "GoosefxV2Swap"
	case Instruction_PerpsSwap:
		return "PerpsSwap"
	case Instruction_PerpsAddLiquidity:
		return "PerpsAddLiquidity"
	case Instruction_PerpsRemoveLiquidity:
		return "PerpsRemoveLiquidity"
	case Instruction_MeteoraDlmmSwap:
		return "MeteoraDlmmSwap"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"route", (*Route)(nil),
		},
		{
			"route_with_token_ledger", (*RouteWithTokenLedger)(nil),
		},
		{
			"shared_accounts_route", (*SharedAccountsRoute)(nil),
		},
		{
			"shared_accounts_route_with_token_ledger", (*SharedAccountsRouteWithTokenLedger)(nil),
		},
		{
			"shared_accounts_exact_out_route", (*SharedAccountsExactOutRoute)(nil),
		},
		{
			"set_token_ledger", (*SetTokenLedger)(nil),
		},
		{
			"create_open_orders", (*CreateOpenOrders)(nil),
		},
		{
			"create_program_open_orders", (*CreateProgramOpenOrders)(nil),
		},
		{
			"create_token_ledger", (*CreateTokenLedger)(nil),
		},
		{
			"mercurial_swap", (*MercurialSwap)(nil),
		},
		{
			"cykura_swap", (*CykuraSwap)(nil),
		},
		{
			"serum_swap", (*SerumSwap)(nil),
		},
		{
			"saber_swap", (*SaberSwap)(nil),
		},
		{
			"saber_add_decimals", (*SaberAddDecimals)(nil),
		},
		{
			"token_swap", (*TokenSwap)(nil),
		},
		{
			"token_swap_v2", (*TokenSwapV2)(nil),
		},
		{
			"sencha_swap", (*SenchaSwap)(nil),
		},
		{
			"step_swap", (*StepSwap)(nil),
		},
		{
			"cropper_swap", (*CropperSwap)(nil),
		},
		{
			"raydium_swap", (*RaydiumSwap)(nil),
		},
		{
			"crema_swap", (*CremaSwap)(nil),
		},
		{
			"lifinity_swap", (*LifinitySwap)(nil),
		},
		{
			"marinade_deposit", (*MarinadeDeposit)(nil),
		},
		{
			"marinade_unstake", (*MarinadeUnstake)(nil),
		},
		{
			"aldrin_swap", (*AldrinSwap)(nil),
		},
		{
			"aldrin_v2_swap", (*AldrinV2Swap)(nil),
		},
		{
			"whirlpool_swap", (*WhirlpoolSwap)(nil),
		},
		{
			"invariant_swap", (*InvariantSwap)(nil),
		},
		{
			"meteora_swap", (*MeteoraSwap)(nil),
		},
		{
			"goosefx_swap", (*GoosefxSwap)(nil),
		},
		{
			"deltafi_swap", (*DeltafiSwap)(nil),
		},
		{
			"balansol_swap", (*BalansolSwap)(nil),
		},
		{
			"marco_polo_swap", (*MarcoPoloSwap)(nil),
		},
		{
			"dradex_swap", (*DradexSwap)(nil),
		},
		{
			"lifinity_v2_swap", (*LifinityV2Swap)(nil),
		},
		{
			"raydium_clmm_swap", (*RaydiumClmmSwap)(nil),
		},
		{
			"phoenix_swap", (*PhoenixSwap)(nil),
		},
		{
			"symmetry_swap", (*SymmetrySwap)(nil),
		},
		{
			"helium_treasury_management_redeem_v0", (*HeliumTreasuryManagementRedeemV0)(nil),
		},
		{
			"goosefx_v2_swap", (*GoosefxV2Swap)(nil),
		},
		{
			"perps_swap", (*PerpsSwap)(nil),
		},
		{
			"perps_add_liquidity", (*PerpsAddLiquidity)(nil),
		},
		{
			"perps_remove_liquidity", (*PerpsRemoveLiquidity)(nil),
		},
		{
			"meteora_dlmm_swap", (*MeteoraDlmmSwap)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
