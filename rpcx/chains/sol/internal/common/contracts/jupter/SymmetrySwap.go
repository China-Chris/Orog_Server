// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SymmetrySwap is the `symmetrySwap` instruction.
type SymmetrySwap struct {

	// [0] = [] swapProgram
	//
	// [1] = [] buyer
	//
	// [2] = [WRITE] fundState
	//
	// [3] = [] pdaAccount
	//
	// [4] = [WRITE] pdaFromTokenAccount
	//
	// [5] = [WRITE] buyerFromTokenAccount
	//
	// [6] = [WRITE] pdaToTokenAccount
	//
	// [7] = [WRITE] buyerToTokenAccount
	//
	// [8] = [WRITE] swapFeeAccount
	//
	// [9] = [WRITE] hostFeeAccount
	//
	// [10] = [WRITE] managerFeeAccount
	//
	// [11] = [] tokenList
	//
	// [12] = [] prismData
	//
	// [13] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSymmetrySwapInstructionBuilder creates a new `SymmetrySwap` instruction builder.
func NewSymmetrySwapInstructionBuilder() *SymmetrySwap {
	nd := &SymmetrySwap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 14),
	}
	return nd
}

// SetSwapProgramAccount sets the "swapProgram" account.
func (inst *SymmetrySwap) SetSwapProgramAccount(swapProgram ag_solanago.PublicKey) *SymmetrySwap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(swapProgram)
	return inst
}

// GetSwapProgramAccount gets the "swapProgram" account.
func (inst *SymmetrySwap) GetSwapProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetBuyerAccount sets the "buyer" account.
func (inst *SymmetrySwap) SetBuyerAccount(buyer ag_solanago.PublicKey) *SymmetrySwap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(buyer)
	return inst
}

// GetBuyerAccount gets the "buyer" account.
func (inst *SymmetrySwap) GetBuyerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetFundStateAccount sets the "fundState" account.
func (inst *SymmetrySwap) SetFundStateAccount(fundState ag_solanago.PublicKey) *SymmetrySwap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(fundState).WRITE()
	return inst
}

// GetFundStateAccount gets the "fundState" account.
func (inst *SymmetrySwap) GetFundStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPdaAccountAccount sets the "pdaAccount" account.
func (inst *SymmetrySwap) SetPdaAccountAccount(pdaAccount ag_solanago.PublicKey) *SymmetrySwap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(pdaAccount)
	return inst
}

// GetPdaAccountAccount gets the "pdaAccount" account.
func (inst *SymmetrySwap) GetPdaAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPdaFromTokenAccountAccount sets the "pdaFromTokenAccount" account.
func (inst *SymmetrySwap) SetPdaFromTokenAccountAccount(pdaFromTokenAccount ag_solanago.PublicKey) *SymmetrySwap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(pdaFromTokenAccount).WRITE()
	return inst
}

// GetPdaFromTokenAccountAccount gets the "pdaFromTokenAccount" account.
func (inst *SymmetrySwap) GetPdaFromTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetBuyerFromTokenAccountAccount sets the "buyerFromTokenAccount" account.
func (inst *SymmetrySwap) SetBuyerFromTokenAccountAccount(buyerFromTokenAccount ag_solanago.PublicKey) *SymmetrySwap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(buyerFromTokenAccount).WRITE()
	return inst
}

// GetBuyerFromTokenAccountAccount gets the "buyerFromTokenAccount" account.
func (inst *SymmetrySwap) GetBuyerFromTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPdaToTokenAccountAccount sets the "pdaToTokenAccount" account.
func (inst *SymmetrySwap) SetPdaToTokenAccountAccount(pdaToTokenAccount ag_solanago.PublicKey) *SymmetrySwap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(pdaToTokenAccount).WRITE()
	return inst
}

// GetPdaToTokenAccountAccount gets the "pdaToTokenAccount" account.
func (inst *SymmetrySwap) GetPdaToTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetBuyerToTokenAccountAccount sets the "buyerToTokenAccount" account.
func (inst *SymmetrySwap) SetBuyerToTokenAccountAccount(buyerToTokenAccount ag_solanago.PublicKey) *SymmetrySwap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(buyerToTokenAccount).WRITE()
	return inst
}

// GetBuyerToTokenAccountAccount gets the "buyerToTokenAccount" account.
func (inst *SymmetrySwap) GetBuyerToTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSwapFeeAccountAccount sets the "swapFeeAccount" account.
func (inst *SymmetrySwap) SetSwapFeeAccountAccount(swapFeeAccount ag_solanago.PublicKey) *SymmetrySwap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(swapFeeAccount).WRITE()
	return inst
}

// GetSwapFeeAccountAccount gets the "swapFeeAccount" account.
func (inst *SymmetrySwap) GetSwapFeeAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetHostFeeAccountAccount sets the "hostFeeAccount" account.
func (inst *SymmetrySwap) SetHostFeeAccountAccount(hostFeeAccount ag_solanago.PublicKey) *SymmetrySwap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(hostFeeAccount).WRITE()
	return inst
}

// GetHostFeeAccountAccount gets the "hostFeeAccount" account.
func (inst *SymmetrySwap) GetHostFeeAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetManagerFeeAccountAccount sets the "managerFeeAccount" account.
func (inst *SymmetrySwap) SetManagerFeeAccountAccount(managerFeeAccount ag_solanago.PublicKey) *SymmetrySwap {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(managerFeeAccount).WRITE()
	return inst
}

// GetManagerFeeAccountAccount gets the "managerFeeAccount" account.
func (inst *SymmetrySwap) GetManagerFeeAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenListAccount sets the "tokenList" account.
func (inst *SymmetrySwap) SetTokenListAccount(tokenList ag_solanago.PublicKey) *SymmetrySwap {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenList)
	return inst
}

// GetTokenListAccount gets the "tokenList" account.
func (inst *SymmetrySwap) GetTokenListAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetPrismDataAccount sets the "prismData" account.
func (inst *SymmetrySwap) SetPrismDataAccount(prismData ag_solanago.PublicKey) *SymmetrySwap {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(prismData)
	return inst
}

// GetPrismDataAccount gets the "prismData" account.
func (inst *SymmetrySwap) GetPrismDataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *SymmetrySwap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *SymmetrySwap {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *SymmetrySwap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

func (inst SymmetrySwap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SymmetrySwap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SymmetrySwap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SymmetrySwap) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.SwapProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Buyer is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.FundState is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PdaAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.PdaFromTokenAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.BuyerFromTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.PdaToTokenAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.BuyerToTokenAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SwapFeeAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.HostFeeAccount is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.ManagerFeeAccount is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenList is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.PrismData is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *SymmetrySwap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SymmetrySwap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=14]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("   swapProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         buyer", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     fundState", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("           pda", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("  pdaFromToken", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("buyerFromToken", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("    pdaToToken", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("  buyerToToken", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("       swapFee", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("       hostFee", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("    managerFee", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("     tokenList", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("     prismData", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("  tokenProgram", inst.AccountMetaSlice.Get(13)))
					})
				})
		})
}

func (obj SymmetrySwap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *SymmetrySwap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewSymmetrySwapInstruction declares a new SymmetrySwap instruction with the provided parameters and accounts.
func NewSymmetrySwapInstruction(
	// Accounts:
	swapProgram ag_solanago.PublicKey,
	buyer ag_solanago.PublicKey,
	fundState ag_solanago.PublicKey,
	pdaAccount ag_solanago.PublicKey,
	pdaFromTokenAccount ag_solanago.PublicKey,
	buyerFromTokenAccount ag_solanago.PublicKey,
	pdaToTokenAccount ag_solanago.PublicKey,
	buyerToTokenAccount ag_solanago.PublicKey,
	swapFeeAccount ag_solanago.PublicKey,
	hostFeeAccount ag_solanago.PublicKey,
	managerFeeAccount ag_solanago.PublicKey,
	tokenList ag_solanago.PublicKey,
	prismData ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *SymmetrySwap {
	return NewSymmetrySwapInstructionBuilder().
		SetSwapProgramAccount(swapProgram).
		SetBuyerAccount(buyer).
		SetFundStateAccount(fundState).
		SetPdaAccountAccount(pdaAccount).
		SetPdaFromTokenAccountAccount(pdaFromTokenAccount).
		SetBuyerFromTokenAccountAccount(buyerFromTokenAccount).
		SetPdaToTokenAccountAccount(pdaToTokenAccount).
		SetBuyerToTokenAccountAccount(buyerToTokenAccount).
		SetSwapFeeAccountAccount(swapFeeAccount).
		SetHostFeeAccountAccount(hostFeeAccount).
		SetManagerFeeAccountAccount(managerFeeAccount).
		SetTokenListAccount(tokenList).
		SetPrismDataAccount(prismData).
		SetTokenProgramAccount(tokenProgram)
}
