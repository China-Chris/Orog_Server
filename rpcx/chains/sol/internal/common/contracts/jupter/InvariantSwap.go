// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InvariantSwap is the `invariantSwap` instruction.
type InvariantSwap struct {

	// [0] = [] swapProgram
	//
	// [1] = [] state
	//
	// [2] = [WRITE] pool
	//
	// [3] = [WRITE] tickmap
	//
	// [4] = [WRITE] accountX
	//
	// [5] = [WRITE] accountY
	//
	// [6] = [WRITE] reserveX
	//
	// [7] = [WRITE] reserveY
	//
	// [8] = [] owner
	//
	// [9] = [] programAuthority
	//
	// [10] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInvariantSwapInstructionBuilder creates a new `InvariantSwap` instruction builder.
func NewInvariantSwapInstructionBuilder() *InvariantSwap {
	nd := &InvariantSwap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 11),
	}
	return nd
}

// SetSwapProgramAccount sets the "swapProgram" account.
func (inst *InvariantSwap) SetSwapProgramAccount(swapProgram ag_solanago.PublicKey) *InvariantSwap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(swapProgram)
	return inst
}

// GetSwapProgramAccount gets the "swapProgram" account.
func (inst *InvariantSwap) GetSwapProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStateAccount sets the "state" account.
func (inst *InvariantSwap) SetStateAccount(state ag_solanago.PublicKey) *InvariantSwap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *InvariantSwap) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPoolAccount sets the "pool" account.
func (inst *InvariantSwap) SetPoolAccount(pool ag_solanago.PublicKey) *InvariantSwap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *InvariantSwap) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTickmapAccount sets the "tickmap" account.
func (inst *InvariantSwap) SetTickmapAccount(tickmap ag_solanago.PublicKey) *InvariantSwap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tickmap).WRITE()
	return inst
}

// GetTickmapAccount gets the "tickmap" account.
func (inst *InvariantSwap) GetTickmapAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAccountXAccount sets the "accountX" account.
func (inst *InvariantSwap) SetAccountXAccount(accountX ag_solanago.PublicKey) *InvariantSwap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(accountX).WRITE()
	return inst
}

// GetAccountXAccount gets the "accountX" account.
func (inst *InvariantSwap) GetAccountXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetAccountYAccount sets the "accountY" account.
func (inst *InvariantSwap) SetAccountYAccount(accountY ag_solanago.PublicKey) *InvariantSwap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(accountY).WRITE()
	return inst
}

// GetAccountYAccount gets the "accountY" account.
func (inst *InvariantSwap) GetAccountYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetReserveXAccount sets the "reserveX" account.
func (inst *InvariantSwap) SetReserveXAccount(reserveX ag_solanago.PublicKey) *InvariantSwap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(reserveX).WRITE()
	return inst
}

// GetReserveXAccount gets the "reserveX" account.
func (inst *InvariantSwap) GetReserveXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetReserveYAccount sets the "reserveY" account.
func (inst *InvariantSwap) SetReserveYAccount(reserveY ag_solanago.PublicKey) *InvariantSwap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(reserveY).WRITE()
	return inst
}

// GetReserveYAccount gets the "reserveY" account.
func (inst *InvariantSwap) GetReserveYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetOwnerAccount sets the "owner" account.
func (inst *InvariantSwap) SetOwnerAccount(owner ag_solanago.PublicKey) *InvariantSwap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(owner)
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *InvariantSwap) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetProgramAuthorityAccount sets the "programAuthority" account.
func (inst *InvariantSwap) SetProgramAuthorityAccount(programAuthority ag_solanago.PublicKey) *InvariantSwap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(programAuthority)
	return inst
}

// GetProgramAuthorityAccount gets the "programAuthority" account.
func (inst *InvariantSwap) GetProgramAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *InvariantSwap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *InvariantSwap {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *InvariantSwap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

func (inst InvariantSwap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InvariantSwap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InvariantSwap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InvariantSwap) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.SwapProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Tickmap is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.AccountX is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.AccountY is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.ReserveX is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.ReserveY is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.ProgramAuthority is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *InvariantSwap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InvariantSwap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=11]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     swapProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           state", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("            pool", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         tickmap", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        accountX", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("        accountY", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("        reserveX", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("        reserveY", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("           owner", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("programAuthority", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("    tokenProgram", inst.AccountMetaSlice.Get(10)))
					})
				})
		})
}

func (obj InvariantSwap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *InvariantSwap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewInvariantSwapInstruction declares a new InvariantSwap instruction with the provided parameters and accounts.
func NewInvariantSwapInstruction(
	// Accounts:
	swapProgram ag_solanago.PublicKey,
	state ag_solanago.PublicKey,
	pool ag_solanago.PublicKey,
	tickmap ag_solanago.PublicKey,
	accountX ag_solanago.PublicKey,
	accountY ag_solanago.PublicKey,
	reserveX ag_solanago.PublicKey,
	reserveY ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	programAuthority ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *InvariantSwap {
	return NewInvariantSwapInstructionBuilder().
		SetSwapProgramAccount(swapProgram).
		SetStateAccount(state).
		SetPoolAccount(pool).
		SetTickmapAccount(tickmap).
		SetAccountXAccount(accountX).
		SetAccountYAccount(accountY).
		SetReserveXAccount(reserveX).
		SetReserveYAccount(reserveY).
		SetOwnerAccount(owner).
		SetProgramAuthorityAccount(programAuthority).
		SetTokenProgramAccount(tokenProgram)
}
