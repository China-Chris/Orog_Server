// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MarcoPoloSwap is the `marcoPoloSwap` instruction.
type MarcoPoloSwap struct {

	// [0] = [] swapProgram
	//
	// [1] = [] state
	//
	// [2] = [WRITE] pool
	//
	// [3] = [] tokenX
	//
	// [4] = [] tokenY
	//
	// [5] = [WRITE] poolXAccount
	//
	// [6] = [WRITE] poolYAccount
	//
	// [7] = [WRITE] swapperXAccount
	//
	// [8] = [WRITE] swapperYAccount
	//
	// [9] = [WRITE] swapper
	//
	// [10] = [WRITE] referrerXAccount
	//
	// [11] = [WRITE] referrerYAccount
	//
	// [12] = [WRITE] referrer
	//
	// [13] = [] programAuthority
	//
	// [14] = [] systemProgram
	//
	// [15] = [] tokenProgram
	//
	// [16] = [] associatedTokenProgram
	//
	// [17] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMarcoPoloSwapInstructionBuilder creates a new `MarcoPoloSwap` instruction builder.
func NewMarcoPoloSwapInstructionBuilder() *MarcoPoloSwap {
	nd := &MarcoPoloSwap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 18),
	}
	return nd
}

// SetSwapProgramAccount sets the "swapProgram" account.
func (inst *MarcoPoloSwap) SetSwapProgramAccount(swapProgram ag_solanago.PublicKey) *MarcoPoloSwap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(swapProgram)
	return inst
}

// GetSwapProgramAccount gets the "swapProgram" account.
func (inst *MarcoPoloSwap) GetSwapProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStateAccount sets the "state" account.
func (inst *MarcoPoloSwap) SetStateAccount(state ag_solanago.PublicKey) *MarcoPoloSwap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *MarcoPoloSwap) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPoolAccount sets the "pool" account.
func (inst *MarcoPoloSwap) SetPoolAccount(pool ag_solanago.PublicKey) *MarcoPoloSwap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *MarcoPoloSwap) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenXAccount sets the "tokenX" account.
func (inst *MarcoPoloSwap) SetTokenXAccount(tokenX ag_solanago.PublicKey) *MarcoPoloSwap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenX)
	return inst
}

// GetTokenXAccount gets the "tokenX" account.
func (inst *MarcoPoloSwap) GetTokenXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenYAccount sets the "tokenY" account.
func (inst *MarcoPoloSwap) SetTokenYAccount(tokenY ag_solanago.PublicKey) *MarcoPoloSwap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenY)
	return inst
}

// GetTokenYAccount gets the "tokenY" account.
func (inst *MarcoPoloSwap) GetTokenYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetPoolXAccountAccount sets the "poolXAccount" account.
func (inst *MarcoPoloSwap) SetPoolXAccountAccount(poolXAccount ag_solanago.PublicKey) *MarcoPoloSwap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(poolXAccount).WRITE()
	return inst
}

// GetPoolXAccountAccount gets the "poolXAccount" account.
func (inst *MarcoPoloSwap) GetPoolXAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPoolYAccountAccount sets the "poolYAccount" account.
func (inst *MarcoPoloSwap) SetPoolYAccountAccount(poolYAccount ag_solanago.PublicKey) *MarcoPoloSwap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(poolYAccount).WRITE()
	return inst
}

// GetPoolYAccountAccount gets the "poolYAccount" account.
func (inst *MarcoPoloSwap) GetPoolYAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSwapperXAccountAccount sets the "swapperXAccount" account.
func (inst *MarcoPoloSwap) SetSwapperXAccountAccount(swapperXAccount ag_solanago.PublicKey) *MarcoPoloSwap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(swapperXAccount).WRITE()
	return inst
}

// GetSwapperXAccountAccount gets the "swapperXAccount" account.
func (inst *MarcoPoloSwap) GetSwapperXAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSwapperYAccountAccount sets the "swapperYAccount" account.
func (inst *MarcoPoloSwap) SetSwapperYAccountAccount(swapperYAccount ag_solanago.PublicKey) *MarcoPoloSwap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(swapperYAccount).WRITE()
	return inst
}

// GetSwapperYAccountAccount gets the "swapperYAccount" account.
func (inst *MarcoPoloSwap) GetSwapperYAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetSwapperAccount sets the "swapper" account.
func (inst *MarcoPoloSwap) SetSwapperAccount(swapper ag_solanago.PublicKey) *MarcoPoloSwap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(swapper).WRITE()
	return inst
}

// GetSwapperAccount gets the "swapper" account.
func (inst *MarcoPoloSwap) GetSwapperAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetReferrerXAccountAccount sets the "referrerXAccount" account.
func (inst *MarcoPoloSwap) SetReferrerXAccountAccount(referrerXAccount ag_solanago.PublicKey) *MarcoPoloSwap {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(referrerXAccount).WRITE()
	return inst
}

// GetReferrerXAccountAccount gets the "referrerXAccount" account.
func (inst *MarcoPoloSwap) GetReferrerXAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetReferrerYAccountAccount sets the "referrerYAccount" account.
func (inst *MarcoPoloSwap) SetReferrerYAccountAccount(referrerYAccount ag_solanago.PublicKey) *MarcoPoloSwap {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(referrerYAccount).WRITE()
	return inst
}

// GetReferrerYAccountAccount gets the "referrerYAccount" account.
func (inst *MarcoPoloSwap) GetReferrerYAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetReferrerAccount sets the "referrer" account.
func (inst *MarcoPoloSwap) SetReferrerAccount(referrer ag_solanago.PublicKey) *MarcoPoloSwap {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(referrer).WRITE()
	return inst
}

// GetReferrerAccount gets the "referrer" account.
func (inst *MarcoPoloSwap) GetReferrerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetProgramAuthorityAccount sets the "programAuthority" account.
func (inst *MarcoPoloSwap) SetProgramAuthorityAccount(programAuthority ag_solanago.PublicKey) *MarcoPoloSwap {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(programAuthority)
	return inst
}

// GetProgramAuthorityAccount gets the "programAuthority" account.
func (inst *MarcoPoloSwap) GetProgramAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *MarcoPoloSwap) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *MarcoPoloSwap {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *MarcoPoloSwap) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *MarcoPoloSwap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *MarcoPoloSwap {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *MarcoPoloSwap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *MarcoPoloSwap) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *MarcoPoloSwap {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *MarcoPoloSwap) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetRentAccount sets the "rent" account.
func (inst *MarcoPoloSwap) SetRentAccount(rent ag_solanago.PublicKey) *MarcoPoloSwap {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *MarcoPoloSwap) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

func (inst MarcoPoloSwap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MarcoPoloSwap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MarcoPoloSwap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MarcoPoloSwap) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.SwapProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenX is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenY is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.PoolXAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.PoolYAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SwapperXAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SwapperYAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Swapper is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.ReferrerXAccount is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.ReferrerYAccount is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.Referrer is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.ProgramAuthority is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *MarcoPoloSwap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MarcoPoloSwap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=18]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           swapProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                 state", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                  pool", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                tokenX", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                tokenY", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                 poolX", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                 poolY", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("              swapperX", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("              swapperY", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("               swapper", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("             referrerX", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("             referrerY", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("              referrer", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("      programAuthority", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("                  rent", inst.AccountMetaSlice.Get(17)))
					})
				})
		})
}

func (obj MarcoPoloSwap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *MarcoPoloSwap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewMarcoPoloSwapInstruction declares a new MarcoPoloSwap instruction with the provided parameters and accounts.
func NewMarcoPoloSwapInstruction(
	// Accounts:
	swapProgram ag_solanago.PublicKey,
	state ag_solanago.PublicKey,
	pool ag_solanago.PublicKey,
	tokenX ag_solanago.PublicKey,
	tokenY ag_solanago.PublicKey,
	poolXAccount ag_solanago.PublicKey,
	poolYAccount ag_solanago.PublicKey,
	swapperXAccount ag_solanago.PublicKey,
	swapperYAccount ag_solanago.PublicKey,
	swapper ag_solanago.PublicKey,
	referrerXAccount ag_solanago.PublicKey,
	referrerYAccount ag_solanago.PublicKey,
	referrer ag_solanago.PublicKey,
	programAuthority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *MarcoPoloSwap {
	return NewMarcoPoloSwapInstructionBuilder().
		SetSwapProgramAccount(swapProgram).
		SetStateAccount(state).
		SetPoolAccount(pool).
		SetTokenXAccount(tokenX).
		SetTokenYAccount(tokenY).
		SetPoolXAccountAccount(poolXAccount).
		SetPoolYAccountAccount(poolYAccount).
		SetSwapperXAccountAccount(swapperXAccount).
		SetSwapperYAccountAccount(swapperYAccount).
		SetSwapperAccount(swapper).
		SetReferrerXAccountAccount(referrerXAccount).
		SetReferrerYAccountAccount(referrerYAccount).
		SetReferrerAccount(referrer).
		SetProgramAuthorityAccount(programAuthority).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetRentAccount(rent)
}
