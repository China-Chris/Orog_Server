// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SaberAddDecimals is the `saberAddDecimals` instruction.
type SaberAddDecimals struct {

	// [0] = [] addDecimalsProgram
	//
	// [1] = [] wrapper
	//
	// [2] = [WRITE] wrapperMint
	//
	// [3] = [WRITE] wrapperUnderlyingTokens
	//
	// [4] = [] owner
	//
	// [5] = [WRITE] userUnderlyingTokens
	//
	// [6] = [WRITE] userWrappedTokens
	//
	// [7] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSaberAddDecimalsInstructionBuilder creates a new `SaberAddDecimals` instruction builder.
func NewSaberAddDecimalsInstructionBuilder() *SaberAddDecimals {
	nd := &SaberAddDecimals{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetAddDecimalsProgramAccount sets the "addDecimalsProgram" account.
func (inst *SaberAddDecimals) SetAddDecimalsProgramAccount(addDecimalsProgram ag_solanago.PublicKey) *SaberAddDecimals {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(addDecimalsProgram)
	return inst
}

// GetAddDecimalsProgramAccount gets the "addDecimalsProgram" account.
func (inst *SaberAddDecimals) GetAddDecimalsProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetWrapperAccount sets the "wrapper" account.
func (inst *SaberAddDecimals) SetWrapperAccount(wrapper ag_solanago.PublicKey) *SaberAddDecimals {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(wrapper)
	return inst
}

// GetWrapperAccount gets the "wrapper" account.
func (inst *SaberAddDecimals) GetWrapperAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetWrapperMintAccount sets the "wrapperMint" account.
func (inst *SaberAddDecimals) SetWrapperMintAccount(wrapperMint ag_solanago.PublicKey) *SaberAddDecimals {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(wrapperMint).WRITE()
	return inst
}

// GetWrapperMintAccount gets the "wrapperMint" account.
func (inst *SaberAddDecimals) GetWrapperMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetWrapperUnderlyingTokensAccount sets the "wrapperUnderlyingTokens" account.
func (inst *SaberAddDecimals) SetWrapperUnderlyingTokensAccount(wrapperUnderlyingTokens ag_solanago.PublicKey) *SaberAddDecimals {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(wrapperUnderlyingTokens).WRITE()
	return inst
}

// GetWrapperUnderlyingTokensAccount gets the "wrapperUnderlyingTokens" account.
func (inst *SaberAddDecimals) GetWrapperUnderlyingTokensAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetOwnerAccount sets the "owner" account.
func (inst *SaberAddDecimals) SetOwnerAccount(owner ag_solanago.PublicKey) *SaberAddDecimals {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(owner)
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *SaberAddDecimals) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetUserUnderlyingTokensAccount sets the "userUnderlyingTokens" account.
func (inst *SaberAddDecimals) SetUserUnderlyingTokensAccount(userUnderlyingTokens ag_solanago.PublicKey) *SaberAddDecimals {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(userUnderlyingTokens).WRITE()
	return inst
}

// GetUserUnderlyingTokensAccount gets the "userUnderlyingTokens" account.
func (inst *SaberAddDecimals) GetUserUnderlyingTokensAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetUserWrappedTokensAccount sets the "userWrappedTokens" account.
func (inst *SaberAddDecimals) SetUserWrappedTokensAccount(userWrappedTokens ag_solanago.PublicKey) *SaberAddDecimals {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(userWrappedTokens).WRITE()
	return inst
}

// GetUserWrappedTokensAccount gets the "userWrappedTokens" account.
func (inst *SaberAddDecimals) GetUserWrappedTokensAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *SaberAddDecimals) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *SaberAddDecimals {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *SaberAddDecimals) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst SaberAddDecimals) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SaberAddDecimals,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SaberAddDecimals) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SaberAddDecimals) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.AddDecimalsProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Wrapper is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.WrapperMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.WrapperUnderlyingTokens is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.UserUnderlyingTokens is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.UserWrappedTokens is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *SaberAddDecimals) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SaberAddDecimals")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     addDecimalsProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                wrapper", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("            wrapperMint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("wrapperUnderlyingTokens", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                  owner", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("   userUnderlyingTokens", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("      userWrappedTokens", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("           tokenProgram", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj SaberAddDecimals) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *SaberAddDecimals) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewSaberAddDecimalsInstruction declares a new SaberAddDecimals instruction with the provided parameters and accounts.
func NewSaberAddDecimalsInstruction(
	// Accounts:
	addDecimalsProgram ag_solanago.PublicKey,
	wrapper ag_solanago.PublicKey,
	wrapperMint ag_solanago.PublicKey,
	wrapperUnderlyingTokens ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	userUnderlyingTokens ag_solanago.PublicKey,
	userWrappedTokens ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *SaberAddDecimals {
	return NewSaberAddDecimalsInstructionBuilder().
		SetAddDecimalsProgramAccount(addDecimalsProgram).
		SetWrapperAccount(wrapper).
		SetWrapperMintAccount(wrapperMint).
		SetWrapperUnderlyingTokensAccount(wrapperUnderlyingTokens).
		SetOwnerAccount(owner).
		SetUserUnderlyingTokensAccount(userUnderlyingTokens).
		SetUserWrappedTokensAccount(userWrappedTokens).
		SetTokenProgramAccount(tokenProgram)
}
