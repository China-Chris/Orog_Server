// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MeteoraSwap is the `meteoraSwap` instruction.
type MeteoraSwap struct {

	// [0] = [] swapProgram
	//
	// [1] = [WRITE] pool
	//
	// [2] = [WRITE] userSourceToken
	//
	// [3] = [WRITE] userDestinationToken
	//
	// [4] = [WRITE] aVault
	//
	// [5] = [WRITE] bVault
	//
	// [6] = [WRITE] aTokenVault
	//
	// [7] = [WRITE] bTokenVault
	//
	// [8] = [WRITE] aVaultLpMint
	//
	// [9] = [WRITE] bVaultLpMint
	//
	// [10] = [WRITE] aVaultLp
	//
	// [11] = [WRITE] bVaultLp
	//
	// [12] = [WRITE] adminTokenFee
	//
	// [13] = [] user
	//
	// [14] = [] vaultProgram
	//
	// [15] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMeteoraSwapInstructionBuilder creates a new `MeteoraSwap` instruction builder.
func NewMeteoraSwapInstructionBuilder() *MeteoraSwap {
	nd := &MeteoraSwap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 16),
	}
	return nd
}

// SetSwapProgramAccount sets the "swapProgram" account.
func (inst *MeteoraSwap) SetSwapProgramAccount(swapProgram ag_solanago.PublicKey) *MeteoraSwap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(swapProgram)
	return inst
}

// GetSwapProgramAccount gets the "swapProgram" account.
func (inst *MeteoraSwap) GetSwapProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPoolAccount sets the "pool" account.
func (inst *MeteoraSwap) SetPoolAccount(pool ag_solanago.PublicKey) *MeteoraSwap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *MeteoraSwap) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetUserSourceTokenAccount sets the "userSourceToken" account.
func (inst *MeteoraSwap) SetUserSourceTokenAccount(userSourceToken ag_solanago.PublicKey) *MeteoraSwap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(userSourceToken).WRITE()
	return inst
}

// GetUserSourceTokenAccount gets the "userSourceToken" account.
func (inst *MeteoraSwap) GetUserSourceTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUserDestinationTokenAccount sets the "userDestinationToken" account.
func (inst *MeteoraSwap) SetUserDestinationTokenAccount(userDestinationToken ag_solanago.PublicKey) *MeteoraSwap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(userDestinationToken).WRITE()
	return inst
}

// GetUserDestinationTokenAccount gets the "userDestinationToken" account.
func (inst *MeteoraSwap) GetUserDestinationTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAVaultAccount sets the "aVault" account.
func (inst *MeteoraSwap) SetAVaultAccount(aVault ag_solanago.PublicKey) *MeteoraSwap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(aVault).WRITE()
	return inst
}

// GetAVaultAccount gets the "aVault" account.
func (inst *MeteoraSwap) GetAVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetBVaultAccount sets the "bVault" account.
func (inst *MeteoraSwap) SetBVaultAccount(bVault ag_solanago.PublicKey) *MeteoraSwap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(bVault).WRITE()
	return inst
}

// GetBVaultAccount gets the "bVault" account.
func (inst *MeteoraSwap) GetBVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetATokenVaultAccount sets the "aTokenVault" account.
func (inst *MeteoraSwap) SetATokenVaultAccount(aTokenVault ag_solanago.PublicKey) *MeteoraSwap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(aTokenVault).WRITE()
	return inst
}

// GetATokenVaultAccount gets the "aTokenVault" account.
func (inst *MeteoraSwap) GetATokenVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetBTokenVaultAccount sets the "bTokenVault" account.
func (inst *MeteoraSwap) SetBTokenVaultAccount(bTokenVault ag_solanago.PublicKey) *MeteoraSwap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(bTokenVault).WRITE()
	return inst
}

// GetBTokenVaultAccount gets the "bTokenVault" account.
func (inst *MeteoraSwap) GetBTokenVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetAVaultLpMintAccount sets the "aVaultLpMint" account.
func (inst *MeteoraSwap) SetAVaultLpMintAccount(aVaultLpMint ag_solanago.PublicKey) *MeteoraSwap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(aVaultLpMint).WRITE()
	return inst
}

// GetAVaultLpMintAccount gets the "aVaultLpMint" account.
func (inst *MeteoraSwap) GetAVaultLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetBVaultLpMintAccount sets the "bVaultLpMint" account.
func (inst *MeteoraSwap) SetBVaultLpMintAccount(bVaultLpMint ag_solanago.PublicKey) *MeteoraSwap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(bVaultLpMint).WRITE()
	return inst
}

// GetBVaultLpMintAccount gets the "bVaultLpMint" account.
func (inst *MeteoraSwap) GetBVaultLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetAVaultLpAccount sets the "aVaultLp" account.
func (inst *MeteoraSwap) SetAVaultLpAccount(aVaultLp ag_solanago.PublicKey) *MeteoraSwap {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(aVaultLp).WRITE()
	return inst
}

// GetAVaultLpAccount gets the "aVaultLp" account.
func (inst *MeteoraSwap) GetAVaultLpAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetBVaultLpAccount sets the "bVaultLp" account.
func (inst *MeteoraSwap) SetBVaultLpAccount(bVaultLp ag_solanago.PublicKey) *MeteoraSwap {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(bVaultLp).WRITE()
	return inst
}

// GetBVaultLpAccount gets the "bVaultLp" account.
func (inst *MeteoraSwap) GetBVaultLpAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetAdminTokenFeeAccount sets the "adminTokenFee" account.
func (inst *MeteoraSwap) SetAdminTokenFeeAccount(adminTokenFee ag_solanago.PublicKey) *MeteoraSwap {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(adminTokenFee).WRITE()
	return inst
}

// GetAdminTokenFeeAccount gets the "adminTokenFee" account.
func (inst *MeteoraSwap) GetAdminTokenFeeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetUserAccount sets the "user" account.
func (inst *MeteoraSwap) SetUserAccount(user ag_solanago.PublicKey) *MeteoraSwap {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(user)
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *MeteoraSwap) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetVaultProgramAccount sets the "vaultProgram" account.
func (inst *MeteoraSwap) SetVaultProgramAccount(vaultProgram ag_solanago.PublicKey) *MeteoraSwap {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(vaultProgram)
	return inst
}

// GetVaultProgramAccount gets the "vaultProgram" account.
func (inst *MeteoraSwap) GetVaultProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *MeteoraSwap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *MeteoraSwap {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *MeteoraSwap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

func (inst MeteoraSwap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MeteoraSwap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MeteoraSwap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MeteoraSwap) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.SwapProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.UserSourceToken is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.UserDestinationToken is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.AVault is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.BVault is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.ATokenVault is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.BTokenVault is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.AVaultLpMint is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.BVaultLpMint is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.AVaultLp is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.BVaultLp is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.AdminTokenFee is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.VaultProgram is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *MeteoraSwap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MeteoraSwap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=16]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         swapProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                pool", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     userSourceToken", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("userDestinationToken", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("              aVault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("              bVault", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("         aTokenVault", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("         bTokenVault", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("        aVaultLpMint", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("        bVaultLpMint", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("            aVaultLp", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("            bVaultLp", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("       adminTokenFee", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("                user", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("        vaultProgram", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("        tokenProgram", inst.AccountMetaSlice.Get(15)))
					})
				})
		})
}

func (obj MeteoraSwap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *MeteoraSwap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewMeteoraSwapInstruction declares a new MeteoraSwap instruction with the provided parameters and accounts.
func NewMeteoraSwapInstruction(
	// Accounts:
	swapProgram ag_solanago.PublicKey,
	pool ag_solanago.PublicKey,
	userSourceToken ag_solanago.PublicKey,
	userDestinationToken ag_solanago.PublicKey,
	aVault ag_solanago.PublicKey,
	bVault ag_solanago.PublicKey,
	aTokenVault ag_solanago.PublicKey,
	bTokenVault ag_solanago.PublicKey,
	aVaultLpMint ag_solanago.PublicKey,
	bVaultLpMint ag_solanago.PublicKey,
	aVaultLp ag_solanago.PublicKey,
	bVaultLp ag_solanago.PublicKey,
	adminTokenFee ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	vaultProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *MeteoraSwap {
	return NewMeteoraSwapInstructionBuilder().
		SetSwapProgramAccount(swapProgram).
		SetPoolAccount(pool).
		SetUserSourceTokenAccount(userSourceToken).
		SetUserDestinationTokenAccount(userDestinationToken).
		SetAVaultAccount(aVault).
		SetBVaultAccount(bVault).
		SetATokenVaultAccount(aTokenVault).
		SetBTokenVaultAccount(bTokenVault).
		SetAVaultLpMintAccount(aVaultLpMint).
		SetBVaultLpMintAccount(bVaultLpMint).
		SetAVaultLpAccount(aVaultLp).
		SetBVaultLpAccount(bVaultLp).
		SetAdminTokenFeeAccount(adminTokenFee).
		SetUserAccount(user).
		SetVaultProgramAccount(vaultProgram).
		SetTokenProgramAccount(tokenProgram)
}
