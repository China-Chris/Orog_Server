// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupter

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
)

type AddLiquidity struct {
	TokenAmountIn      uint64
	MinLpAmountOut     uint64
	TokenAmountPreSwap *uint64 `bin:"optional"`
}

func (obj AddLiquidity) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenAmountIn` param:
	err = encoder.Encode(obj.TokenAmountIn)
	if err != nil {
		return err
	}
	// Serialize `MinLpAmountOut` param:
	err = encoder.Encode(obj.MinLpAmountOut)
	if err != nil {
		return err
	}
	// Serialize `TokenAmountPreSwap` param (optional):
	{
		if obj.TokenAmountPreSwap == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.TokenAmountPreSwap)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *AddLiquidity) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenAmountIn`:
	err = decoder.Decode(&obj.TokenAmountIn)
	if err != nil {
		return err
	}
	// Deserialize `MinLpAmountOut`:
	err = decoder.Decode(&obj.MinLpAmountOut)
	if err != nil {
		return err
	}
	// Deserialize `TokenAmountPreSwap` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.TokenAmountPreSwap)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type RemoveLiquidity struct {
	LpAmountIn   uint64
	MinAmountOut uint64
}

func (obj RemoveLiquidity) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LpAmountIn` param:
	err = encoder.Encode(obj.LpAmountIn)
	if err != nil {
		return err
	}
	// Serialize `MinAmountOut` param:
	err = encoder.Encode(obj.MinAmountOut)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RemoveLiquidity) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LpAmountIn`:
	err = decoder.Decode(&obj.LpAmountIn)
	if err != nil {
		return err
	}
	// Deserialize `MinAmountOut`:
	err = decoder.Decode(&obj.MinAmountOut)
	if err != nil {
		return err
	}
	return nil
}

type AmountWithSlippage struct {
	Amount      uint64
	SlippageBps uint16
}

func (obj AmountWithSlippage) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `SlippageBps` param:
	err = encoder.Encode(obj.SlippageBps)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AmountWithSlippage) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `SlippageBps`:
	err = decoder.Decode(&obj.SlippageBps)
	if err != nil {
		return err
	}
	return nil
}

type RoutePlanStep struct {
	Swap    Swap
	Percent uint8
	InputIndex  uint8
	OutputIndex uint8
}

func (obj RoutePlanStep) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Swap` param:
	{
		tmp := swapContainer{}
		switch realvalue := obj.Swap.(type) {
		case *SwapSaber:
			tmp.Enum = 0
			tmp.Saber = *realvalue
		case *SwapSaberAddDecimalsDeposit:
			tmp.Enum = 1
			tmp.SaberAddDecimalsDeposit = *realvalue
		case *SwapSaberAddDecimalsWithdraw:
			tmp.Enum = 2
			tmp.SaberAddDecimalsWithdraw = *realvalue
		case *SwapTokenSwap:
			tmp.Enum = 3
			tmp.TokenSwap = *realvalue
		case *SwapSencha:
			tmp.Enum = 4
			tmp.Sencha = *realvalue
		case *SwapStep:
			tmp.Enum = 5
			tmp.Step = *realvalue
		case *SwapCropper:
			tmp.Enum = 6
			tmp.Cropper = *realvalue
		case *SwapRaydium:
			tmp.Enum = 7
			tmp.Raydium = *realvalue
		case *SwapCrema:
			tmp.Enum = 8
			tmp.Crema = *realvalue
		case *SwapLifinity:
			tmp.Enum = 9
			tmp.Lifinity = *realvalue
		case *SwapMercurial:
			tmp.Enum = 10
			tmp.Mercurial = *realvalue
		case *SwapCykura:
			tmp.Enum = 11
			tmp.Cykura = *realvalue
		case *SwapSerum:
			tmp.Enum = 12
			tmp.Serum = *realvalue
		case *SwapMarinadeDeposit:
			tmp.Enum = 13
			tmp.MarinadeDeposit = *realvalue
		case *SwapMarinadeUnstake:
			tmp.Enum = 14
			tmp.MarinadeUnstake = *realvalue
		case *SwapAldrin:
			tmp.Enum = 15
			tmp.Aldrin = *realvalue
		case *SwapAldrinV2:
			tmp.Enum = 16
			tmp.AldrinV2 = *realvalue
		case *SwapWhirlpool:
			tmp.Enum = 17
			tmp.Whirlpool = *realvalue
		case *SwapInvariant:
			tmp.Enum = 18
			tmp.Invariant = *realvalue
		case *SwapMeteora:
			tmp.Enum = 19
			tmp.Meteora = *realvalue
		case *SwapGooseFX:
			tmp.Enum = 20
			tmp.GooseFX = *realvalue
		case *SwapDeltaFi:
			tmp.Enum = 21
			tmp.DeltaFi = *realvalue
		case *SwapBalansol:
			tmp.Enum = 22
			tmp.Balansol = *realvalue
		case *SwapMarcoPolo:
			tmp.Enum = 23
			tmp.MarcoPolo = *realvalue
		case *SwapDradex:
			tmp.Enum = 24
			tmp.Dradex = *realvalue
		case *SwapLifinityV2:
			tmp.Enum = 25
			tmp.LifinityV2 = *realvalue
		case *SwapRaydiumClmm:
			tmp.Enum = 26
			tmp.RaydiumClmm = *realvalue
		case *SwapOpenbook:
			tmp.Enum = 27
			tmp.Openbook = *realvalue
		case *SwapPhoenix:
			tmp.Enum = 28
			tmp.Phoenix = *realvalue
		case *SwapSymmetry:
			tmp.Enum = 29
			tmp.Symmetry = *realvalue
		case *SwapTokenSwapV2:
			tmp.Enum = 30
			tmp.TokenSwapV2 = *realvalue
		case *SwapHeliumTreasuryManagementRedeemV0:
			tmp.Enum = 31
			tmp.HeliumTreasuryManagementRedeemV0 = *realvalue
		case *SwapStakeDexStakeWrappedSol:
			tmp.Enum = 32
			tmp.StakeDexStakeWrappedSol = *realvalue
		case *SwapStakeDexSwapViaStake:
			tmp.Enum = 33
			tmp.StakeDexSwapViaStake = *realvalue
		case *SwapGooseFXV2:
			tmp.Enum = 34
			tmp.GooseFXV2 = *realvalue
		case *SwapPerps:
			tmp.Enum = 35
			tmp.Perps = *realvalue
		case *SwapPerpsAddLiquidity:
			tmp.Enum = 36
			tmp.PerpsAddLiquidity = *realvalue
		case *SwapPerpsRemoveLiquidity:
			tmp.Enum = 37
			tmp.PerpsRemoveLiquidity = *realvalue
		case *SwapMeteoraDlmm:
			tmp.Enum = 38
			tmp.MeteoraDlmm = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	// Serialize `Percent` param:
	err = encoder.Encode(obj.Percent)
	if err != nil {
		return err
	}
	// Serialize `InputIndex` param:
	err = encoder.Encode(obj.InputIndex)
	if err != nil {
		return err
	}
	// Serialize `OutputIndex` param:
	err = encoder.Encode(obj.OutputIndex)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RoutePlanStep) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Swap`:
	{
		tmp := new(swapContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.Swap = (*SwapSaber)(&tmp.Enum)
		case 1:
			obj.Swap = (*SwapSaberAddDecimalsDeposit)(&tmp.Enum)
		case 2:
			obj.Swap = (*SwapSaberAddDecimalsWithdraw)(&tmp.Enum)
		case 3:
			obj.Swap = (*SwapTokenSwap)(&tmp.Enum)
		case 4:
			obj.Swap = (*SwapSencha)(&tmp.Enum)
		case 5:
			obj.Swap = (*SwapStep)(&tmp.Enum)
		case 6:
			obj.Swap = (*SwapCropper)(&tmp.Enum)
		case 7:
			obj.Swap = (*SwapRaydium)(&tmp.Enum)
		case 8:
			obj.Swap = &tmp.Crema
		case 9:
			obj.Swap = (*SwapLifinity)(&tmp.Enum)
		case 10:
			obj.Swap = (*SwapMercurial)(&tmp.Enum)
		case 11:
			obj.Swap = (*SwapCykura)(&tmp.Enum)
		case 12:
			obj.Swap = &tmp.Serum
		case 13:
			obj.Swap = (*SwapMarinadeDeposit)(&tmp.Enum)
		case 14:
			obj.Swap = (*SwapMarinadeUnstake)(&tmp.Enum)
		case 15:
			obj.Swap = &tmp.Aldrin
		case 16:
			obj.Swap = &tmp.AldrinV2
		case 17:
			obj.Swap = &tmp.Whirlpool
		case 18:
			obj.Swap = &tmp.Invariant
		case 19:
			obj.Swap = (*SwapMeteora)(&tmp.Enum)
		case 20:
			obj.Swap = (*SwapGooseFX)(&tmp.Enum)
		case 21:
			obj.Swap = &tmp.DeltaFi
		case 22:
			obj.Swap = (*SwapBalansol)(&tmp.Enum)
		case 23:
			obj.Swap = &tmp.MarcoPolo
		case 24:
			obj.Swap = &tmp.Dradex
		case 25:
			obj.Swap = (*SwapLifinityV2)(&tmp.Enum)
		case 26:
			obj.Swap = (*SwapRaydiumClmm)(&tmp.Enum)
		case 27:
			obj.Swap = &tmp.Openbook
		case 28:
			obj.Swap = &tmp.Phoenix
		case 29:
			obj.Swap = &tmp.Symmetry
		case 30:
			obj.Swap = (*SwapTokenSwapV2)(&tmp.Enum)
		case 31:
			obj.Swap = (*SwapHeliumTreasuryManagementRedeemV0)(&tmp.Enum)
		case 32:
			obj.Swap = (*SwapStakeDexStakeWrappedSol)(&tmp.Enum)
		case 33:
			obj.Swap = &tmp.StakeDexSwapViaStake
		case 34:
			obj.Swap = (*SwapGooseFXV2)(&tmp.Enum)
		case 35:
			obj.Swap = (*SwapPerps)(&tmp.Enum)
		case 36:
			obj.Swap = (*SwapPerpsAddLiquidity)(&tmp.Enum)
		case 37:
			obj.Swap = (*SwapPerpsRemoveLiquidity)(&tmp.Enum)
		case 38:
			obj.Swap = (*SwapMeteoraDlmm)(&tmp.Enum)
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	// Deserialize `Percent`:
	err = decoder.Decode(&obj.Percent)
	if err != nil {
		return err
	}
	// Deserialize `InputIndex`:
	err = decoder.Decode(&obj.InputIndex)
	if err != nil {
		return err
	}
	// Deserialize `OutputIndex`:
	err = decoder.Decode(&obj.OutputIndex)
	if err != nil {
		return err
	}
	return nil
}

type Side ag_binary.BorshEnum

const (
	SideBid Side = iota
	SideAsk
)

func (value Side) String() string {
	switch value {
	case SideBid:
		return "Bid"
	case SideAsk:
		return "Ask"
	default:
		return ""
	}
}

type Swap interface {
	isSwap()
}

type swapContainer struct {
	Enum                             ag_binary.BorshEnum `borsh_enum:"true"`
	Saber                            SwapSaber
	SaberAddDecimalsDeposit          SwapSaberAddDecimalsDeposit
	SaberAddDecimalsWithdraw         SwapSaberAddDecimalsWithdraw
	TokenSwap                        SwapTokenSwap
	Sencha                           SwapSencha
	Step                             SwapStep
	Cropper                          SwapCropper
	Raydium                          SwapRaydium
	Crema                            SwapCrema
	Lifinity                         SwapLifinity
	Mercurial                        SwapMercurial
	Cykura                           SwapCykura
	Serum                            SwapSerum
	MarinadeDeposit                  SwapMarinadeDeposit
	MarinadeUnstake                  SwapMarinadeUnstake
	Aldrin                           SwapAldrin
	AldrinV2                         SwapAldrinV2
	Whirlpool                        SwapWhirlpool
	Invariant                        SwapInvariant
	Meteora                          SwapMeteora
	GooseFX                          SwapGooseFX
	DeltaFi                          SwapDeltaFi
	Balansol                         SwapBalansol
	MarcoPolo                        SwapMarcoPolo
	Dradex                           SwapDradex
	LifinityV2                       SwapLifinityV2
	RaydiumClmm                      SwapRaydiumClmm
	Openbook                         SwapOpenbook
	Phoenix                          SwapPhoenix
	Symmetry                         SwapSymmetry
	TokenSwapV2                      SwapTokenSwapV2
	HeliumTreasuryManagementRedeemV0 SwapHeliumTreasuryManagementRedeemV0
	StakeDexStakeWrappedSol          SwapStakeDexStakeWrappedSol
	StakeDexSwapViaStake             SwapStakeDexSwapViaStake
	GooseFXV2                        SwapGooseFXV2
	Perps                            SwapPerps
	PerpsAddLiquidity                SwapPerpsAddLiquidity
	PerpsRemoveLiquidity             SwapPerpsRemoveLiquidity
	MeteoraDlmm                      SwapMeteoraDlmm
}

type SwapSaber uint8

func (obj SwapSaber) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapSaber) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *SwapSaber) isSwap() {}

type SwapSaberAddDecimalsDeposit uint8

func (obj SwapSaberAddDecimalsDeposit) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapSaberAddDecimalsDeposit) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *SwapSaberAddDecimalsDeposit) isSwap() {}

type SwapSaberAddDecimalsWithdraw uint8

func (obj SwapSaberAddDecimalsWithdraw) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapSaberAddDecimalsWithdraw) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *SwapSaberAddDecimalsWithdraw) isSwap() {}

type SwapTokenSwap uint8

func (obj SwapTokenSwap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapTokenSwap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *SwapTokenSwap) isSwap() {}

type SwapSencha uint8

func (obj SwapSencha) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapSencha) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *SwapSencha) isSwap() {}

type SwapStep uint8

func (obj SwapStep) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapStep) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *SwapStep) isSwap() {}

type SwapCropper uint8

func (obj SwapCropper) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapCropper) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *SwapCropper) isSwap() {}

type SwapRaydium uint8

func (obj SwapRaydium) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapRaydium) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *SwapRaydium) isSwap() {}

type SwapCrema struct {
	AToB bool
}

func (obj SwapCrema) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AToB` param:
	err = encoder.Encode(obj.AToB)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapCrema) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AToB`:
	err = decoder.Decode(&obj.AToB)
	if err != nil {
		return err
	}
	return nil
}

func (_ *SwapCrema) isSwap() {}

type SwapLifinity uint8

func (obj SwapLifinity) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapLifinity) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *SwapLifinity) isSwap() {}

type SwapMercurial uint8

func (obj SwapMercurial) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapMercurial) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *SwapMercurial) isSwap() {}

type SwapCykura uint8

func (obj SwapCykura) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapCykura) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *SwapCykura) isSwap() {}

type SwapSerum struct {
	Side Side
}

func (obj SwapSerum) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapSerum) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (_ *SwapSerum) isSwap() {}

type SwapMarinadeDeposit uint8

func (obj SwapMarinadeDeposit) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapMarinadeDeposit) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *SwapMarinadeDeposit) isSwap() {}

type SwapMarinadeUnstake uint8

func (obj SwapMarinadeUnstake) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapMarinadeUnstake) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *SwapMarinadeUnstake) isSwap() {}

type SwapAldrin struct {
	Side Side
}

func (obj SwapAldrin) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapAldrin) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (_ *SwapAldrin) isSwap() {}

type SwapAldrinV2 struct {
	Side Side
}

func (obj SwapAldrinV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapAldrinV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (_ *SwapAldrinV2) isSwap() {}

type SwapWhirlpool struct {
	AToB bool
}

func (obj SwapWhirlpool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AToB` param:
	err = encoder.Encode(obj.AToB)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapWhirlpool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AToB`:
	err = decoder.Decode(&obj.AToB)
	if err != nil {
		return err
	}
	return nil
}

func (_ *SwapWhirlpool) isSwap() {}

type SwapInvariant struct {
	XToY bool
}

func (obj SwapInvariant) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `XToY` param:
	err = encoder.Encode(obj.XToY)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapInvariant) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `XToY`:
	err = decoder.Decode(&obj.XToY)
	if err != nil {
		return err
	}
	return nil
}

func (_ *SwapInvariant) isSwap() {}

type SwapMeteora uint8

func (obj SwapMeteora) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapMeteora) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *SwapMeteora) isSwap() {}

type SwapGooseFX uint8

func (obj SwapGooseFX) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapGooseFX) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *SwapGooseFX) isSwap() {}

type SwapDeltaFi struct {
	Stable bool
}

func (obj SwapDeltaFi) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Stable` param:
	err = encoder.Encode(obj.Stable)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapDeltaFi) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Stable`:
	err = decoder.Decode(&obj.Stable)
	if err != nil {
		return err
	}
	return nil
}

func (_ *SwapDeltaFi) isSwap() {}

type SwapBalansol uint8

func (obj SwapBalansol) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapBalansol) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *SwapBalansol) isSwap() {}

type SwapMarcoPolo struct {
	XToY bool
}

func (obj SwapMarcoPolo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `XToY` param:
	err = encoder.Encode(obj.XToY)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapMarcoPolo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `XToY`:
	err = decoder.Decode(&obj.XToY)
	if err != nil {
		return err
	}
	return nil
}

func (_ *SwapMarcoPolo) isSwap() {}

type SwapDradex struct {
	Side Side
}

func (obj SwapDradex) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapDradex) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (_ *SwapDradex) isSwap() {}

type SwapLifinityV2 uint8

func (obj SwapLifinityV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapLifinityV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *SwapLifinityV2) isSwap() {}

type SwapRaydiumClmm uint8

func (obj SwapRaydiumClmm) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapRaydiumClmm) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *SwapRaydiumClmm) isSwap() {}

type SwapOpenbook struct {
	Side Side
}

func (obj SwapOpenbook) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapOpenbook) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (_ *SwapOpenbook) isSwap() {}

type SwapPhoenix struct {
	Side Side
}

func (obj SwapPhoenix) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapPhoenix) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (_ *SwapPhoenix) isSwap() {}

type SwapSymmetry struct {
	FromTokenId uint64
	ToTokenId   uint64
}

func (obj SwapSymmetry) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FromTokenId` param:
	err = encoder.Encode(obj.FromTokenId)
	if err != nil {
		return err
	}
	// Serialize `ToTokenId` param:
	err = encoder.Encode(obj.ToTokenId)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapSymmetry) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FromTokenId`:
	err = decoder.Decode(&obj.FromTokenId)
	if err != nil {
		return err
	}
	// Deserialize `ToTokenId`:
	err = decoder.Decode(&obj.ToTokenId)
	if err != nil {
		return err
	}
	return nil
}

func (_ *SwapSymmetry) isSwap() {}

type SwapTokenSwapV2 uint8

func (obj SwapTokenSwapV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapTokenSwapV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *SwapTokenSwapV2) isSwap() {}

type SwapHeliumTreasuryManagementRedeemV0 uint8

func (obj SwapHeliumTreasuryManagementRedeemV0) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapHeliumTreasuryManagementRedeemV0) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *SwapHeliumTreasuryManagementRedeemV0) isSwap() {}

type SwapStakeDexStakeWrappedSol uint8

func (obj SwapStakeDexStakeWrappedSol) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapStakeDexStakeWrappedSol) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *SwapStakeDexStakeWrappedSol) isSwap() {}

type SwapStakeDexSwapViaStake struct {
	BridgeStakeSeed uint32
}

func (obj SwapStakeDexSwapViaStake) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BridgeStakeSeed` param:
	err = encoder.Encode(obj.BridgeStakeSeed)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapStakeDexSwapViaStake) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BridgeStakeSeed`:
	err = decoder.Decode(&obj.BridgeStakeSeed)
	if err != nil {
		return err
	}
	return nil
}

func (_ *SwapStakeDexSwapViaStake) isSwap() {}

type SwapGooseFXV2 uint8

func (obj SwapGooseFXV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapGooseFXV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *SwapGooseFXV2) isSwap() {}

type SwapPerps uint8

func (obj SwapPerps) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapPerps) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *SwapPerps) isSwap() {}

type SwapPerpsAddLiquidity uint8

func (obj SwapPerpsAddLiquidity) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapPerpsAddLiquidity) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *SwapPerpsAddLiquidity) isSwap() {}

type SwapPerpsRemoveLiquidity uint8

func (obj SwapPerpsRemoveLiquidity) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapPerpsRemoveLiquidity) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *SwapPerpsRemoveLiquidity) isSwap() {}

type SwapMeteoraDlmm uint8

func (obj SwapMeteoraDlmm) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *SwapMeteoraDlmm) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *SwapMeteoraDlmm) isSwap() {}
