// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// TokenSwapV2 is the `tokenSwapV2` instruction.
type TokenSwapV2 struct {

	// [0] = [] swapProgram
	//
	// [1] = [] swap
	//
	// [2] = [] authority
	//
	// [3] = [] userTransferAuthority
	//
	// [4] = [WRITE] source
	//
	// [5] = [WRITE] swapSource
	//
	// [6] = [WRITE] swapDestination
	//
	// [7] = [WRITE] destination
	//
	// [8] = [WRITE] poolMint
	//
	// [9] = [WRITE] poolFee
	//
	// [10] = [] sourceMint
	//
	// [11] = [] destinationMint
	//
	// [12] = [] sourceTokenProgram
	//
	// [13] = [] destinationTokenProgram
	//
	// [14] = [] poolTokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewTokenSwapV2InstructionBuilder creates a new `TokenSwapV2` instruction builder.
func NewTokenSwapV2InstructionBuilder() *TokenSwapV2 {
	nd := &TokenSwapV2{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 15),
	}
	return nd
}

// SetSwapProgramAccount sets the "swapProgram" account.
func (inst *TokenSwapV2) SetSwapProgramAccount(swapProgram ag_solanago.PublicKey) *TokenSwapV2 {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(swapProgram)
	return inst
}

// GetSwapProgramAccount gets the "swapProgram" account.
func (inst *TokenSwapV2) GetSwapProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSwapAccount sets the "swap" account.
func (inst *TokenSwapV2) SetSwapAccount(swap ag_solanago.PublicKey) *TokenSwapV2 {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(swap)
	return inst
}

// GetSwapAccount gets the "swap" account.
func (inst *TokenSwapV2) GetSwapAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *TokenSwapV2) SetAuthorityAccount(authority ag_solanago.PublicKey) *TokenSwapV2 {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authority)
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *TokenSwapV2) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUserTransferAuthorityAccount sets the "userTransferAuthority" account.
func (inst *TokenSwapV2) SetUserTransferAuthorityAccount(userTransferAuthority ag_solanago.PublicKey) *TokenSwapV2 {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(userTransferAuthority)
	return inst
}

// GetUserTransferAuthorityAccount gets the "userTransferAuthority" account.
func (inst *TokenSwapV2) GetUserTransferAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSourceAccount sets the "source" account.
func (inst *TokenSwapV2) SetSourceAccount(source ag_solanago.PublicKey) *TokenSwapV2 {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(source).WRITE()
	return inst
}

// GetSourceAccount gets the "source" account.
func (inst *TokenSwapV2) GetSourceAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSwapSourceAccount sets the "swapSource" account.
func (inst *TokenSwapV2) SetSwapSourceAccount(swapSource ag_solanago.PublicKey) *TokenSwapV2 {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(swapSource).WRITE()
	return inst
}

// GetSwapSourceAccount gets the "swapSource" account.
func (inst *TokenSwapV2) GetSwapSourceAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSwapDestinationAccount sets the "swapDestination" account.
func (inst *TokenSwapV2) SetSwapDestinationAccount(swapDestination ag_solanago.PublicKey) *TokenSwapV2 {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(swapDestination).WRITE()
	return inst
}

// GetSwapDestinationAccount gets the "swapDestination" account.
func (inst *TokenSwapV2) GetSwapDestinationAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetDestinationAccount sets the "destination" account.
func (inst *TokenSwapV2) SetDestinationAccount(destination ag_solanago.PublicKey) *TokenSwapV2 {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(destination).WRITE()
	return inst
}

// GetDestinationAccount gets the "destination" account.
func (inst *TokenSwapV2) GetDestinationAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetPoolMintAccount sets the "poolMint" account.
func (inst *TokenSwapV2) SetPoolMintAccount(poolMint ag_solanago.PublicKey) *TokenSwapV2 {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(poolMint).WRITE()
	return inst
}

// GetPoolMintAccount gets the "poolMint" account.
func (inst *TokenSwapV2) GetPoolMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetPoolFeeAccount sets the "poolFee" account.
func (inst *TokenSwapV2) SetPoolFeeAccount(poolFee ag_solanago.PublicKey) *TokenSwapV2 {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(poolFee).WRITE()
	return inst
}

// GetPoolFeeAccount gets the "poolFee" account.
func (inst *TokenSwapV2) GetPoolFeeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetSourceMintAccount sets the "sourceMint" account.
func (inst *TokenSwapV2) SetSourceMintAccount(sourceMint ag_solanago.PublicKey) *TokenSwapV2 {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(sourceMint)
	return inst
}

// GetSourceMintAccount gets the "sourceMint" account.
func (inst *TokenSwapV2) GetSourceMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetDestinationMintAccount sets the "destinationMint" account.
func (inst *TokenSwapV2) SetDestinationMintAccount(destinationMint ag_solanago.PublicKey) *TokenSwapV2 {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(destinationMint)
	return inst
}

// GetDestinationMintAccount gets the "destinationMint" account.
func (inst *TokenSwapV2) GetDestinationMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetSourceTokenProgramAccount sets the "sourceTokenProgram" account.
func (inst *TokenSwapV2) SetSourceTokenProgramAccount(sourceTokenProgram ag_solanago.PublicKey) *TokenSwapV2 {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(sourceTokenProgram)
	return inst
}

// GetSourceTokenProgramAccount gets the "sourceTokenProgram" account.
func (inst *TokenSwapV2) GetSourceTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetDestinationTokenProgramAccount sets the "destinationTokenProgram" account.
func (inst *TokenSwapV2) SetDestinationTokenProgramAccount(destinationTokenProgram ag_solanago.PublicKey) *TokenSwapV2 {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(destinationTokenProgram)
	return inst
}

// GetDestinationTokenProgramAccount gets the "destinationTokenProgram" account.
func (inst *TokenSwapV2) GetDestinationTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetPoolTokenProgramAccount sets the "poolTokenProgram" account.
func (inst *TokenSwapV2) SetPoolTokenProgramAccount(poolTokenProgram ag_solanago.PublicKey) *TokenSwapV2 {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(poolTokenProgram)
	return inst
}

// GetPoolTokenProgramAccount gets the "poolTokenProgram" account.
func (inst *TokenSwapV2) GetPoolTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

func (inst TokenSwapV2) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_TokenSwapV2,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst TokenSwapV2) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *TokenSwapV2) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.SwapProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Swap is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.UserTransferAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Source is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SwapSource is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SwapDestination is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Destination is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.PoolMint is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.PoolFee is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.SourceMint is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.DestinationMint is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.SourceTokenProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.DestinationTokenProgram is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.PoolTokenProgram is not set")
		}
	}
	return nil
}

func (inst *TokenSwapV2) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("TokenSwapV2")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=15]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("            swapProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                   swap", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("              authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("  userTransferAuthority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                 source", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("             swapSource", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("        swapDestination", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("            destination", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("               poolMint", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("                poolFee", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("             sourceMint", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("        destinationMint", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("     sourceTokenProgram", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("destinationTokenProgram", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("       poolTokenProgram", inst.AccountMetaSlice.Get(14)))
					})
				})
		})
}

func (obj TokenSwapV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *TokenSwapV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewTokenSwapV2Instruction declares a new TokenSwapV2 instruction with the provided parameters and accounts.
func NewTokenSwapV2Instruction(
	// Accounts:
	swapProgram ag_solanago.PublicKey,
	swap ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	userTransferAuthority ag_solanago.PublicKey,
	source ag_solanago.PublicKey,
	swapSource ag_solanago.PublicKey,
	swapDestination ag_solanago.PublicKey,
	destination ag_solanago.PublicKey,
	poolMint ag_solanago.PublicKey,
	poolFee ag_solanago.PublicKey,
	sourceMint ag_solanago.PublicKey,
	destinationMint ag_solanago.PublicKey,
	sourceTokenProgram ag_solanago.PublicKey,
	destinationTokenProgram ag_solanago.PublicKey,
	poolTokenProgram ag_solanago.PublicKey) *TokenSwapV2 {
	return NewTokenSwapV2InstructionBuilder().
		SetSwapProgramAccount(swapProgram).
		SetSwapAccount(swap).
		SetAuthorityAccount(authority).
		SetUserTransferAuthorityAccount(userTransferAuthority).
		SetSourceAccount(source).
		SetSwapSourceAccount(swapSource).
		SetSwapDestinationAccount(swapDestination).
		SetDestinationAccount(destination).
		SetPoolMintAccount(poolMint).
		SetPoolFeeAccount(poolFee).
		SetSourceMintAccount(sourceMint).
		SetDestinationMintAccount(destinationMint).
		SetSourceTokenProgramAccount(sourceTokenProgram).
		SetDestinationTokenProgramAccount(destinationTokenProgram).
		SetPoolTokenProgramAccount(poolTokenProgram)
}
