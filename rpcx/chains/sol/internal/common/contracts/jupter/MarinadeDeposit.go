// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MarinadeDeposit is the `marinadeDeposit` instruction.
type MarinadeDeposit struct {

	// [0] = [] marinadeFinanceProgram
	//
	// [1] = [WRITE] state
	//
	// [2] = [WRITE] msolMint
	//
	// [3] = [WRITE] liqPoolSolLegPda
	//
	// [4] = [WRITE] liqPoolMsolLeg
	//
	// [5] = [] liqPoolMsolLegAuthority
	//
	// [6] = [WRITE] reservePda
	//
	// [7] = [WRITE] transferFrom
	//
	// [8] = [WRITE] mintTo
	//
	// [9] = [] msolMintAuthority
	//
	// [10] = [] systemProgram
	//
	// [11] = [] tokenProgram
	//
	// [12] = [WRITE] userWsolTokenAccount
	//
	// [13] = [WRITE] tempWsolTokenAccount
	//
	// [14] = [] userTransferAuthority
	//
	// [15] = [WRITE] payer
	//
	// [16] = [] wsolMint
	//
	// [17] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMarinadeDepositInstructionBuilder creates a new `MarinadeDeposit` instruction builder.
func NewMarinadeDepositInstructionBuilder() *MarinadeDeposit {
	nd := &MarinadeDeposit{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 18),
	}
	return nd
}

// SetMarinadeFinanceProgramAccount sets the "marinadeFinanceProgram" account.
func (inst *MarinadeDeposit) SetMarinadeFinanceProgramAccount(marinadeFinanceProgram ag_solanago.PublicKey) *MarinadeDeposit {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(marinadeFinanceProgram)
	return inst
}

// GetMarinadeFinanceProgramAccount gets the "marinadeFinanceProgram" account.
func (inst *MarinadeDeposit) GetMarinadeFinanceProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStateAccount sets the "state" account.
func (inst *MarinadeDeposit) SetStateAccount(state ag_solanago.PublicKey) *MarinadeDeposit {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(state).WRITE()
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *MarinadeDeposit) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMsolMintAccount sets the "msolMint" account.
func (inst *MarinadeDeposit) SetMsolMintAccount(msolMint ag_solanago.PublicKey) *MarinadeDeposit {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(msolMint).WRITE()
	return inst
}

// GetMsolMintAccount gets the "msolMint" account.
func (inst *MarinadeDeposit) GetMsolMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetLiqPoolSolLegPdaAccount sets the "liqPoolSolLegPda" account.
func (inst *MarinadeDeposit) SetLiqPoolSolLegPdaAccount(liqPoolSolLegPda ag_solanago.PublicKey) *MarinadeDeposit {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(liqPoolSolLegPda).WRITE()
	return inst
}

// GetLiqPoolSolLegPdaAccount gets the "liqPoolSolLegPda" account.
func (inst *MarinadeDeposit) GetLiqPoolSolLegPdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetLiqPoolMsolLegAccount sets the "liqPoolMsolLeg" account.
func (inst *MarinadeDeposit) SetLiqPoolMsolLegAccount(liqPoolMsolLeg ag_solanago.PublicKey) *MarinadeDeposit {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(liqPoolMsolLeg).WRITE()
	return inst
}

// GetLiqPoolMsolLegAccount gets the "liqPoolMsolLeg" account.
func (inst *MarinadeDeposit) GetLiqPoolMsolLegAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetLiqPoolMsolLegAuthorityAccount sets the "liqPoolMsolLegAuthority" account.
func (inst *MarinadeDeposit) SetLiqPoolMsolLegAuthorityAccount(liqPoolMsolLegAuthority ag_solanago.PublicKey) *MarinadeDeposit {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(liqPoolMsolLegAuthority)
	return inst
}

// GetLiqPoolMsolLegAuthorityAccount gets the "liqPoolMsolLegAuthority" account.
func (inst *MarinadeDeposit) GetLiqPoolMsolLegAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetReservePdaAccount sets the "reservePda" account.
func (inst *MarinadeDeposit) SetReservePdaAccount(reservePda ag_solanago.PublicKey) *MarinadeDeposit {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(reservePda).WRITE()
	return inst
}

// GetReservePdaAccount gets the "reservePda" account.
func (inst *MarinadeDeposit) GetReservePdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTransferFromAccount sets the "transferFrom" account.
func (inst *MarinadeDeposit) SetTransferFromAccount(transferFrom ag_solanago.PublicKey) *MarinadeDeposit {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(transferFrom).WRITE()
	return inst
}

// GetTransferFromAccount gets the "transferFrom" account.
func (inst *MarinadeDeposit) GetTransferFromAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetMintToAccount sets the "mintTo" account.
func (inst *MarinadeDeposit) SetMintToAccount(mintTo ag_solanago.PublicKey) *MarinadeDeposit {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(mintTo).WRITE()
	return inst
}

// GetMintToAccount gets the "mintTo" account.
func (inst *MarinadeDeposit) GetMintToAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetMsolMintAuthorityAccount sets the "msolMintAuthority" account.
func (inst *MarinadeDeposit) SetMsolMintAuthorityAccount(msolMintAuthority ag_solanago.PublicKey) *MarinadeDeposit {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(msolMintAuthority)
	return inst
}

// GetMsolMintAuthorityAccount gets the "msolMintAuthority" account.
func (inst *MarinadeDeposit) GetMsolMintAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *MarinadeDeposit) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *MarinadeDeposit {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *MarinadeDeposit) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *MarinadeDeposit) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *MarinadeDeposit {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *MarinadeDeposit) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetUserWsolTokenAccountAccount sets the "userWsolTokenAccount" account.
func (inst *MarinadeDeposit) SetUserWsolTokenAccountAccount(userWsolTokenAccount ag_solanago.PublicKey) *MarinadeDeposit {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(userWsolTokenAccount).WRITE()
	return inst
}

// GetUserWsolTokenAccountAccount gets the "userWsolTokenAccount" account.
func (inst *MarinadeDeposit) GetUserWsolTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetTempWsolTokenAccountAccount sets the "tempWsolTokenAccount" account.
func (inst *MarinadeDeposit) SetTempWsolTokenAccountAccount(tempWsolTokenAccount ag_solanago.PublicKey) *MarinadeDeposit {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(tempWsolTokenAccount).WRITE()
	return inst
}

// GetTempWsolTokenAccountAccount gets the "tempWsolTokenAccount" account.
func (inst *MarinadeDeposit) GetTempWsolTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetUserTransferAuthorityAccount sets the "userTransferAuthority" account.
func (inst *MarinadeDeposit) SetUserTransferAuthorityAccount(userTransferAuthority ag_solanago.PublicKey) *MarinadeDeposit {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(userTransferAuthority)
	return inst
}

// GetUserTransferAuthorityAccount gets the "userTransferAuthority" account.
func (inst *MarinadeDeposit) GetUserTransferAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetPayerAccount sets the "payer" account.
func (inst *MarinadeDeposit) SetPayerAccount(payer ag_solanago.PublicKey) *MarinadeDeposit {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(payer).WRITE()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *MarinadeDeposit) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetWsolMintAccount sets the "wsolMint" account.
func (inst *MarinadeDeposit) SetWsolMintAccount(wsolMint ag_solanago.PublicKey) *MarinadeDeposit {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(wsolMint)
	return inst
}

// GetWsolMintAccount gets the "wsolMint" account.
func (inst *MarinadeDeposit) GetWsolMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetRentAccount sets the "rent" account.
func (inst *MarinadeDeposit) SetRentAccount(rent ag_solanago.PublicKey) *MarinadeDeposit {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *MarinadeDeposit) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

func (inst MarinadeDeposit) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MarinadeDeposit,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MarinadeDeposit) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MarinadeDeposit) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.MarinadeFinanceProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.MsolMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.LiqPoolSolLegPda is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.LiqPoolMsolLeg is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.LiqPoolMsolLegAuthority is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.ReservePda is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TransferFrom is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.MintTo is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.MsolMintAuthority is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.UserWsolTokenAccount is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.TempWsolTokenAccount is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.UserTransferAuthority is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.WsolMint is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *MarinadeDeposit) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MarinadeDeposit")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=18]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta(" marinadeFinanceProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                  state", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("               msolMint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       liqPoolSolLegPda", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("         liqPoolMsolLeg", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("liqPoolMsolLegAuthority", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("             reservePda", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("           transferFrom", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                 mintTo", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("      msolMintAuthority", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("          systemProgram", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("           tokenProgram", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("          userWsolToken", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("          tempWsolToken", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("  userTransferAuthority", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("                  payer", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("               wsolMint", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("                   rent", inst.AccountMetaSlice.Get(17)))
					})
				})
		})
}

func (obj MarinadeDeposit) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *MarinadeDeposit) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewMarinadeDepositInstruction declares a new MarinadeDeposit instruction with the provided parameters and accounts.
func NewMarinadeDepositInstruction(
	// Accounts:
	marinadeFinanceProgram ag_solanago.PublicKey,
	state ag_solanago.PublicKey,
	msolMint ag_solanago.PublicKey,
	liqPoolSolLegPda ag_solanago.PublicKey,
	liqPoolMsolLeg ag_solanago.PublicKey,
	liqPoolMsolLegAuthority ag_solanago.PublicKey,
	reservePda ag_solanago.PublicKey,
	transferFrom ag_solanago.PublicKey,
	mintTo ag_solanago.PublicKey,
	msolMintAuthority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	userWsolTokenAccount ag_solanago.PublicKey,
	tempWsolTokenAccount ag_solanago.PublicKey,
	userTransferAuthority ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	wsolMint ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *MarinadeDeposit {
	return NewMarinadeDepositInstructionBuilder().
		SetMarinadeFinanceProgramAccount(marinadeFinanceProgram).
		SetStateAccount(state).
		SetMsolMintAccount(msolMint).
		SetLiqPoolSolLegPdaAccount(liqPoolSolLegPda).
		SetLiqPoolMsolLegAccount(liqPoolMsolLeg).
		SetLiqPoolMsolLegAuthorityAccount(liqPoolMsolLegAuthority).
		SetReservePdaAccount(reservePda).
		SetTransferFromAccount(transferFrom).
		SetMintToAccount(mintTo).
		SetMsolMintAuthorityAccount(msolMintAuthority).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetUserWsolTokenAccountAccount(userWsolTokenAccount).
		SetTempWsolTokenAccountAccount(tempWsolTokenAccount).
		SetUserTransferAuthorityAccount(userTransferAuthority).
		SetPayerAccount(payer).
		SetWsolMintAccount(wsolMint).
		SetRentAccount(rent)
}
