// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// DeltafiSwap is the `deltafiSwap` instruction.
type DeltafiSwap struct {

	// [0] = [] swapProgram
	//
	// [1] = [] marketConfig
	//
	// [2] = [WRITE] swapInfo
	//
	// [3] = [WRITE] userSourceToken
	//
	// [4] = [WRITE] userDestinationToken
	//
	// [5] = [WRITE] swapSourceToken
	//
	// [6] = [WRITE] swapDestinationToken
	//
	// [7] = [WRITE] deltafiUser
	//
	// [8] = [WRITE] adminDestinationToken
	//
	// [9] = [] pythPriceBase
	//
	// [10] = [] pythPriceQuote
	//
	// [11] = [] userAuthority
	//
	// [12] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDeltafiSwapInstructionBuilder creates a new `DeltafiSwap` instruction builder.
func NewDeltafiSwapInstructionBuilder() *DeltafiSwap {
	nd := &DeltafiSwap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 13),
	}
	return nd
}

// SetSwapProgramAccount sets the "swapProgram" account.
func (inst *DeltafiSwap) SetSwapProgramAccount(swapProgram ag_solanago.PublicKey) *DeltafiSwap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(swapProgram)
	return inst
}

// GetSwapProgramAccount gets the "swapProgram" account.
func (inst *DeltafiSwap) GetSwapProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMarketConfigAccount sets the "marketConfig" account.
func (inst *DeltafiSwap) SetMarketConfigAccount(marketConfig ag_solanago.PublicKey) *DeltafiSwap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(marketConfig)
	return inst
}

// GetMarketConfigAccount gets the "marketConfig" account.
func (inst *DeltafiSwap) GetMarketConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSwapInfoAccount sets the "swapInfo" account.
func (inst *DeltafiSwap) SetSwapInfoAccount(swapInfo ag_solanago.PublicKey) *DeltafiSwap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(swapInfo).WRITE()
	return inst
}

// GetSwapInfoAccount gets the "swapInfo" account.
func (inst *DeltafiSwap) GetSwapInfoAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUserSourceTokenAccount sets the "userSourceToken" account.
func (inst *DeltafiSwap) SetUserSourceTokenAccount(userSourceToken ag_solanago.PublicKey) *DeltafiSwap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(userSourceToken).WRITE()
	return inst
}

// GetUserSourceTokenAccount gets the "userSourceToken" account.
func (inst *DeltafiSwap) GetUserSourceTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetUserDestinationTokenAccount sets the "userDestinationToken" account.
func (inst *DeltafiSwap) SetUserDestinationTokenAccount(userDestinationToken ag_solanago.PublicKey) *DeltafiSwap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(userDestinationToken).WRITE()
	return inst
}

// GetUserDestinationTokenAccount gets the "userDestinationToken" account.
func (inst *DeltafiSwap) GetUserDestinationTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSwapSourceTokenAccount sets the "swapSourceToken" account.
func (inst *DeltafiSwap) SetSwapSourceTokenAccount(swapSourceToken ag_solanago.PublicKey) *DeltafiSwap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(swapSourceToken).WRITE()
	return inst
}

// GetSwapSourceTokenAccount gets the "swapSourceToken" account.
func (inst *DeltafiSwap) GetSwapSourceTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSwapDestinationTokenAccount sets the "swapDestinationToken" account.
func (inst *DeltafiSwap) SetSwapDestinationTokenAccount(swapDestinationToken ag_solanago.PublicKey) *DeltafiSwap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(swapDestinationToken).WRITE()
	return inst
}

// GetSwapDestinationTokenAccount gets the "swapDestinationToken" account.
func (inst *DeltafiSwap) GetSwapDestinationTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetDeltafiUserAccount sets the "deltafiUser" account.
func (inst *DeltafiSwap) SetDeltafiUserAccount(deltafiUser ag_solanago.PublicKey) *DeltafiSwap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(deltafiUser).WRITE()
	return inst
}

// GetDeltafiUserAccount gets the "deltafiUser" account.
func (inst *DeltafiSwap) GetDeltafiUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetAdminDestinationTokenAccount sets the "adminDestinationToken" account.
func (inst *DeltafiSwap) SetAdminDestinationTokenAccount(adminDestinationToken ag_solanago.PublicKey) *DeltafiSwap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(adminDestinationToken).WRITE()
	return inst
}

// GetAdminDestinationTokenAccount gets the "adminDestinationToken" account.
func (inst *DeltafiSwap) GetAdminDestinationTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetPythPriceBaseAccount sets the "pythPriceBase" account.
func (inst *DeltafiSwap) SetPythPriceBaseAccount(pythPriceBase ag_solanago.PublicKey) *DeltafiSwap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(pythPriceBase)
	return inst
}

// GetPythPriceBaseAccount gets the "pythPriceBase" account.
func (inst *DeltafiSwap) GetPythPriceBaseAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetPythPriceQuoteAccount sets the "pythPriceQuote" account.
func (inst *DeltafiSwap) SetPythPriceQuoteAccount(pythPriceQuote ag_solanago.PublicKey) *DeltafiSwap {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(pythPriceQuote)
	return inst
}

// GetPythPriceQuoteAccount gets the "pythPriceQuote" account.
func (inst *DeltafiSwap) GetPythPriceQuoteAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetUserAuthorityAccount sets the "userAuthority" account.
func (inst *DeltafiSwap) SetUserAuthorityAccount(userAuthority ag_solanago.PublicKey) *DeltafiSwap {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(userAuthority)
	return inst
}

// GetUserAuthorityAccount gets the "userAuthority" account.
func (inst *DeltafiSwap) GetUserAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *DeltafiSwap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *DeltafiSwap {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *DeltafiSwap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

func (inst DeltafiSwap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_DeltafiSwap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DeltafiSwap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DeltafiSwap) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.SwapProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.MarketConfig is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SwapInfo is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.UserSourceToken is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.UserDestinationToken is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SwapSourceToken is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SwapDestinationToken is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.DeltafiUser is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.AdminDestinationToken is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.PythPriceBase is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.PythPriceQuote is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.UserAuthority is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *DeltafiSwap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DeltafiSwap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=13]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          swapProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         marketConfig", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("             swapInfo", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("      userSourceToken", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta(" userDestinationToken", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("      swapSourceToken", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta(" swapDestinationToken", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("          deltafiUser", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("adminDestinationToken", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("        pythPriceBase", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("       pythPriceQuote", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("        userAuthority", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("         tokenProgram", inst.AccountMetaSlice.Get(12)))
					})
				})
		})
}

func (obj DeltafiSwap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *DeltafiSwap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewDeltafiSwapInstruction declares a new DeltafiSwap instruction with the provided parameters and accounts.
func NewDeltafiSwapInstruction(
	// Accounts:
	swapProgram ag_solanago.PublicKey,
	marketConfig ag_solanago.PublicKey,
	swapInfo ag_solanago.PublicKey,
	userSourceToken ag_solanago.PublicKey,
	userDestinationToken ag_solanago.PublicKey,
	swapSourceToken ag_solanago.PublicKey,
	swapDestinationToken ag_solanago.PublicKey,
	deltafiUser ag_solanago.PublicKey,
	adminDestinationToken ag_solanago.PublicKey,
	pythPriceBase ag_solanago.PublicKey,
	pythPriceQuote ag_solanago.PublicKey,
	userAuthority ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *DeltafiSwap {
	return NewDeltafiSwapInstructionBuilder().
		SetSwapProgramAccount(swapProgram).
		SetMarketConfigAccount(marketConfig).
		SetSwapInfoAccount(swapInfo).
		SetUserSourceTokenAccount(userSourceToken).
		SetUserDestinationTokenAccount(userDestinationToken).
		SetSwapSourceTokenAccount(swapSourceToken).
		SetSwapDestinationTokenAccount(swapDestinationToken).
		SetDeltafiUserAccount(deltafiUser).
		SetAdminDestinationTokenAccount(adminDestinationToken).
		SetPythPriceBaseAccount(pythPriceBase).
		SetPythPriceQuoteAccount(pythPriceQuote).
		SetUserAuthorityAccount(userAuthority).
		SetTokenProgramAccount(tokenProgram)
}
