// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package jupter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SharedAccountsRouteWithTokenLedger is the `sharedAccountsRouteWithTokenLedger` instruction.
type SharedAccountsRouteWithTokenLedger struct {
	Id              *uint8
	RoutePlan       *[]RoutePlanStep
	QuotedOutAmount *uint64
	SlippageBps     *uint16
	PlatformFeeBps  *uint8

	// [0] = [] tokenProgram
	//
	// [1] = [] programAuthority
	//
	// [2] = [SIGNER] userTransferAuthority
	//
	// [3] = [WRITE] sourceTokenAccount
	//
	// [4] = [WRITE] programSourceTokenAccount
	//
	// [5] = [WRITE] programDestinationTokenAccount
	//
	// [6] = [WRITE] destinationTokenAccount
	//
	// [7] = [] sourceMint
	//
	// [8] = [] destinationMint
	//
	// [9] = [WRITE] platformFeeAccount
	//
	// [10] = [] token2022Program
	//
	// [11] = [] tokenLedger
	//
	// [12] = [] eventAuthority
	//
	// [13] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSharedAccountsRouteWithTokenLedgerInstructionBuilder creates a new `SharedAccountsRouteWithTokenLedger` instruction builder.
func NewSharedAccountsRouteWithTokenLedgerInstructionBuilder() *SharedAccountsRouteWithTokenLedger {
	nd := &SharedAccountsRouteWithTokenLedger{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 14),
	}
	return nd
}

// SetId sets the "id" parameter.
func (inst *SharedAccountsRouteWithTokenLedger) SetId(id uint8) *SharedAccountsRouteWithTokenLedger {
	inst.Id = &id
	return inst
}

// SetRoutePlan sets the "routePlan" parameter.
func (inst *SharedAccountsRouteWithTokenLedger) SetRoutePlan(routePlan []RoutePlanStep) *SharedAccountsRouteWithTokenLedger {
	inst.RoutePlan = &routePlan
	return inst
}

// SetQuotedOutAmount sets the "quotedOutAmount" parameter.
func (inst *SharedAccountsRouteWithTokenLedger) SetQuotedOutAmount(quotedOutAmount uint64) *SharedAccountsRouteWithTokenLedger {
	inst.QuotedOutAmount = &quotedOutAmount
	return inst
}

// SetSlippageBps sets the "slippageBps" parameter.
func (inst *SharedAccountsRouteWithTokenLedger) SetSlippageBps(slippageBps uint16) *SharedAccountsRouteWithTokenLedger {
	inst.SlippageBps = &slippageBps
	return inst
}

// SetPlatformFeeBps sets the "platformFeeBps" parameter.
func (inst *SharedAccountsRouteWithTokenLedger) SetPlatformFeeBps(platformFeeBps uint8) *SharedAccountsRouteWithTokenLedger {
	inst.PlatformFeeBps = &platformFeeBps
	return inst
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *SharedAccountsRouteWithTokenLedger) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *SharedAccountsRouteWithTokenLedger {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *SharedAccountsRouteWithTokenLedger) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetProgramAuthorityAccount sets the "programAuthority" account.
func (inst *SharedAccountsRouteWithTokenLedger) SetProgramAuthorityAccount(programAuthority ag_solanago.PublicKey) *SharedAccountsRouteWithTokenLedger {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(programAuthority)
	return inst
}

// GetProgramAuthorityAccount gets the "programAuthority" account.
func (inst *SharedAccountsRouteWithTokenLedger) GetProgramAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetUserTransferAuthorityAccount sets the "userTransferAuthority" account.
func (inst *SharedAccountsRouteWithTokenLedger) SetUserTransferAuthorityAccount(userTransferAuthority ag_solanago.PublicKey) *SharedAccountsRouteWithTokenLedger {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(userTransferAuthority).SIGNER()
	return inst
}

// GetUserTransferAuthorityAccount gets the "userTransferAuthority" account.
func (inst *SharedAccountsRouteWithTokenLedger) GetUserTransferAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSourceTokenAccountAccount sets the "sourceTokenAccount" account.
func (inst *SharedAccountsRouteWithTokenLedger) SetSourceTokenAccountAccount(sourceTokenAccount ag_solanago.PublicKey) *SharedAccountsRouteWithTokenLedger {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(sourceTokenAccount).WRITE()
	return inst
}

// GetSourceTokenAccountAccount gets the "sourceTokenAccount" account.
func (inst *SharedAccountsRouteWithTokenLedger) GetSourceTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetProgramSourceTokenAccountAccount sets the "programSourceTokenAccount" account.
func (inst *SharedAccountsRouteWithTokenLedger) SetProgramSourceTokenAccountAccount(programSourceTokenAccount ag_solanago.PublicKey) *SharedAccountsRouteWithTokenLedger {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(programSourceTokenAccount).WRITE()
	return inst
}

// GetProgramSourceTokenAccountAccount gets the "programSourceTokenAccount" account.
func (inst *SharedAccountsRouteWithTokenLedger) GetProgramSourceTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetProgramDestinationTokenAccountAccount sets the "programDestinationTokenAccount" account.
func (inst *SharedAccountsRouteWithTokenLedger) SetProgramDestinationTokenAccountAccount(programDestinationTokenAccount ag_solanago.PublicKey) *SharedAccountsRouteWithTokenLedger {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(programDestinationTokenAccount).WRITE()
	return inst
}

// GetProgramDestinationTokenAccountAccount gets the "programDestinationTokenAccount" account.
func (inst *SharedAccountsRouteWithTokenLedger) GetProgramDestinationTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetDestinationTokenAccountAccount sets the "destinationTokenAccount" account.
func (inst *SharedAccountsRouteWithTokenLedger) SetDestinationTokenAccountAccount(destinationTokenAccount ag_solanago.PublicKey) *SharedAccountsRouteWithTokenLedger {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(destinationTokenAccount).WRITE()
	return inst
}

// GetDestinationTokenAccountAccount gets the "destinationTokenAccount" account.
func (inst *SharedAccountsRouteWithTokenLedger) GetDestinationTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSourceMintAccount sets the "sourceMint" account.
func (inst *SharedAccountsRouteWithTokenLedger) SetSourceMintAccount(sourceMint ag_solanago.PublicKey) *SharedAccountsRouteWithTokenLedger {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(sourceMint)
	return inst
}

// GetSourceMintAccount gets the "sourceMint" account.
func (inst *SharedAccountsRouteWithTokenLedger) GetSourceMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetDestinationMintAccount sets the "destinationMint" account.
func (inst *SharedAccountsRouteWithTokenLedger) SetDestinationMintAccount(destinationMint ag_solanago.PublicKey) *SharedAccountsRouteWithTokenLedger {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(destinationMint)
	return inst
}

// GetDestinationMintAccount gets the "destinationMint" account.
func (inst *SharedAccountsRouteWithTokenLedger) GetDestinationMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetPlatformFeeAccountAccount sets the "platformFeeAccount" account.
func (inst *SharedAccountsRouteWithTokenLedger) SetPlatformFeeAccountAccount(platformFeeAccount ag_solanago.PublicKey) *SharedAccountsRouteWithTokenLedger {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(platformFeeAccount).WRITE()
	return inst
}

// GetPlatformFeeAccountAccount gets the "platformFeeAccount" account.
func (inst *SharedAccountsRouteWithTokenLedger) GetPlatformFeeAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetToken2022ProgramAccount sets the "token2022Program" account.
func (inst *SharedAccountsRouteWithTokenLedger) SetToken2022ProgramAccount(token2022Program ag_solanago.PublicKey) *SharedAccountsRouteWithTokenLedger {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(token2022Program)
	return inst
}

// GetToken2022ProgramAccount gets the "token2022Program" account.
func (inst *SharedAccountsRouteWithTokenLedger) GetToken2022ProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenLedgerAccount sets the "tokenLedger" account.
func (inst *SharedAccountsRouteWithTokenLedger) SetTokenLedgerAccount(tokenLedger ag_solanago.PublicKey) *SharedAccountsRouteWithTokenLedger {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenLedger)
	return inst
}

// GetTokenLedgerAccount gets the "tokenLedger" account.
func (inst *SharedAccountsRouteWithTokenLedger) GetTokenLedgerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetEventAuthorityAccount sets the "eventAuthority" account.
func (inst *SharedAccountsRouteWithTokenLedger) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *SharedAccountsRouteWithTokenLedger {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "eventAuthority" account.
func (inst *SharedAccountsRouteWithTokenLedger) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetProgramAccount sets the "program" account.
func (inst *SharedAccountsRouteWithTokenLedger) SetProgramAccount(program ag_solanago.PublicKey) *SharedAccountsRouteWithTokenLedger {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *SharedAccountsRouteWithTokenLedger) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

func (inst SharedAccountsRouteWithTokenLedger) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SharedAccountsRouteWithTokenLedger,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SharedAccountsRouteWithTokenLedger) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SharedAccountsRouteWithTokenLedger) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Id == nil {
			return errors.New("Id parameter is not set")
		}
		if inst.RoutePlan == nil {
			return errors.New("RoutePlan parameter is not set")
		}
		if inst.QuotedOutAmount == nil {
			return errors.New("QuotedOutAmount parameter is not set")
		}
		if inst.SlippageBps == nil {
			return errors.New("SlippageBps parameter is not set")
		}
		if inst.PlatformFeeBps == nil {
			return errors.New("PlatformFeeBps parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ProgramAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.UserTransferAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SourceTokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.ProgramSourceTokenAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.ProgramDestinationTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.DestinationTokenAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SourceMint is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.DestinationMint is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.PlatformFeeAccount is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.Token2022Program is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenLedger is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *SharedAccountsRouteWithTokenLedger) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SharedAccountsRouteWithTokenLedger")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=5]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("             Id", *inst.Id))
						paramsBranch.Child(ag_format.Param("      RoutePlan", *inst.RoutePlan))
						paramsBranch.Child(ag_format.Param("QuotedOutAmount", *inst.QuotedOutAmount))
						paramsBranch.Child(ag_format.Param("    SlippageBps", *inst.SlippageBps))
						paramsBranch.Child(ag_format.Param(" PlatformFeeBps", *inst.PlatformFeeBps))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=14]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           tokenProgram", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       programAuthority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  userTransferAuthority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("            sourceToken", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("     programSourceToken", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("programDestinationToken", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("       destinationToken", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("             sourceMint", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("        destinationMint", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("            platformFee", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("       token2022Program", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("            tokenLedger", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("         eventAuthority", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("                program", inst.AccountMetaSlice.Get(13)))
					})
				})
		})
}

func (obj SharedAccountsRouteWithTokenLedger) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Id` param:
	err = encoder.Encode(obj.Id)
	if err != nil {
		return err
	}
	// Serialize `RoutePlan` param:
	err = encoder.Encode(obj.RoutePlan)
	if err != nil {
		return err
	}
	// Serialize `QuotedOutAmount` param:
	err = encoder.Encode(obj.QuotedOutAmount)
	if err != nil {
		return err
	}
	// Serialize `SlippageBps` param:
	err = encoder.Encode(obj.SlippageBps)
	if err != nil {
		return err
	}
	// Serialize `PlatformFeeBps` param:
	err = encoder.Encode(obj.PlatformFeeBps)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SharedAccountsRouteWithTokenLedger) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Id`:
	err = decoder.Decode(&obj.Id)
	if err != nil {
		return err
	}
	// Deserialize `RoutePlan`:
	err = decoder.Decode(&obj.RoutePlan)
	if err != nil {
		return err
	}
	// Deserialize `QuotedOutAmount`:
	err = decoder.Decode(&obj.QuotedOutAmount)
	if err != nil {
		return err
	}
	// Deserialize `SlippageBps`:
	err = decoder.Decode(&obj.SlippageBps)
	if err != nil {
		return err
	}
	// Deserialize `PlatformFeeBps`:
	err = decoder.Decode(&obj.PlatformFeeBps)
	if err != nil {
		return err
	}
	return nil
}

// NewSharedAccountsRouteWithTokenLedgerInstruction declares a new SharedAccountsRouteWithTokenLedger instruction with the provided parameters and accounts.
func NewSharedAccountsRouteWithTokenLedgerInstruction(
	// Parameters:
	id uint8,
	routePlan []RoutePlanStep,
	quotedOutAmount uint64,
	slippageBps uint16,
	platformFeeBps uint8,
	// Accounts:
	tokenProgram ag_solanago.PublicKey,
	programAuthority ag_solanago.PublicKey,
	userTransferAuthority ag_solanago.PublicKey,
	sourceTokenAccount ag_solanago.PublicKey,
	programSourceTokenAccount ag_solanago.PublicKey,
	programDestinationTokenAccount ag_solanago.PublicKey,
	destinationTokenAccount ag_solanago.PublicKey,
	sourceMint ag_solanago.PublicKey,
	destinationMint ag_solanago.PublicKey,
	platformFeeAccount ag_solanago.PublicKey,
	token2022Program ag_solanago.PublicKey,
	tokenLedger ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *SharedAccountsRouteWithTokenLedger {
	return NewSharedAccountsRouteWithTokenLedgerInstructionBuilder().
		SetId(id).
		SetRoutePlan(routePlan).
		SetQuotedOutAmount(quotedOutAmount).
		SetSlippageBps(slippageBps).
		SetPlatformFeeBps(platformFeeBps).
		SetTokenProgramAccount(tokenProgram).
		SetProgramAuthorityAccount(programAuthority).
		SetUserTransferAuthorityAccount(userTransferAuthority).
		SetSourceTokenAccountAccount(sourceTokenAccount).
		SetProgramSourceTokenAccountAccount(programSourceTokenAccount).
		SetProgramDestinationTokenAccountAccount(programDestinationTokenAccount).
		SetDestinationTokenAccountAccount(destinationTokenAccount).
		SetSourceMintAccount(sourceMint).
		SetDestinationMintAccount(destinationMint).
		SetPlatformFeeAccountAccount(platformFeeAccount).
		SetToken2022ProgramAccount(token2022Program).
		SetTokenLedgerAccount(tokenLedger).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
